{"ast":null,"code":"const {\n  Configuration,\n  OpenAIApi\n} = require('openai');\n\n// Determine request type, if request type with dates, extract dates, form apiLink constructors, apiCall, summarizeApiCallData\t\n\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport function AlphaVantage(query) {\n  // Then I have to figure out how to return the correct function based on the subRequestType.\n  // Then I have to figure out how to extract the info based on the subRequestType. For example, subRequestType 1 is TIME_SERIES_INTRADAY, so I need to extract the date, time, and interval.\n  // Then I have to write out the rest of the workflow, which involves extracting info, forming api links, calling apis, summarizing api call data, and returning summarized api call data.\n\n  workflow(query).then(result => {\n    console.log(result);\n  });\n  async function workflow(query) {\n    console.log(\"AlphaVantage called with query:\", query);\n    console.log(\"Determining Request Type...\");\n    const requestType = await getRequestType(query);\n    console.log(\"Unprocessed Request Type:\", requestType);\n    const firstDigit = requestType.replace(/\\D/g, '')[0];\n    const extractedRequestType = parseInt(firstDigit);\n    console.log(\"Processed Request Type:\", extractedRequestType);\n    console.log(\"Extracting sub Request Type\");\n    const subRequestType = await getSubRequestType(extractedRequestType, query);\n    console.log(\"Sub Request Type:\", subRequestType);\n    console.log(\"Extracting Info!\");\n    const extractedInfo = await extractInfo(extractedRequestType, query);\n    console.log(\"Extracted Info:\", extractedInfo);\n    console.log(\"Forming API Params...\");\n    const apiParams = await formApiParams(subRequestType, extractedInfo);\n    console.log(apiParams);\n    console.log(\"Calling API...\");\n    const apiCallData = await callApi(apiParams);\n    console.log(\"API Call:\", apiCallData);\n    console.log(\"Summarizing API Call Data...\");\n    const summarizedApiCallData = await summarizeApiCallData(requestType, subRequestType, apiCallData);\n    console.log(\"Summarized API Call Data:\", summarizedApiCallData);\n    console.log(\"Returning Summarized API Call Data...\");\n    return summarizedApiCallData;\n  }\n  async function getRequestType(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            View the query, determine the request type, and output the whole line associated with the query, starting with the number.\n            (1) Core Stock APIS - Intraday, Daily, Weekly, Monthly, & Current Price.\n            (2) Alpha Intelligence - News & Sentiments, Winning Portfolios.\n            (3) Fundamental Data - Company Overview, Income Statement, Balance Sheet, Cash Flow, Earnings, Earnings Calendar, IPO Calendar\n            (4) Forex - Exchange Rates, Intraday, Daily, Weekly, Monthly\n            (5) Cryptocurrency - Intraday, Daily, Weekly, Monthly\n            (6) Commodities - Crude Oil(Brent), Natural Gas, Copper, Aluminum, Wheat, Corn, Cotton, Sugar, Coffee, Global Commodities Index\n            (7) Economic Indicators - Real GDP, Real GDP Per Capita, Treasury Yield, Federal Funds Interest Rate, CPI, Inflation, Retail Sales, Durable Goods Orders, Unemployment Rate, Nonfarm Payroll\n            (8) Technical Indicators - SMA, EMA, WMA, DEMA, TEMA, TRIMA, KAMA, MAMA, T3, MACD, MACDEXT, STOCH, STOCHF, RSI, STOCHRSI, WILLR, ADX, ADXR, APO, PPO, MOM, BOP, CCI, CMO, ROC, ROCR, AROON, AROONOSC, MFI, TRIX, ULTOSC, DX, MINUS_DI, PLUS_DI, MINUS_DM, PLUS_DM, BBANDS, MIDPOINT, MIDPRICE, SAR, TRANGE, ATR, NATR, AD, ADOSC, OBV, HT_TRENDLINE, HT_SINE, HT_TRENDMODE, HT_DCPERIOD, HT_DCPHASE, HT_PHASOR\n\n            Here is the query: ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function getSubRequestType(extractedRequestType, query) {\n    if (extractedRequestType === 1) {\n      try {\n        let requestOne;\n        requestOne = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                    Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query. \n                    Return: The item in the parenthesis that corresponds to the subRequestType.\n                    1. Intraday (TIME_SERIES_INTRADAY)\n                    2. Daily (TIME_SERIES_DAILY)\n                    3. Weekly (TIME_SERIES_WEEKLY)\n                    4. Monthly (TIME_SERIES_MONTHLY)\n                    5. Current Price (GLOBAL_QUOTE)\n            \n                    Query: ${query}\n                    `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        console.log(\"requestOne:\", requestOne);\n        return requestOne.data.choices[0].text;\n      } catch (error) {\n        console.error(\"Error in createCompletion function:\", error);\n      }\n    } else if (extractedRequestType === 2) {\n      console.log(\"Case Two! Running now...\");\n      let requestTwo;\n      requestTwo = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. News & Sentiments (NEWS_SENTIMENT)\n            2. Winning Portfolios (TOURNAMENT_PORTFOLIO)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      console.log(requestTwo);\n      return requestTwo.data.choices[0].text;\n    } else if (extractedRequestType === 3) {\n      console.log(\"Request Type 3! Running now...\");\n      let requestThree;\n      requestThree = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Company Overview (OVERVIEW)\n            2. Income Statement (INCOME_STATEMENT)\n            3. Balance Sheet (BALANCE_SHEET)\n            4. Cash Flow (CASH_FLOW)\n            5. Earnings (EARNINGS)\n            6. IPO Calendar (IPO_CALENDAR)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestThree.data.choices[0].text;\n    } else if (extractedRequestType === 4) {\n      console.log(\"Case Four! Running now...\");\n      let requestFour;\n      requestFour = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (FX_INTRADAY)\n            3. Daily (FX_DAILY)\n            4. Weekly (FX_WEEKLY)\n            5. Monthly (FX_MONTHLY)\n            \n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestFour.data.choices[0].text;\n    } else if (extractedRequestType === 5) {\n      console.log(\"Case Five! Running now...\");\n      let requestFive;\n      requestFive = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exhange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (CRYPTO_INTRADAY)\n            3. Daily (CRYPTO_DAILY)\n            4. Weekly (CRYPTO_WEEKLY)\n            5. Monthly (CRYPTO_MONTHLY)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestFive.data.choices[0].text;\n    } else if (extractedRequestType === 6) {\n      console.log(\"Case Six! Running now...\");\n      let requestSix;\n      requestSix = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Crude Oil, Brent (BRENT)\n            2. Natural Gas (NATURAL_GAS)\n            3. Copper (COPPER)\n            4. Aluminum (ALUMINUM)\n            5. Gold (GOLD)\n            6. Wheat (WHEAT)\n            7. Corn (CORN)\n            8. Cotton (COTTON)\n            9. Sugar (SUGAR)\n            10. Coffee (COFFEE)\n            11. Global Commodities Index (ALL_COMMODITIES)\n    \n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestSix.data.choices[0].text;\n    } else if (extractedRequestType === 7) {\n      console.log(\"Case Seven! Running now...\");\n      let requestSeven;\n      requestSeven = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. REAL GDP (REAL_GDP)\n            2. REAL GDP PER CAPITA (REAL_GDP_PER_CAPITA)\n            3. TREASURY YIELD (TREASURY_YIELD)\n            4. FEDERAL FUNDS RATE (FEDERAL_FUNDS_RATE)\n            5. CPI (CPI)\n            6. Inflation (INFLATION)\n            7. Retail Sales (RETAIL_SALES)\n            8. Durable Goods Orders (DURABLES)\n            9. Unemployment Rate (UNEMPLOYMENT)\n            10. NONFARM PAYROLLS (NONFARM_PAYROLL)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestSeven.data.choices[0].text;\n    } else if (extractedRequestType === 8) {\n      console.log(\"Case Eight! Running now...\");\n      let requestEight;\n      requestEight = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. SMA (SMA)\n            2. EMA (EMA)\n            3. WMA (WMA)\n            4. DEMA (DEMA)\n            5. TEMA (TEMA)\n            6. TRIMA (TRIMA)\n            7. KAMA (KAMA)\n            8. MAMA (MAMA)\n            9. T3 (T3)\n            10. MACD (MACD)\n            11. MACDEXT (MACDEXT)\n            12. STOCH (STOCH)\n            13. STOCHF (STOCHF)\n            14. RSI (RSI)\n            15. STOCHRSI (STOCHRSI)\n            16. WILLR (WILLR)\n            17. ADX (ADX)\n            18. ADXR (ADXR)\n            19. APO (APO)\n            20. PPO (PPO)\n            21. MOM (MOM)\n            22. BOP (BOP)\n            23. CCI (CCI)\n            24. CMO (CMO)\n            25. ROC (ROC)\n            26. ROCR (ROCR)\n            27. AROON (AROON)\n            28. AROONOSC (AROONOSC)\n            29. MFI (MFI)\n            30. TRIX (TRIX)\n            31. ULTOSC (ULTOSC)\n            32. DX (DX)\n            33. MINUS_DI (MINUS_DI)\n            34. PLUS_DI (PLUS_DI)\n            35. MINUS_DM (MINUS_DM)\n            36. PLUS_DM (PLUS_DM)\n            37. BBANDS (BBANDS)\n            38. MIDPOINT (MIDPOINT)\n            39. MIDPRICE (MIDPRICE)\n            40. SAR (SAR)\n            41. TRANGE (TRANGE)\n            42. ATR (ATR)\n            43. NATR (NATR)\n            44. AD (AD)\n            45. ADOSC (ADOSC)\n            46. OBV (OBV)\n            47. HT_TRENDLINE (HT_TRENDLINE)\n            48. HT_SINE (HT_SINE)\n            49. HT_TRENDMODE (HT_TRENDMODE)\n            50. HT_DCPERIOD (HT_DCPERIOD)\n            51. HT_DCPHASE (HT_DCPHASE)\n            52. HT_PHASOR (HT_PHASOR)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestEight.data.choices[0].text;\n    } else {\n      console.log(\"Invalid Request Type!\");\n    }\n  }\n  async function extractInfo(extractedRequestType, query) {\n    if (extractedRequestType === 1) {\n      // extract stockName, interval \n      try {\n        console.log(\"Extracting stockName & Interval!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: View the query, and extract the stock ticker symbol from it, and the interval period (1m, 5m, 15m, 30m, 60m)\n                Defaults if N/A: stockName: AAPL, interval: 30m\n\n                Return: The output prefaced by the label and a colon. (stockName: AAPL, interval: 30m);\n\n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 2) {\n      // extract stockName, unless winning portfolios, then no extraction.\n      try {\n        console.log(\"Extracting stockName, unless user chose winning portfolios!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: View the query, and extract the stock ticker symbol from it. If the request is mentioning winning portfolios, return the word \"winning-portfolios\"\n                Defaults if N/a: stockName: AAPL\n                Return: The output prefaced by the label and a colon. (stockName: AAPL)\n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 3) {\n      // extract stockName\n      try {\n        console.log(\"Extracting stockName!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: View the query, and extract the stock ticker symbol from it. \n                Defaults if N/a: stockName: AAPL\n                Return: The output prefaced by the label and a colon. (stockName: AAPL)\n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 4) {\n      // extract fromCurrency, extract toCurrency, if only one currency, make it a USD pair. \n      try {\n        console.log(\"Extracting fromCurrency, toCurrency!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: extract the currency pair from this request. If there is only one currency, compare it against USD.\n                Output: fromCurrency: extracted currency in request, toCurrency: extracted currency in request or USD if N/A.\n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 5) {\n      // extract fromCurrency, extract toCurrency, if only one currency, make it a USD pair. \n      try {\n        console.log(\"Extracting fromCurrency, toCurrency!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: extract the currency pair from this request. If there is only one currency, compare it against USD.\n                Output: fromCurrency: extracted currency in request, toCurrency: extracted currency in request or USD if N/A.\n                Query: ${query}\n                Context: There might be cryptocurrency pairs in this mix.\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 6) {\n      // extract interval if present\n      try {\n        console.log(\"Extracting interval if present!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: extract the time interval if present in this query. If not present, return \"monthly\"\n                Possible time intervals: daily, weekly, monthly\n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 7) {\n      // extract interval if present\n      try {\n        console.log(\"Extracting interval if present!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: extract the time interval if present in this query. If not present, return \"monthly\"\n                Possible time intervals: daily, weekly, monthly\n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 8) {\n      // extract stockName, extract interval, time_period, series_type\n      try {\n        console.log(\"Extracting stockName, interval, time_period, and series_type!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: View the query, and extract the stock ticker symbol from it. Also, extract the time interval, time_period, and series type.\n                Defaults if N/a: stockName: AAPL time_interval: daily, time_period: 200, series_type: open\n                Return: The output prefaced by the label and a colon. (stockName: AAPL, time_interval: daily, time_period: 200, series_type: open )\n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else {\n      console.log(\"Invalid Request Type\");\n    }\n  }\n  async function formApiParams(subRequestType, extractedInfo) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n        Instructions: Take in the function, and the extracted info, and format them like so:\n        \n        function=FUNCTION&extractedInfo1=EXTRACTEDINFO1&extractedInfo2=EXTRACTEDINFO2\n        \n        Example:\n        \n        function: TIME_SERIES_INTRADAY\n        interval is 5min\n        symbol = MSFT\n        \n        function=TIME_SERIES_INTRADAY&interval=5min&symbol=MSFT\n\n        Do not add any other spaces before or after the text.\n\n        function: ${subRequestType}\n        other info to extract: ${extractedInfo}\n\n        `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function callApi(apiParams) {\n    const url = `https://alpha-vantage.p.rapidapi.com/query?${apiParams}&datatype=json&output_size=compact`;\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n        'X-RapidAPI-Host': 'alpha-vantage.p.rapidapi.com'\n      }\n    };\n    fetch(url, options).then(res => res.json()).then(json => console.log(json)).catch(err => console.error('error:' + err));\n  }\n  async function summarizeApiCallData(requestType, apiCall) {}\n}\n_c = AlphaVantage;\nvar _c;\n$RefreshReg$(_c, \"AlphaVantage\");","map":{"version":3,"names":["Configuration","OpenAIApi","require","orgId","apiKey","configuration","openai","AlphaVantage","query","workflow","then","result","console","log","requestType","getRequestType","firstDigit","replace","extractedRequestType","parseInt","subRequestType","getSubRequestType","extractedInfo","extractInfo","apiParams","formApiParams","apiCallData","callApi","summarizedApiCallData","summarizeApiCallData","response","createCompletion","model","prompt","max_tokens","temperature","data","choices","text","requestOne","error","requestTwo","requestThree","requestFour","requestFive","requestSix","requestSeven","requestEight","url","options","method","headers","fetch","res","json","catch","err","apiCall"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/APIs/AlphaVantage.js"],"sourcesContent":["const { Configuration, OpenAIApi } = require('openai');\n\n// Determine request type, if request type with dates, extract dates, form apiLink constructors, apiCall, summarizeApiCallData\t\n\n\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\n\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n});\nconst openai = new OpenAIApi(configuration);\n\nexport function AlphaVantage(query){\n\n// Then I have to figure out how to return the correct function based on the subRequestType.\n// Then I have to figure out how to extract the info based on the subRequestType. For example, subRequestType 1 is TIME_SERIES_INTRADAY, so I need to extract the date, time, and interval.\n// Then I have to write out the rest of the workflow, which involves extracting info, forming api links, calling apis, summarizing api call data, and returning summarized api call data.\n\nworkflow(query).then(result => {\n    console.log(result);\n    });\n\nasync function workflow(query) {\n    console.log(\"AlphaVantage called with query:\", query);\n    console.log(\"Determining Request Type...\");\n    const requestType = await getRequestType(query);\n    console.log(\"Unprocessed Request Type:\", requestType)\n    const firstDigit = requestType.replace(/\\D/g, '')[0];\n    const extractedRequestType = parseInt(firstDigit);\n    console.log(\"Processed Request Type:\", extractedRequestType);\n    console.log(\"Extracting sub Request Type\");\n    const subRequestType = await getSubRequestType(extractedRequestType, query);\n    console.log(\"Sub Request Type:\", subRequestType);\n    console.log(\"Extracting Info!\");\n    const extractedInfo = await extractInfo(extractedRequestType, query);\n    console.log(\"Extracted Info:\", extractedInfo)\n    console.log(\"Forming API Params...\");\n    const apiParams = await formApiParams(subRequestType, extractedInfo)\n    console.log(apiParams);\n    console.log(\"Calling API...\");\n    const apiCallData = await callApi(apiParams);\n    console.log(\"API Call:\", apiCallData);\n    console.log(\"Summarizing API Call Data...\");\n    const summarizedApiCallData = await summarizeApiCallData(requestType, subRequestType, apiCallData);\n    console.log(\"Summarized API Call Data:\", summarizedApiCallData);\n    console.log(\"Returning Summarized API Call Data...\");\n    return summarizedApiCallData;\n}   \n\n   async function getRequestType(query) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            View the query, determine the request type, and output the whole line associated with the query, starting with the number.\n            (1) Core Stock APIS - Intraday, Daily, Weekly, Monthly, & Current Price.\n            (2) Alpha Intelligence - News & Sentiments, Winning Portfolios.\n            (3) Fundamental Data - Company Overview, Income Statement, Balance Sheet, Cash Flow, Earnings, Earnings Calendar, IPO Calendar\n            (4) Forex - Exchange Rates, Intraday, Daily, Weekly, Monthly\n            (5) Cryptocurrency - Intraday, Daily, Weekly, Monthly\n            (6) Commodities - Crude Oil(Brent), Natural Gas, Copper, Aluminum, Wheat, Corn, Cotton, Sugar, Coffee, Global Commodities Index\n            (7) Economic Indicators - Real GDP, Real GDP Per Capita, Treasury Yield, Federal Funds Interest Rate, CPI, Inflation, Retail Sales, Durable Goods Orders, Unemployment Rate, Nonfarm Payroll\n            (8) Technical Indicators - SMA, EMA, WMA, DEMA, TEMA, TRIMA, KAMA, MAMA, T3, MACD, MACDEXT, STOCH, STOCHF, RSI, STOCHRSI, WILLR, ADX, ADXR, APO, PPO, MOM, BOP, CCI, CMO, ROC, ROCR, AROON, AROONOSC, MFI, TRIX, ULTOSC, DX, MINUS_DI, PLUS_DI, MINUS_DM, PLUS_DM, BBANDS, MIDPOINT, MIDPRICE, SAR, TRANGE, ATR, NATR, AD, ADOSC, OBV, HT_TRENDLINE, HT_SINE, HT_TRENDMODE, HT_DCPERIOD, HT_DCPHASE, HT_PHASOR\n\n            Here is the query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n\n    async function getSubRequestType(extractedRequestType, query) {\n        if (extractedRequestType === 1) {\n            try {\n                let requestOne;\n                requestOne = await openai.createCompletion({\n                    model: \"text-davinci-003\",\n                    prompt: `\n                    Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query. \n                    Return: The item in the parenthesis that corresponds to the subRequestType.\n                    1. Intraday (TIME_SERIES_INTRADAY)\n                    2. Daily (TIME_SERIES_DAILY)\n                    3. Weekly (TIME_SERIES_WEEKLY)\n                    4. Monthly (TIME_SERIES_MONTHLY)\n                    5. Current Price (GLOBAL_QUOTE)\n            \n                    Query: ${query}\n                    `,\n                    max_tokens: 128,\n                    temperature: 0.5,\n                });\n                console.log(\"requestOne:\", requestOne);\n                return requestOne.data.choices[0].text;\n            } catch (error) {\n                console.error(\"Error in createCompletion function:\", error);\n            }     \n        } else if (extractedRequestType === 2) {\n        console.log(\"Case Two! Running now...\");\n        let requestTwo;\n        requestTwo = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. News & Sentiments (NEWS_SENTIMENT)\n            2. Winning Portfolios (TOURNAMENT_PORTFOLIO)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        console.log(requestTwo);\n        return requestTwo.data.choices[0].text;\n        } else if (extractedRequestType === 3) {\n        console.log(\"Request Type 3! Running now...\");\n        let requestThree;\n        requestThree = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Company Overview (OVERVIEW)\n            2. Income Statement (INCOME_STATEMENT)\n            3. Balance Sheet (BALANCE_SHEET)\n            4. Cash Flow (CASH_FLOW)\n            5. Earnings (EARNINGS)\n            6. IPO Calendar (IPO_CALENDAR)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestThree.data.choices[0].text;  \n        } else if (extractedRequestType === 4) {\n        console.log(\"Case Four! Running now...\");\n        let requestFour;\n        requestFour = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (FX_INTRADAY)\n            3. Daily (FX_DAILY)\n            4. Weekly (FX_WEEKLY)\n            5. Monthly (FX_MONTHLY)\n            \n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestFour.data.choices[0].text;\n        } else if (extractedRequestType === 5) {\n        console.log(\"Case Five! Running now...\");\n        let requestFive;\n        requestFive =  await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exhange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (CRYPTO_INTRADAY)\n            3. Daily (CRYPTO_DAILY)\n            4. Weekly (CRYPTO_WEEKLY)\n            5. Monthly (CRYPTO_MONTHLY)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestFive.data.choices[0].text;\n        } else if (extractedRequestType === 6) {\n        console.log(\"Case Six! Running now...\");\n        let requestSix;\n        requestSix = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Crude Oil, Brent (BRENT)\n            2. Natural Gas (NATURAL_GAS)\n            3. Copper (COPPER)\n            4. Aluminum (ALUMINUM)\n            5. Gold (GOLD)\n            6. Wheat (WHEAT)\n            7. Corn (CORN)\n            8. Cotton (COTTON)\n            9. Sugar (SUGAR)\n            10. Coffee (COFFEE)\n            11. Global Commodities Index (ALL_COMMODITIES)\n    \n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestSix.data.choices[0].text;     \n        } else if (extractedRequestType === 7) {\n        console.log(\"Case Seven! Running now...\");\n        let requestSeven;\n        requestSeven = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. REAL GDP (REAL_GDP)\n            2. REAL GDP PER CAPITA (REAL_GDP_PER_CAPITA)\n            3. TREASURY YIELD (TREASURY_YIELD)\n            4. FEDERAL FUNDS RATE (FEDERAL_FUNDS_RATE)\n            5. CPI (CPI)\n            6. Inflation (INFLATION)\n            7. Retail Sales (RETAIL_SALES)\n            8. Durable Goods Orders (DURABLES)\n            9. Unemployment Rate (UNEMPLOYMENT)\n            10. NONFARM PAYROLLS (NONFARM_PAYROLL)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestSeven.data.choices[0].text;\n        } else if (extractedRequestType === 8) {\n        console.log(\"Case Eight! Running now...\");\n        let requestEight;\n        requestEight = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. SMA (SMA)\n            2. EMA (EMA)\n            3. WMA (WMA)\n            4. DEMA (DEMA)\n            5. TEMA (TEMA)\n            6. TRIMA (TRIMA)\n            7. KAMA (KAMA)\n            8. MAMA (MAMA)\n            9. T3 (T3)\n            10. MACD (MACD)\n            11. MACDEXT (MACDEXT)\n            12. STOCH (STOCH)\n            13. STOCHF (STOCHF)\n            14. RSI (RSI)\n            15. STOCHRSI (STOCHRSI)\n            16. WILLR (WILLR)\n            17. ADX (ADX)\n            18. ADXR (ADXR)\n            19. APO (APO)\n            20. PPO (PPO)\n            21. MOM (MOM)\n            22. BOP (BOP)\n            23. CCI (CCI)\n            24. CMO (CMO)\n            25. ROC (ROC)\n            26. ROCR (ROCR)\n            27. AROON (AROON)\n            28. AROONOSC (AROONOSC)\n            29. MFI (MFI)\n            30. TRIX (TRIX)\n            31. ULTOSC (ULTOSC)\n            32. DX (DX)\n            33. MINUS_DI (MINUS_DI)\n            34. PLUS_DI (PLUS_DI)\n            35. MINUS_DM (MINUS_DM)\n            36. PLUS_DM (PLUS_DM)\n            37. BBANDS (BBANDS)\n            38. MIDPOINT (MIDPOINT)\n            39. MIDPRICE (MIDPRICE)\n            40. SAR (SAR)\n            41. TRANGE (TRANGE)\n            42. ATR (ATR)\n            43. NATR (NATR)\n            44. AD (AD)\n            45. ADOSC (ADOSC)\n            46. OBV (OBV)\n            47. HT_TRENDLINE (HT_TRENDLINE)\n            48. HT_SINE (HT_SINE)\n            49. HT_TRENDMODE (HT_TRENDMODE)\n            50. HT_DCPERIOD (HT_DCPERIOD)\n            51. HT_DCPHASE (HT_DCPHASE)\n            52. HT_PHASOR (HT_PHASOR)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestEight.data.choices[0].text;  \n        } else {\n            console.log(\"Invalid Request Type!\")\n        }\n    }\n\n    async function extractInfo(extractedRequestType, query) {\n        if (extractedRequestType === 1) { // extract stockName, interval \n            try {\n            console.log(\"Extracting stockName & Interval!\")\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: View the query, and extract the stock ticker symbol from it, and the interval period (1m, 5m, 15m, 30m, 60m)\n                Defaults if N/A: stockName: AAPL, interval: 30m\n\n                Return: The output prefaced by the label and a colon. (stockName: AAPL, interval: 30m);\n\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n            } catch (error) {\n                console.error(error);\n            }\n        } else if (extractedRequestType === 2) { // extract stockName, unless winning portfolios, then no extraction.\n            try {\n            console.log(\"Extracting stockName, unless user chose winning portfolios!\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: View the query, and extract the stock ticker symbol from it. If the request is mentioning winning portfolios, return the word \"winning-portfolios\"\n                Defaults if N/a: stockName: AAPL\n                Return: The output prefaced by the label and a colon. (stockName: AAPL)\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } catch (error) {\n            console.error(error);\n        }\n        } else if (extractedRequestType === 3) { // extract stockName\n            try {\n            console.log(\"Extracting stockName!\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: View the query, and extract the stock ticker symbol from it. \n                Defaults if N/a: stockName: AAPL\n                Return: The output prefaced by the label and a colon. (stockName: AAPL)\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } catch (error) {\n            console.error(error);\n        }\n        } else if (extractedRequestType === 4) { // extract fromCurrency, extract toCurrency, if only one currency, make it a USD pair. \n            try {\n                console.log(\"Extracting fromCurrency, toCurrency!\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: extract the currency pair from this request. If there is only one currency, compare it against USD.\n                Output: fromCurrency: extracted currency in request, toCurrency: extracted currency in request or USD if N/A.\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n            } catch (error) {\n                console.error(error);\n            }\n        } else if (extractedRequestType === 5) { // extract fromCurrency, extract toCurrency, if only one currency, make it a USD pair. \n            try {\n                console.log(\"Extracting fromCurrency, toCurrency!\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: extract the currency pair from this request. If there is only one currency, compare it against USD.\n                Output: fromCurrency: extracted currency in request, toCurrency: extracted currency in request or USD if N/A.\n                Query: ${query}\n                Context: There might be cryptocurrency pairs in this mix.\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } catch (error) {\n            console.error(error);\n        }\n        } else if (extractedRequestType === 6) {  // extract interval if present\n            try { \n                console.log(\"Extracting interval if present!\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: extract the time interval if present in this query. If not present, return \"monthly\"\n                Possible time intervals: daily, weekly, monthly\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } catch (error) {\n            console.error(error);\n        }\n        } else if (extractedRequestType === 7) { // extract interval if present\n            try {\n                console.log(\"Extracting interval if present!\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: extract the time interval if present in this query. If not present, return \"monthly\"\n                Possible time intervals: daily, weekly, monthly\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } catch (error) {\n            console.error(error);\n        }\n        } else if (extractedRequestType === 8) { // extract stockName, extract interval, time_period, series_type\n            try {\n                console.log(\"Extracting stockName, interval, time_period, and series_type!\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: View the query, and extract the stock ticker symbol from it. Also, extract the time interval, time_period, and series type.\n                Defaults if N/a: stockName: AAPL time_interval: daily, time_period: 200, series_type: open\n                Return: The output prefaced by the label and a colon. (stockName: AAPL, time_interval: daily, time_period: 200, series_type: open )\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } catch (error) {\n            console.error(error);\n        }\n        } else {\n            console.log(\"Invalid Request Type\");\n        }\n    }\n\n\nasync function formApiParams(subRequestType, extractedInfo) {\n    const response = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n        Instructions: Take in the function, and the extracted info, and format them like so:\n        \n        function=FUNCTION&extractedInfo1=EXTRACTEDINFO1&extractedInfo2=EXTRACTEDINFO2\n        \n        Example:\n        \n        function: TIME_SERIES_INTRADAY\n        interval is 5min\n        symbol = MSFT\n        \n        function=TIME_SERIES_INTRADAY&interval=5min&symbol=MSFT\n\n        Do not add any other spaces before or after the text.\n\n        function: ${subRequestType}\n        other info to extract: ${extractedInfo}\n\n        `,\n        max_tokens: 128,\n        temperature: 0.5,\n    })\n    return response.data.choices[0].text;\n}\n\nasync function callApi( apiParams ) {\nconst url = `https://alpha-vantage.p.rapidapi.com/query?${apiParams}&datatype=json&output_size=compact`;\n\nconst options = {\n  method: 'GET',\n  headers: {\n    'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n    'X-RapidAPI-Host': 'alpha-vantage.p.rapidapi.com'\n  }\n};\n\nfetch(url, options)\n\t.then(res => res.json())\n\t.then(json => console.log(json))\n\t.catch(err => console.error('error:' + err));\n}\n\n    async function summarizeApiCallData(requestType, apiCall) {\n\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}