{"ast":null,"code":"const {\n  Configuration,\n  OpenAIApi\n} = require('openai');\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport async function Template(query) {\n  async function workflow(query) {\n    console.log(\"Template called!\");\n    console.log(\"Step 1: gettingRequestType from query:\", query);\n    const requestType = await getRequestType(query); // STEP 1\n    console.log(\"Step 2: processing requestType to int:\", requestType);\n    const firstDigit = requestType.replace(/\\D/g, '')[0]; // STEP 2\n    const extractedRequestType = parseInt(firstDigit); // STEP 2.5\n    // OPTIONAL: console.log(\"AV: Step 3: gettingSubRequestType from extractedRequestType & Query:\", requestType, query);\n    // OPTIONAL: const subRequestType = await getSubRequestType(extractedRequestType, query); // STEP 3\n    console.log(\"Step 4: extractingInfo from extractedRequestType & Query:\", extractedRequestType, query);\n    const extractedInfo = await extractInfo(extractedRequestType, query); // STEP 4\n    console.log(\"Step 5: formingApiParams from extractedInfo and subRequestType:\", extractedInfo); //subRequestType); // THIS IS MOST CUSTOMIZED, IT IS BASED ON THE API DOCS. \n    const apiParams = await formApiParams(subRequestType, extractedInfo); // STEP 5\n    console.log(\"Making API Call with params:\", apiParams);\n    const apiCallData = await callApi(apiParams); // STEP 6\n    console.log(\"Step 7: summarizingApiCallData with current date, requestType, subrequestType, apiCallData, and query:\", requestType, subRequestType, apiCallData, query);\n    const summarizedApiCallData = await summarizeApiCallData(requestType, subRequestType, apiCallData, query); // STEP 7\n    console.log(\"Final Step: Return Summary\", summarizedApiCallData);\n    return summarizedApiCallData;\n  }\n  const response = await workflow(query);\n  return response;\n  // STEP 1\n  async function getRequestType(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n\n            Here is the query: ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text.replace(/\\D/g, '')[0];\n  }\n  // STEP 3: OPTIONAL \n  // async function getSubRequestType(extractedRequestType, query) {\n  if (extractedRequestType === 1) {\n    try {\n      let requestOne;\n      requestOne = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `   \n\n                    Query: ${query}\n                    `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      console.log(\"requestOne:\", requestOne);\n      return requestOne.data.choices[0].text;\n    } catch (error) {\n      console.error(\"Error in createCompletion function:\", error);\n    }\n  } else if (extractedRequestType === 2) {\n    console.log(\"Case Three! Running now...\");\n    let requestFour;\n    requestFour = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (FX_INTRADAY)\n            3. Daily (FX_DAILY)\n            4. Weekly (FX_WEEKLY)\n            5. Monthly (FX_MONTHLY)\n            \n            Query: ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return requestFour.data.choices[0].text;\n  } else if (extractedRequestType === 3) {\n    console.log(\"Case Three! Running now...\");\n    let requestFive;\n    requestFive = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exhange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (CRYPTO_INTRADAY)\n            3. Daily (CRYPTO_DAILY)\n            4. Weekly (CRYPTO_WEEKLY)\n            5. Monthly (CRYPTO_MONTHLY)\n\n            Query: ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return requestFive.data.choices[0].text;\n  } else if (extractedRequestType === 4) {\n    console.log(\"Case Four! Running now...\");\n    let requestSix;\n    requestSix = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Crude Oil, Brent (BRENT)\n            2. Natural Gas (NATURAL_GAS)\n            3. Copper (COPPER)\n            4. Aluminum (ALUMINUM)\n            5. Gold (GOLD)\n            6. Wheat (WHEAT)\n            7. Corn (CORN)\n            8. Cotton (COTTON)\n            9. Sugar (SUGAR)\n            10. Coffee (COFFEE)\n            11. Global Commodities Index (ALL_COMMODITIES)\n    \n            Query: ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return requestSix.data.choices[0].text;\n  }\n}\n\n// STEP 4\n_c = Template;\nasync function extractInfo(extractedRequestType, query) {\n  if (extractedRequestType === 1) {\n    try {\n      console.log(\"Extracting:\");\n      let response;\n      response = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n \n                Query: ${query}\n                `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return response.data.choices[0].text;\n    } catch (error) {\n      console.error(error);\n    }\n  } else if (extractedRequestType === 2) {\n    try {\n      console.log(\"\");\n      let response;\n      response = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n   \n                Query: ${query}\n                `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return response.data.choices[0].text;\n    } catch (error) {\n      console.error(error);\n    }\n  } else if (extractedRequestType === 3) {\n    try {\n      console.log(\"\");\n      let response;\n      response = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n                Query: ${query}\n                `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return response.data.choices[0].text;\n    } catch (error) {\n      console.error(error);\n    }\n  } else if (extractedRequestType === 4) {\n    console.log(\"\");\n    let response;\n    response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n                Query: ${query}\n                `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n}\n\n// STEP 5\nasync function formApiParams(subRequestType, extractedInfo) {\n  const response = await openai.createCompletion({\n    model: \"text-davinci-003\",\n    prompt: `\n            Instructions: Take in the function, and the extracted info, and format them like so:\n            \n            function=FUNCTION&extractedInfo1=EXTRACTEDINFO1&extractedInfo2=EXTRACTEDINFO2\n            \n            Example:\n            \n            function: TIME_SERIES_INTRADAY\n            interval is 5min\n            symbol = MSFT\n            \n            function=TIME_SERIES_INTRADAY&interval=5min&symbol=MSFT\n\n            print out on one line.\n\n            function: ${subRequestType}\n            other info to extract: ${extractedInfo}\n            `,\n    max_tokens: 50,\n    temperature: 0.5\n  });\n  const formattedText = response.data.choices[0].text.trim();\n  const functionIndex = formattedText.indexOf('function=');\n  return formattedText.slice(functionIndex);\n}\n\n// STEP 6\nasync function callApi(newApiParams) {\n  const url = `https://alpha-vantage.p.rapidapi.com/query?${newApiParams}&datatype=json&output_size=compact`;\n  const options = {\n    method: 'GET',\n    headers: {\n      'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n      'X-RapidAPI-Host': 'alpha-vantage.p.rapidapi.com'\n    }\n  };\n  const response = await fetch(url, options);\n  const data = await response.text();\n  console.log('Original data:', data);\n  const trimmedData = data.replace(/\\s/g, '').substring(0, 3000);\n  console.log('Trimmed data:', trimmedData);\n  return trimmedData;\n}\n\n// STEP 7\nasync function summarizeApiCallData(requestType, subRequestType, apiCallData, query) {\n  const response = await openai.createCompletion({\n    model: \"text-davinci-003\",\n    prompt: `\n            Instructions: \n\n            DataSource: ${requestType},\n            Request Type: ${subRequestType}\n            Data to be summarized: ${apiCallData}\n            Question to be asked associated with data: ${query}\n\n            `,\n    max_tokens: 450,\n    temperature: 0.5\n  });\n  return response.data.choices[0].text;\n}\nvar _c;\n$RefreshReg$(_c, \"Template\");","map":{"version":3,"names":["Configuration","OpenAIApi","require","orgId","apiKey","configuration","openai","Template","query","workflow","console","log","requestType","getRequestType","firstDigit","replace","extractedRequestType","parseInt","extractedInfo","extractInfo","apiParams","formApiParams","subRequestType","apiCallData","callApi","summarizedApiCallData","summarizeApiCallData","response","createCompletion","model","prompt","max_tokens","temperature","data","choices","text","requestOne","error","requestFour","requestFive","requestSix","formattedText","trim","functionIndex","indexOf","slice","newApiParams","url","options","method","headers","fetch","trimmedData","substring"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/APIs/WallStreetBets.js"],"sourcesContent":["const { Configuration, OpenAIApi } = require('openai');\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\n\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n});\nconst openai = new OpenAIApi(configuration);\n\nexport async function Template(query){\n\nasync function workflow(query) {\n    console.log(\"Template called!\");\n    console.log(\"Step 1: gettingRequestType from query:\", query)\n    const requestType = await getRequestType(query); // STEP 1\n    console.log(\"Step 2: processing requestType to int:\", requestType);\n    const firstDigit = requestType.replace(/\\D/g, '')[0]; // STEP 2\n    const extractedRequestType = parseInt(firstDigit); // STEP 2.5\n    // OPTIONAL: console.log(\"AV: Step 3: gettingSubRequestType from extractedRequestType & Query:\", requestType, query);\n    // OPTIONAL: const subRequestType = await getSubRequestType(extractedRequestType, query); // STEP 3\n    console.log(\"Step 4: extractingInfo from extractedRequestType & Query:\", extractedRequestType, query);\n    const extractedInfo = await extractInfo(extractedRequestType, query); // STEP 4\n    console.log(\"Step 5: formingApiParams from extractedInfo and subRequestType:\", extractedInfo); //subRequestType); // THIS IS MOST CUSTOMIZED, IT IS BASED ON THE API DOCS. \n    const apiParams = await formApiParams(subRequestType, extractedInfo) // STEP 5\n    console.log(\"Making API Call with params:\", apiParams)\n    const apiCallData = await callApi(apiParams); // STEP 6\n    console.log(\"Step 7: summarizingApiCallData with current date, requestType, subrequestType, apiCallData, and query:\", requestType, subRequestType, apiCallData, query)\n    const summarizedApiCallData = await summarizeApiCallData(requestType, subRequestType, apiCallData, query); // STEP 7\n    console.log(\"Final Step: Return Summary\", summarizedApiCallData);\n    return summarizedApiCallData;\n}   \n    const response = await workflow(query);\n    return response;\n    // STEP 1\n   async function getRequestType(query) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n\n            Here is the query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text.replace(/\\D/g, '')[0];\n    }\n    // STEP 3: OPTIONAL \n   // async function getSubRequestType(extractedRequestType, query) {\n        if (extractedRequestType === 1) {\n            try {\n                let requestOne;\n                requestOne = await openai.createCompletion({\n                    model: \"text-davinci-003\",\n                    prompt: `   \n\n                    Query: ${query}\n                    `,\n                    max_tokens: 128,\n                    temperature: 0.5,\n                });\n                console.log(\"requestOne:\", requestOne);\n                return requestOne.data.choices[0].text;\n            } catch (error) {\n                console.error(\"Error in createCompletion function:\", error);\n            }     \n        } else if (extractedRequestType === 2) {\n        console.log(\"Case Three! Running now...\");\n        let requestFour;\n        requestFour = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (FX_INTRADAY)\n            3. Daily (FX_DAILY)\n            4. Weekly (FX_WEEKLY)\n            5. Monthly (FX_MONTHLY)\n            \n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestFour.data.choices[0].text;\n        } else if (extractedRequestType === 3) {\n        console.log(\"Case Three! Running now...\");\n        let requestFive;\n        requestFive =  await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exhange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (CRYPTO_INTRADAY)\n            3. Daily (CRYPTO_DAILY)\n            4. Weekly (CRYPTO_WEEKLY)\n            5. Monthly (CRYPTO_MONTHLY)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestFive.data.choices[0].text;\n        } else if (extractedRequestType === 4) {\n        console.log(\"Case Four! Running now...\");\n        let requestSix;\n        requestSix = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Crude Oil, Brent (BRENT)\n            2. Natural Gas (NATURAL_GAS)\n            3. Copper (COPPER)\n            4. Aluminum (ALUMINUM)\n            5. Gold (GOLD)\n            6. Wheat (WHEAT)\n            7. Corn (CORN)\n            8. Cotton (COTTON)\n            9. Sugar (SUGAR)\n            10. Coffee (COFFEE)\n            11. Global Commodities Index (ALL_COMMODITIES)\n    \n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestSix.data.choices[0].text;     \n        }\n   }\n\n    // STEP 4\n    async function extractInfo(extractedRequestType, query) {\n        if (extractedRequestType === 1) { \n            try {\n            console.log(\"Extracting:\")\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n \n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n            } catch (error) {\n                console.error(error);\n            }\n        } else if (extractedRequestType === 2) { \n            try {\n                console.log(\"\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n   \n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n            } catch (error) {\n                console.error(error);\n            }\n        } else if (extractedRequestType === 3) { \n            try {\n                console.log(\"\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } catch (error) {\n            console.error(error);\n        }\n        } else if (extractedRequestType === 4) { \n                console.log(\"\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } \n        }\n    \n\n    \n    // STEP 5\n    async function formApiParams(subRequestType, extractedInfo) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: Take in the function, and the extracted info, and format them like so:\n            \n            function=FUNCTION&extractedInfo1=EXTRACTEDINFO1&extractedInfo2=EXTRACTEDINFO2\n            \n            Example:\n            \n            function: TIME_SERIES_INTRADAY\n            interval is 5min\n            symbol = MSFT\n            \n            function=TIME_SERIES_INTRADAY&interval=5min&symbol=MSFT\n\n            print out on one line.\n\n            function: ${subRequestType}\n            other info to extract: ${extractedInfo}\n            `,\n            max_tokens: 50,\n            temperature: 0.5,\n        })\n        const formattedText = response.data.choices[0].text.trim();\n        const functionIndex = formattedText.indexOf('function=');\n        return formattedText.slice(functionIndex);\n        }\n\n    // STEP 6\n    async function callApi(newApiParams) {\n        const url = `https://alpha-vantage.p.rapidapi.com/query?${newApiParams}&datatype=json&output_size=compact`;\n        const options = {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n            'X-RapidAPI-Host': 'alpha-vantage.p.rapidapi.com'\n          }\n        };\n        const response = await fetch(url, options);\n        const data = await response.text();\n        console.log('Original data:', data);\n        const trimmedData = data.replace(/\\s/g, '').substring(0, 3000);\n        console.log('Trimmed data:', trimmedData);\n        return trimmedData;\n      }\n      \n    // STEP 7\n    async function summarizeApiCallData(requestType, subRequestType, apiCallData, query) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: \n\n            DataSource: ${requestType},\n            Request Type: ${subRequestType}\n            Data to be summarized: ${apiCallData}\n            Question to be asked associated with data: ${query}\n\n            `,\n            max_tokens: 450,\n            temperature: 0.5\n            \n        })\n        return response.data.choices[0].text;\n    }\n\n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}