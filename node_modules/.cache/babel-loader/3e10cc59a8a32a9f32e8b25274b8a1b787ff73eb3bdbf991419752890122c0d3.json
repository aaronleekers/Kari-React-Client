{"ast":null,"code":"const axios = require('axios');\nconst {\n  Configuration,\n  OpenAIApi\n} = require('openai');\n\n// Determine request type, if request type with dates, extract dates, form apiLink constructors, apiCall, summarizeApiCallData\t\n\nconst orgId = process.env.ORG_ID;\nconst apiKey = process.env.API_KEY;\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport function AlphaVantage(query) {\n  async function workflow(query) {\n    console.log(\"AlphaVantage called with query:\", query);\n    console.log(\"Determining Request Type...\");\n    const requestType = await getRequestType(query);\n    console.log(\"Request Type:\", requestType);\n    const dataTypes = await getRecommendedDataSources(query);\n    console.log(\"Request Type:\", dataTypes);\n    const requestOutput = await requestFunctions[dataTypes](query);\n    return requestOutput;\n  }\n  return workflow;\n}\n_c = AlphaVantage;\nvar _c;\n$RefreshReg$(_c, \"AlphaVantage\");","map":{"version":3,"names":["axios","require","Configuration","OpenAIApi","orgId","process","env","ORG_ID","apiKey","API_KEY","configuration","openai","AlphaVantage","query","workflow","console","log","requestType","getRequestType","dataTypes","getRecommendedDataSources","requestOutput","requestFunctions"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/APIs/AlphaVantage.js"],"sourcesContent":["const axios = require('axios');\nconst { Configuration, OpenAIApi } = require('openai');\n\n// Determine request type, if request type with dates, extract dates, form apiLink constructors, apiCall, summarizeApiCallData\t\n\n  \nconst orgId = process.env.ORG_ID;\nconst apiKey = process.env.API_KEY;\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n});\n  \nconst openai = new OpenAIApi(configuration);\n\n  export function AlphaVantage(query){\n\n    async function workflow(query) {\n        console.log(\"AlphaVantage called with query:\", query);\n        console.log(\"Determining Request Type...\");\n        const requestType = await getRequestType(query);\n        console.log(\"Request Type:\",requestType);\n        const dataTypes = await getRecommendedDataSources(query);\n        console.log(\"Request Type:\",dataTypes);\n        const requestOutput = await requestFunctions[dataTypes](query);\n        return requestOutput;\n    }\n    return workflow;\n   \n\n  }"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAM;EAAEC,aAAa;EAAEC;AAAU,CAAC,GAAGF,OAAO,CAAC,QAAQ,CAAC;;AAEtD;;AAGA,MAAMG,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,MAAM;AAChC,MAAMC,MAAM,GAAGH,OAAO,CAACC,GAAG,CAACG,OAAO;AAClC,MAAMC,aAAa,GAAG,IAAIR,aAAa,CAAC;EACpCE,KAAK,EAAEA,KAAK;EACZI,MAAM,EAAEA;AACZ,CAAC,CAAC;AAEF,MAAMG,MAAM,GAAG,IAAIR,SAAS,CAACO,aAAa,CAAC;AAEzC,OAAO,SAASE,YAAY,CAACC,KAAK,EAAC;EAEjC,eAAeC,QAAQ,CAACD,KAAK,EAAE;IAC3BE,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEH,KAAK,CAAC;IACrDE,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,MAAMC,WAAW,GAAG,MAAMC,cAAc,CAACL,KAAK,CAAC;IAC/CE,OAAO,CAACC,GAAG,CAAC,eAAe,EAACC,WAAW,CAAC;IACxC,MAAME,SAAS,GAAG,MAAMC,yBAAyB,CAACP,KAAK,CAAC;IACxDE,OAAO,CAACC,GAAG,CAAC,eAAe,EAACG,SAAS,CAAC;IACtC,MAAME,aAAa,GAAG,MAAMC,gBAAgB,CAACH,SAAS,CAAC,CAACN,KAAK,CAAC;IAC9D,OAAOQ,aAAa;EACxB;EACA,OAAOP,QAAQ;AAGjB;AAAC,KAfeF,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}