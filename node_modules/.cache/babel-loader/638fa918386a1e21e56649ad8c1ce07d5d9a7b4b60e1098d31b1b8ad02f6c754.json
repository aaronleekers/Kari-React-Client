{"ast":null,"code":"import openai from \"openai-api\";\nexport function KariFinancialAnalyst(query) {\n  async function workflow(query) {\n    const dataSources = await getRecommendedDataSources(query);\n    const responses = await getResponsesFromDataSources(dataSources, query);\n    const parsedResponses = await parseResponses(responses);\n    const combinedResponses = await combineResponses(parsedResponses);\n    return combinedResponses;\n  }\n  return workflow;\n\n  // This is basically going to determine what sources should be queried to get an ideal response\n  // It will send the query to each of the dataSources and get a response.\n\n  async function getRecommendedDataSources(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n        You are an artifical financial advisor. Your job is to view the user's request and determine which data sources are most relevant to the request.\n        Potential Options:\n        // AlphaVantage - Stock Data, Alpha Intelligence, Fundamentals, Forex, Commodities, Economic Indicators, Technical Indicators\n        // WallStreetBets - Stocks & Sentiment by Reddit posts on popular finance subreddits\n        // Stock Sentiment API - Sentiment Analyis & News Articles by ticker\n        // G-Finance - General market screening, get info by category (winners, losers, active, etc.)\n        // Crowdsense - Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes\n        // SEC Filings - SEC filings for a company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings        \n        `,\n      max_tokens: 3000,\n      temperature: .5,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n  async function getResponsesFromDataSources(dataSources, query) {}\n  async function parseResponses(responses) {}\n  async function combineResponses(parsedResponses) {}\n\n  // returns a number 1-6 based on the assigned requestType.\n  async function qualifyRequestType(queryString) {}\n\n  // maps possible requestTypes to an array of associated functions for callback. functions are below.\n  const requestFunctions = {\n    1: eodRequest,\n    // COMPLETE\n    2: realTimeRequest,\n    // COMPLETE \n    3: fundamentalsStockRequest,\n    // NOT COMPLETE // TO BE CHECKED OFF AFTER 6\n    4: fundamentalsCryptoRequest,\n    // COMPLETE \n    5: bulkRequest,\n    // COMPELTE\n    6: macroRequest // COMPLETE \n  };\n\n  // overall workflow. Decides which sub-workflow to execute, executes it, then returns the response.\n  async function api_search(queryString) {\n    console.log(\"api_search called with queryString:\", queryString);\n    const requestType = await qualifyRequestType(queryString);\n    const intRequest = parseInt(requestType);\n    console.log(\"Request Type:\", intRequest);\n    const requestOutput = await requestFunctions[intRequest](queryString);\n    return requestOutput;\n  }\n\n  // To DO List: \n\n  // All Data Sources Here\n  // AlphaVantage - Stock Data, Alpha Intelligence, Fundamentals, Forex, Commodities, Economic Indicators, Technical Indicators\n  // WallStreetBets - Stocks & Sentiment by Reddit posts on popular finance subreddits\n  // Stock Sentiment API - Sentiment Analyis & News Articles by ticker\n  // G-Finance - General market screening, get info by category (winners, losers, active, etc.)\n  // Crowdsense - Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes\n  // SEC Filings - SEC filings for a company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings-\n\n  // overall workflow\n  // List all of the dataSources that need to be queried in order to get a good response\n\n  // Send the query to each of the dataSources\n  // Get the response from each of the dataSources\n  // Parse the response from each of the dataSources\n  // Combine the response from each of the dataSources\n  // Return the summarized response.\n}\n_c = KariFinancialAnalyst;\nvar _c;\n$RefreshReg$(_c, \"KariFinancialAnalyst\");","map":{"version":3,"names":["openai","KariFinancialAnalyst","query","workflow","dataSources","getRecommendedDataSources","responses","getResponsesFromDataSources","parsedResponses","parseResponses","combinedResponses","combineResponses","response","createCompletion","model","prompt","max_tokens","temperature","stop","data","choices","text","qualifyRequestType","queryString","requestFunctions","eodRequest","realTimeRequest","fundamentalsStockRequest","fundamentalsCryptoRequest","bulkRequest","macroRequest","api_search","console","log","requestType","intRequest","parseInt","requestOutput"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/KariFinancialAnalyst.js"],"sourcesContent":["import openai from \"openai-api\";\n\n\nexport function KariFinancialAnalyst(query) {\n\n    async function workflow(query){\n    const dataSources = await getRecommendedDataSources(query);\n    const responses = await getResponsesFromDataSources(dataSources, query);\n    const parsedResponses = await parseResponses(responses);\n    const combinedResponses = await combineResponses(parsedResponses);\n    return combinedResponses;\n    }\n    return workflow;\n\n    // This is basically going to determine what sources should be queried to get an ideal response\n    // It will send the query to each of the dataSources and get a response.\n    \n    async function getRecommendedDataSources(query) {\n    const response = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n        You are an artifical financial advisor. Your job is to view the user's request and determine which data sources are most relevant to the request.\n        Potential Options:\n        // AlphaVantage - Stock Data, Alpha Intelligence, Fundamentals, Forex, Commodities, Economic Indicators, Technical Indicators\n        // WallStreetBets - Stocks & Sentiment by Reddit posts on popular finance subreddits\n        // Stock Sentiment API - Sentiment Analyis & News Articles by ticker\n        // G-Finance - General market screening, get info by category (winners, losers, active, etc.)\n        // Crowdsense - Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes\n        // SEC Filings - SEC filings for a company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings        \n        `,\n        max_tokens: 3000,\n        temperature: .5,\n        stop: \"/n\",\n    });\n    return response.data.choices[0].text;\n    }\n    async function getResponsesFromDataSources(dataSources, query) {\n\n    }\n\n    async function parseResponses(responses) {\n\n    }\n\n    async function combineResponses(parsedResponses) {\n\n    }\n\n\n    // returns a number 1-6 based on the assigned requestType.\nasync function qualifyRequestType(queryString) {\n  \n  }\n  \n  \n  // maps possible requestTypes to an array of associated functions for callback. functions are below.\n  const requestFunctions = {\n   1: eodRequest, // COMPLETE\n   2: realTimeRequest, // COMPLETE \n   3: fundamentalsStockRequest, // NOT COMPLETE // TO BE CHECKED OFF AFTER 6\n   4: fundamentalsCryptoRequest, // COMPLETE \n   5: bulkRequest, // COMPELTE\n   6: macroRequest, // COMPLETE \n  }\n  \n  // overall workflow. Decides which sub-workflow to execute, executes it, then returns the response.\n  async function api_search(queryString) {\n    console.log(\"api_search called with queryString:\", queryString);\n    const requestType = await qualifyRequestType(queryString);\n    const intRequest = parseInt(requestType);\n    console.log(\"Request Type:\",intRequest);\n    const requestOutput = await requestFunctions[intRequest](queryString);\n    return requestOutput;\n  }\n  \n  \n\n// To DO List: \n\n\n// All Data Sources Here\n// AlphaVantage - Stock Data, Alpha Intelligence, Fundamentals, Forex, Commodities, Economic Indicators, Technical Indicators\n// WallStreetBets - Stocks & Sentiment by Reddit posts on popular finance subreddits\n// Stock Sentiment API - Sentiment Analyis & News Articles by ticker\n// G-Finance - General market screening, get info by category (winners, losers, active, etc.)\n// Crowdsense - Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes\n// SEC Filings - SEC filings for a company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings-\n\n// overall workflow\n// List all of the dataSources that need to be queried in order to get a good response\n\n// Send the query to each of the dataSources\n// Get the response from each of the dataSources\n// Parse the response from each of the dataSources\n// Combine the response from each of the dataSources\n// Return the summarized response.\n}"],"mappings":"AAAA,OAAOA,MAAM,MAAM,YAAY;AAG/B,OAAO,SAASC,oBAAoB,CAACC,KAAK,EAAE;EAExC,eAAeC,QAAQ,CAACD,KAAK,EAAC;IAC9B,MAAME,WAAW,GAAG,MAAMC,yBAAyB,CAACH,KAAK,CAAC;IAC1D,MAAMI,SAAS,GAAG,MAAMC,2BAA2B,CAACH,WAAW,EAAEF,KAAK,CAAC;IACvE,MAAMM,eAAe,GAAG,MAAMC,cAAc,CAACH,SAAS,CAAC;IACvD,MAAMI,iBAAiB,GAAG,MAAMC,gBAAgB,CAACH,eAAe,CAAC;IACjE,OAAOE,iBAAiB;EACxB;EACA,OAAOP,QAAQ;;EAEf;EACA;;EAEA,eAAeE,yBAAyB,CAACH,KAAK,EAAE;IAChD,MAAMU,QAAQ,GAAG,MAAMZ,MAAM,CAACa,gBAAgB,CAAC;MAC3CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;MACDC,UAAU,EAAE,IAAI;MAChBC,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;IACV,CAAC,CAAC;IACF,OAAON,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;EACpC;EACA,eAAed,2BAA2B,CAACH,WAAW,EAAEF,KAAK,EAAE,CAE/D;EAEA,eAAeO,cAAc,CAACH,SAAS,EAAE,CAEzC;EAEA,eAAeK,gBAAgB,CAACH,eAAe,EAAE,CAEjD;;EAGA;EACJ,eAAec,kBAAkB,CAACC,WAAW,EAAE,CAE7C;;EAGA;EACA,MAAMC,gBAAgB,GAAG;IACxB,CAAC,EAAEC,UAAU;IAAE;IACf,CAAC,EAAEC,eAAe;IAAE;IACpB,CAAC,EAAEC,wBAAwB;IAAE;IAC7B,CAAC,EAAEC,yBAAyB;IAAE;IAC9B,CAAC,EAAEC,WAAW;IAAE;IAChB,CAAC,EAAEC,YAAY,CAAE;EAClB,CAAC;;EAED;EACA,eAAeC,UAAU,CAACR,WAAW,EAAE;IACrCS,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEV,WAAW,CAAC;IAC/D,MAAMW,WAAW,GAAG,MAAMZ,kBAAkB,CAACC,WAAW,CAAC;IACzD,MAAMY,UAAU,GAAGC,QAAQ,CAACF,WAAW,CAAC;IACxCF,OAAO,CAACC,GAAG,CAAC,eAAe,EAACE,UAAU,CAAC;IACvC,MAAME,aAAa,GAAG,MAAMb,gBAAgB,CAACW,UAAU,CAAC,CAACZ,WAAW,CAAC;IACrE,OAAOc,aAAa;EACtB;;EAIF;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;AACA;AAAC,KA7FepC,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}