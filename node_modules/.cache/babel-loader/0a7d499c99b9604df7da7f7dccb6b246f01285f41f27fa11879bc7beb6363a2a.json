{"ast":null,"code":"const axios = require('axios');\nconst {\n  Configuration,\n  OpenAIApi\n} = require('openai');\nconst orgId = process.env.ORG_ID;\nconst apiKey = process.env.API_KEY;\n\n// This should be able to answer questions like:\n// Compare the stocks TSLA, AAPL, MCD, SPY, and MSFT.\n// Compare Ford, General Motors, and Tesla's price performance on January 25, 2023.\n// Compare The S&P 500 ETF, Coca Cola, and McDonald's price performance on January 6, 2021.\n\n// openAI auth\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\n\n// bulkStocks - Potential Arguments Include: stockName(s), date\nasync function AlphaVantage(queryString) {\n  // Overall Workflow\n  var extractedStocks = await extractStocks(queryString);\n  var extractedDate = await extractDate(queryString);\n  console.log(extractedDate, extractedStocks);\n  var apiLink = await createApiLink(extractedStocks, extractedDate);\n  console.log(apiLink);\n  var apiCallData = await apiCall(apiLink);\n  var summarizedData = await summarizeData(apiCallData);\n  return summarizedData;\n  async function extractStocks(queryString) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Instructions: extract the company names or stock symbols from the queryString, \n            modify them to be stock symbols instead of company names. \n            Finally, output in the following format: (symbols=S1,S2,S3)\n\n            Ideal inputs and outputs:\n            (I: \"Compare AAPL, TSLA, and Microsoft's price performance on January 25, 2023.\", O: \"symbols=AAPL,TSLA,MSFT)\n            (I: \"Compare Ford, General Motors, and Rivian's price performance on January 25, 2023.\", O: \"symbols=F,GM,RIVN)\n            (I: \"Compare Nike, McDonalds, The S&P500 ETF, and Coke's price performance on January 25, 2023.\", O: \"symbols=NKE,MCD,SPY,COKE)\n\n            queryString: ${queryString}\n            `,\n      max_tokens: 1024,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n  async function extractDate(queryString) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Instructions: extract the date from the queryString. If there is no date present, return \"N/A\". Format the date into YYYY-MM-DD.\n            Finally, output in the following format: \"yyyy-mm-dd\"\n\n            Ideal inputs and outputs:\n            (I: \"Compare AAPL, TSLA, and Microsoft's price performance on January 25, 2023.\", O: \"2023-01-25\")\n            (I: \"Compare Raytheon, SPY, and Chase's price performance on January 6, 2021.\", O: \"2021-01-06\")\n            (I: \"Compare AAPL, TSLA, and Microsoft's price performance on March 13, 2020.\", O: \"2020-03-13\")\n\n            queryString: ${queryString}\n            `,\n      max_tokens: 1024,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n\n  // createApiLink function\n  async function createApiLink(extractedDate, extractedStocks) {\n    const apiLink = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Please help me create a link to access financial data for a specific stock by replacing the stock name, and other variables in the following format:\n            apiLink: https://www.eodhistoricaldata.com/api/eod-bulk-last-day/US?api_token=63a2477acc2587.58203009&fmt=json&filter=extended&symbols=(extractedStocks)\n            - The (extractedStocks) area should be replaced with the contents within extractedStocks below.\n            - If the extractedDate is not \"N/A\" add &date=(extractedDate) to the end of the link. Only add date to link if there is date present, otherwise add nothing.\n            - Respond in the format of: \"apiLink: (apilink)\"\n            \n            extractedStocks: ${extractedStocks}.\n            extractedDate: ${extractedDate}.\n                       `,\n      max_tokens: 1024,\n      temperature: .3,\n      stop: \"/n\"\n    });\n    return apiLink.data.choices[0].text;\n  }\n\n  // apiCall function\n  async function apiCall(apiLink) {\n    const cleanedLink = await cleanLink(apiLink);\n    const response = await axios.get(cleanedLink);\n    return response.data;\n    async function cleanLink(apiLink) {\n      var cleanedLink = apiLink.replace(/.*(https:\\/\\/)/, \"https://\");\n      return cleanedLink;\n    }\n  }\n\n  // summarizeData function\n  async function summarizeData(apiCallData) {\n    const apiCallDataString = JSON.stringify(apiCallData);\n    const date = new Date();\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n        Instructions: Take in the Data, and summarize it according to the specifications below:\n\n        Specifications: \n        Numbers: Currency to be prefaced like \"$x,xxx.xx\" other numbers to be prefaced like \"x,xxx.xx\"\n        Content: Bullet point summary of highlights, followed by paragraph summary of highlights.\n        Format: \"Here it is: The current date is: ${year}-${month}-${day}. Bullet Point Summary: bulletpointsummary Paragraph Summary: paragraphsummary.\"\n        Style: Friendly, informative, and indicative of trends.\n        Tip: If there is no data in the string, don't just make up data, return the fact that the data is empty.\n\n        Data: ${apiCallDataString}\n        `,\n      max_tokens: 1500,\n      temperature: .5,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n}\n_c = AlphaVantage;\nmodule.exports = {\n  AlphaVantage\n};\nvar _c;\n$RefreshReg$(_c, \"AlphaVantage\");","map":{"version":3,"names":["axios","require","Configuration","OpenAIApi","orgId","process","env","ORG_ID","apiKey","API_KEY","configuration","openai","AlphaVantage","queryString","extractedStocks","extractStocks","extractedDate","extractDate","console","log","apiLink","createApiLink","apiCallData","apiCall","summarizedData","summarizeData","response","createCompletion","model","prompt","max_tokens","stop","data","choices","text","temperature","cleanedLink","cleanLink","get","replace","apiCallDataString","JSON","stringify","date","Date","day","getDate","month","getMonth","year","getFullYear","module","exports"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/APIs/AlphaVantage.js"],"sourcesContent":["const axios = require('axios');\nconst { Configuration, OpenAIApi } = require('openai');\n\n  \nconst orgId = process.env.ORG_ID;\nconst apiKey = process.env.API_KEY;\n\n// This should be able to answer questions like:\n// Compare the stocks TSLA, AAPL, MCD, SPY, and MSFT.\n// Compare Ford, General Motors, and Tesla's price performance on January 25, 2023.\n// Compare The S&P 500 ETF, Coca Cola, and McDonald's price performance on January 6, 2021.\n\n// openAI auth\n  const configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n});\n  const openai = new OpenAIApi(configuration);\n\n  // bulkStocks - Potential Arguments Include: stockName(s), date\n  async function AlphaVantage(queryString){\n    // Overall Workflow\n    var extractedStocks = await extractStocks(queryString)\n    var extractedDate = await extractDate(queryString);\n    console.log(extractedDate, extractedStocks);\n    var apiLink = await createApiLink(extractedStocks, extractedDate);\n    console.log(apiLink);\n    var apiCallData = await apiCall(apiLink);\n    var summarizedData = await summarizeData(apiCallData);\n    return summarizedData;\n\n    \n    async function extractStocks(queryString){\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: \n            `\n            Instructions: extract the company names or stock symbols from the queryString, \n            modify them to be stock symbols instead of company names. \n            Finally, output in the following format: (symbols=S1,S2,S3)\n\n            Ideal inputs and outputs:\n            (I: \"Compare AAPL, TSLA, and Microsoft's price performance on January 25, 2023.\", O: \"symbols=AAPL,TSLA,MSFT)\n            (I: \"Compare Ford, General Motors, and Rivian's price performance on January 25, 2023.\", O: \"symbols=F,GM,RIVN)\n            (I: \"Compare Nike, McDonalds, The S&P500 ETF, and Coke's price performance on January 25, 2023.\", O: \"symbols=NKE,MCD,SPY,COKE)\n\n            queryString: ${queryString}\n            `,\n            max_tokens: 1024,\n            stop: \"/n\"\n        })\n        return response.data.choices[0].text;\n    }\n    async function extractDate(queryString){\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: \n            `\n            Instructions: extract the date from the queryString. If there is no date present, return \"N/A\". Format the date into YYYY-MM-DD.\n            Finally, output in the following format: \"yyyy-mm-dd\"\n\n            Ideal inputs and outputs:\n            (I: \"Compare AAPL, TSLA, and Microsoft's price performance on January 25, 2023.\", O: \"2023-01-25\")\n            (I: \"Compare Raytheon, SPY, and Chase's price performance on January 6, 2021.\", O: \"2021-01-06\")\n            (I: \"Compare AAPL, TSLA, and Microsoft's price performance on March 13, 2020.\", O: \"2020-03-13\")\n\n            queryString: ${queryString}\n            `,\n            max_tokens: 1024,\n            stop: \"/n\"\n        })\n        return response.data.choices[0].text;\n    }\n\n    // createApiLink function\n    async function createApiLink(extractedDate, extractedStocks) {\n        const apiLink = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Please help me create a link to access financial data for a specific stock by replacing the stock name, and other variables in the following format:\n            apiLink: https://www.eodhistoricaldata.com/api/eod-bulk-last-day/US?api_token=63a2477acc2587.58203009&fmt=json&filter=extended&symbols=(extractedStocks)\n            - The (extractedStocks) area should be replaced with the contents within extractedStocks below.\n            - If the extractedDate is not \"N/A\" add &date=(extractedDate) to the end of the link. Only add date to link if there is date present, otherwise add nothing.\n            - Respond in the format of: \"apiLink: (apilink)\"\n            \n            extractedStocks: ${extractedStocks}.\n            extractedDate: ${extractedDate}.\n                       `,\n            max_tokens: 1024,\n            temperature: .3,\n            stop: \"/n\",\n        });\n        return apiLink.data.choices[0].text;\n        }\n\n   // apiCall function\n   async function apiCall(apiLink) {\n    const cleanedLink = await cleanLink(apiLink);\n    const response = await axios.get(cleanedLink);\n    return response.data;\n  \n    async function cleanLink(apiLink){\n        var cleanedLink = apiLink.replace(/.*(https:\\/\\/)/, \"https://\");\n        return cleanedLink;\n      }    \n  }\n\n  // summarizeData function\n  async function summarizeData(apiCallData) {\n    const apiCallDataString = JSON.stringify(apiCallData)\n    const date = new Date();\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n    const response = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n        Instructions: Take in the Data, and summarize it according to the specifications below:\n\n        Specifications: \n        Numbers: Currency to be prefaced like \"$x,xxx.xx\" other numbers to be prefaced like \"x,xxx.xx\"\n        Content: Bullet point summary of highlights, followed by paragraph summary of highlights.\n        Format: \"Here it is: The current date is: ${year}-${month}-${day}. Bullet Point Summary: bulletpointsummary Paragraph Summary: paragraphsummary.\"\n        Style: Friendly, informative, and indicative of trends.\n        Tip: If there is no data in the string, don't just make up data, return the fact that the data is empty.\n\n        Data: ${apiCallDataString}\n        `,\n        max_tokens: 1500,\n        temperature: .5,\n        stop: \"/n\",\n    })\n    return response.data.choices[0].text\n    } \n  }\n\n  module.exports = { AlphaVantage }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}