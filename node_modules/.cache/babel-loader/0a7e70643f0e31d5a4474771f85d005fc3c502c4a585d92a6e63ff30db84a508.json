{"ast":null,"code":"const {\n  Configuration,\n  OpenAIApi\n} = require('openai');\n\n// Determine request type, if request type with dates, extract dates, form apiLink constructors, apiCall, summarizeApiCallData\t\n\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport function AlphaVantage(query) {\n  workflow(query).then(result => {\n    console.log(result);\n  });\n  async function workflow(query) {\n    console.log(\"AlphaVantage called with query:\", query);\n    console.log(\"Determining Request Type...\");\n    const requestType = await getRequestType(query);\n    console.log(\"Unprocessed Request Type:\", requestType);\n    const firstDigit = requestType.replace(/\\D/g, '')[0];\n    const extractedRequestType = parseInt(firstDigit);\n    console.log(\"Processed Request Type:\", extractedRequestType);\n    console.log(\"Extracting sub Request Type\");\n    const subRequestType = await getSubRequestType(extractedRequestType, query);\n    console.log(\"Sub Request Type:\", subRequestType);\n    console.log(\"Extracting Info based on Request Type...\");\n    const extractedInfo = await extractInfo(requestType, query);\n    console.log(\"Extracting Sub Request Type Info...\");\n    const extractedSubInfo = await extractSubInfo(subRequestType, query);\n    console.log(\"Forming API Links...\");\n    const apiLinkConstructors = await formApiLinkConstructors(requestType, subRequestType, extractedInfo, extractedSubInfo);\n    const apiLink = await formApiLink(apiLinkConstructors, requestType, subRequestType, extractedInfo, extractedSubInfo);\n    console.log(\"API Link:\", apiLink);\n    console.log(\"Calling API...\");\n    const apiCallData = await callApi(apiLink);\n    console.log(\"API Call:\", apiCallData);\n    console.log(\"Summarizing API Call Data...\");\n    const summarizedApiCallData = await summarizeApiCallData(requestType, subRequestType, apiCallData);\n    console.log(\"Summarized API Call Data:\", summarizedApiCallData);\n    console.log(\"Returning Summarized API Call Data...\");\n    return summarizedApiCallData;\n  }\n  async function getRequestType(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            View the query, determine the request type, and output the whole line associated with the query, starting with the number.\n            (1) Core Stock APIS - Intraday, Daily, Weekly, Monthly, & Current Price.\n            (2) Alpha Intelligence - News & Sentiments, Winning Portfolios.\n            (3) Fundamental Data - Company Overview, Income Statement, Balance Sheet, Cash Flow, Earnings, Earnings Calendar, IPO Calendar\n            (4) Forex - Exchange Rates, Intraday, Daily, Weekly, Monthly\n            (5) Cryptocurrency - Intraday, Daily, Weekly, Monthly\n            (6) Commodities - Crude Oil(Brent), Natural Gas, Copper, Aluminum, Wheat, Corn, Cotton, Sugar, Coffee, Global Commodities Index\n            (7) Economic Indicators - Real GDP, Real GDP Per Capita, Treasury Yield, Federal Funds Interest Rate, CPI, Inflation, Retail Sales, Durable Goods Orders, Unemployment Rate, Nonfarm Payroll\n            (8) Technical Indicators - SMA, EMA, WMA, DEMA, TEMA, TRIMA, KAMA, MAMA, T3, MACD, MACDEXT, STOCH, STOCHF, RSI, STOCHRSI, WILLR, ADX, ADXR, APO, PPO, MOM, BOP, CCI, CMO, ROC, ROCR, AROON, AROONOSC, MFI, TRIX, ULTOSC, DX, MINUS_DI, PLUS_DI, MINUS_DM, PLUS_DM, BBANDS, MIDPOINT, MIDPRICE, SAR, TRANGE, ATR, NATR, AD, ADOSC, OBV, HT_TRENDLINE, HT_SINE, HT_TRENDMODE, HT_DCPERIOD, HT_DCPHASE, HT_PHASOR\n\n            Here is the query: ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n\n  // Then I have to figure out how to return the correct function based on the subRequestType.\n  // Then I have to figure out how to extract the info based on the subRequestType. For example, subRequestType 1 is TIME_SERIES_INTRADAY, so I need to extract the date, time, and interval.\n  // Then I have to write out the rest of the workflow, which involves extracting info, forming api links, calling apis, summarizing api call data, and returning summarized api call data.\n\n  async function getSubRequestTypo(requestType, query) {\n    switch (requestType) {\n      case 1:\n        return await functionOne();\n        async function functionOne(query) {\n          console.log(\"Case One! Running now...\");\n          const requestOne = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query. \n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. Intraday (TIME_SERIES_INTRADAY)\n                        2. Daily (TIME_SERIES_DAILY)\n                        3. Weekly (TIME_SERIES_WEEKLY)\n                        4. Monthly (TIME_SERIES_MONTHLY)\n                        5. Current Price (GLOBAL_QUOTE)\n\n                        Query: ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          console.log(\"requestOne:\", requestOne);\n          return requestOne.data.choices[0].text;\n        }\n        ;\n      case 2:\n        return await functionTwo();\n        async function functionTwo(query) {\n          console.log(\"Case Two! Running now...\");\n          const requestTwo = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. News & Sentiments (NEWS_SENTIMENT)\n                        2. Winning Portfolios (TOURNAMENT_PORTFOLIO)\n\n                        Query: ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return requestTwo.data.choices[0].text;\n        }\n        ;\n      case 3:\n        return await functionThree();\n        async function functionThree() {\n          console.log(\"Case Three! Running now...\");\n          const requestThree = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. Company Overview (OVERVIEW)\n                        2. Income Statement (INCOME_STATEMENT)\n                        3. Balance Sheet (BALANCE_SHEET)\n                        4. Cash Flow (CASH_FLOW)\n                        5. Earnings (EARNINGS)\n                        6. IPO Calendar (IPO_CALENDAR)\n\n                       Query: ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return requestThree.data.choices[0].text;\n        }\n        ;\n      case 4:\n        return await functionFour();\n        async function functionFour() {\n          console.log(\"Case Four! Running now...\");\n          const requestFour = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n                        2. Intraday (FX_INTRADAY)\n                        3. Daily (FX_DAILY)\n                        4. Weekly (FX_WEEKLY)\n                        5. Monthly (FX_MONTHLY)\n                        \n                        Query: ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return requestFour.data.choices[0].text;\n        }\n        ;\n      case 5:\n        return await functionFive();\n        async function functionFive() {\n          console.log(\"Case Five! Running now...\");\n          const requestFive = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. Exhange Rates (CURRENCY_EXCHANGE_RATE)\n                        2. Intraday (CRYPTO_INTRADAY)\n                        3. Daily (CRYPTO_DAILY)\n                        4. Weekly (CRYPTO_WEEKLY)\n                        5. Monthly (CRYPTO_MONTHLY)\n\n                        Query: ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return requestFive.data.choices[0].text;\n        }\n        ;\n      case 6:\n        return await functionSix();\n        async function functionSix() {\n          console.log(\"Case Six! Running now...\");\n          const requestSix = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. Crude Oil, Brent (BRENT)\n                        2. Natural Gas (NATURAL_GAS)\n                        3. Copper (COPPER)\n                        4. Aluminum (ALUMINUM)\n                        5. Gold (GOLD)\n                        6. Wheat (WHEAT)\n                        7. Corn (CORN)\n                        8. Cotton (COTTON)\n                        9. Sugar (SUGAR)\n                        10. Coffee (COFFEE)\n                        11. Global Commodities Index (ALL_COMMODITIES)\n                \n                        Query: ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return requestSix.data.choices[0].text;\n        }\n        ;\n      case 7:\n        return await functionSeven();\n        async function functionSeven() {\n          console.log(\"Case Seven! Running now...\");\n          const requestSeven = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. REAL GDP (REAL_GDP)\n                        2. REAL GDP PER CAPITA (REAL_GDP_PER_CAPITA)\n                        3. TREASURY YIELD (TREASURY_YIELD)\n                        4. FEDERAL FUNDS RATE (FEDERAL_FUNDS_RATE)\n                        5. CPI (CPI)\n                        6. Inflation (INFLATION)\n                        7. Retail Sales (RETAIL_SALES)\n                        8. Durable Goods Orders (DURABLES)\n                        9. Unemployment Rate (UNEMPLOYMENT)\n                        10. NONFARM PAYROLLS (NONFARM_PAYROLL)\n\n                        Query: ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return requestSeven.data.choices[0].text;\n        }\n        ;\n      case 8:\n        return await functionEight();\n        async function functionEight() {\n          console.log(\"Case Eight! Running now...\");\n          const requestEight = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. SMA (SMA)\n                        2. EMA (EMA)\n                        3. WMA (WMA)\n                        4. DEMA (DEMA)\n                        5. TEMA (TEMA)\n                        6. TRIMA (TRIMA)\n                        7. KAMA (KAMA)\n                        8. MAMA (MAMA)\n                        9. T3 (T3)\n                        10. MACD (MACD)\n                        11. MACDEXT (MACDEXT)\n                        12. STOCH (STOCH)\n                        13. STOCHF (STOCHF)\n                        14. RSI (RSI)\n                        15. STOCHRSI (STOCHRSI)\n                        16. WILLR (WILLR)\n                        17. ADX (ADX)\n                        18. ADXR (ADXR)\n                        19. APO (APO)\n                        20. PPO (PPO)\n                        21. MOM (MOM)\n                        22. BOP (BOP)\n                        23. CCI (CCI)\n                        24. CMO (CMO)\n                        25. ROC (ROC)\n                        26. ROCR (ROCR)\n                        27. AROON (AROON)\n                        28. AROONOSC (AROONOSC)\n                        29. MFI (MFI)\n                        30. TRIX (TRIX)\n                        31. ULTOSC (ULTOSC)\n                        32. DX (DX)\n                        33. MINUS_DI (MINUS_DI)\n                        34. PLUS_DI (PLUS_DI)\n                        35. MINUS_DM (MINUS_DM)\n                        36. PLUS_DM (PLUS_DM)\n                        37. BBANDS (BBANDS)\n                        38. MIDPOINT (MIDPOINT)\n                        39. MIDPRICE (MIDPRICE)\n                        40. SAR (SAR)\n                        41. TRANGE (TRANGE)\n                        42. ATR (ATR)\n                        43. NATR (NATR)\n                        44. AD (AD)\n                        45. ADOSC (ADOSC)\n                        46. OBV (OBV)\n                        47. HT_TRENDLINE (HT_TRENDLINE)\n                        48. HT_SINE (HT_SINE)\n                        49. HT_TRENDMODE (HT_TRENDMODE)\n                        50. HT_DCPERIOD (HT_DCPERIOD)\n                        51. HT_DCPHASE (HT_DCPHASE)\n                        52. HT_PHASOR (HT_PHASOR)\n\n                        Query: ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return requestEight.data.choices[0].text;\n        }\n        ;\n      default:\n        return 'Invalid request type';\n    }\n  }\n  async function getSubRequestType(requestType, query) {\n    if (requestType === 1) {\n      console.log(\"Case One! Running now...\");\n      const requestOne = await openai.createCompletion({\n        engine: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query. \n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Intraday (TIME_SERIES_INTRADAY)\n            2. Daily (TIME_SERIES_DAILY)\n            3. Weekly (TIME_SERIES_WEEKLY)\n            4. Monthly (TIME_SERIES_MONTHLY)\n            5. Current Price (GLOBAL_QUOTE)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      console.log(\"requestOne:\", requestOne);\n      return requestOne.data.choices[0].text;\n    } else if (requestType === 2) {\n      console.log(\"Case Two! Running now...\");\n      const requestTwo = await openai.createCompletion({\n        engine: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. News & Sentiments (NEWS_SENTIMENT)\n            2. Winning Portfolios (TOURNAMENT_PORTFOLIO)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      console.log(requestTwo);\n      return requestTwo.data.choices[0].text;\n    } else if (requestType === 3) {\n      const requestThree = await openai.createCompletion({\n        engine: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Company Overview (OVERVIEW)\n            2. Income Statement (INCOME_STATEMENT)\n            3. Balance Sheet (BALANCE_SHEET)\n            4. Cash Flow (CASH_FLOW)\n            5. Earnings (EARNINGS)\n            6. IPO Calendar (IPO_CALENDAR)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestThree.data.choices[0].text;\n    } else if (requestType === 4) {\n      console.log(\"Case Four! Running now...\");\n      const requestFour = await openai.createCompletion({\n        engine: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (FX_INTRADAY)\n            3. Daily (FX_DAILY)\n            4. Weekly (FX_WEEKLY)\n            5. Monthly (FX_MONTHLY)\n            \n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestFour.data.choices[0].text;\n    } else if (requestType === 5) {\n      console.log(\"Case Four! Running now...\");\n      const requestFour = await openai.createCompletion({\n        engine: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (FX_INTRADAY)\n            3. Daily (FX_DAILY)\n            4. Weekly (FX_WEEKLY)\n            5. Monthly (FX_MONTHLY)\n            \n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestFour.data.choices[0].text;\n    } else if (requestType === 6) {\n      console.log(\"Case Six! Running now...\");\n      const requestSix = await openai.createCompletion({\n        engine: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Crude Oil, Brent (BRENT)\n            2. Natural Gas (NATURAL_GAS)\n            3. Copper (COPPER)\n            4. Aluminum (ALUMINUM)\n            5. Gold (GOLD)\n            6. Wheat (WHEAT)\n            7. Corn (CORN)\n            8. Cotton (COTTON)\n            9. Sugar (SUGAR)\n            10. Coffee (COFFEE)\n            11. Global Commodities Index (ALL_COMMODITIES)\n    \n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestSix.data.choices[0].text;\n    } else if (requestType === 7) {\n      console.log(\"Case Seven! Running now...\");\n      const requestSeven = await openai.createCompletion({\n        engine: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. REAL GDP (REAL_GDP)\n            2. REAL GDP PER CAPITA (REAL_GDP_PER_CAPITA)\n            3. TREASURY YIELD (TREASURY_YIELD)\n            4. FEDERAL FUNDS RATE (FEDERAL_FUNDS_RATE)\n            5. CPI (CPI)\n            6. Inflation (INFLATION)\n            7. Retail Sales (RETAIL_SALES)\n            8. Durable Goods Orders (DURABLES)\n            9. Unemployment Rate (UNEMPLOYMENT)\n            10. NONFARM PAYROLLS (NONFARM_PAYROLL)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestSeven.data.choices[0].text;\n    } else if (requestType === 8) {\n      console.log(\"Case Eight! Running now...\");\n      requestEight = await openai.createCompletion({\n        engine: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. SMA (SMA)\n            2. EMA (EMA)\n            3. WMA (WMA)\n            4. DEMA (DEMA)\n            5. TEMA (TEMA)\n            6. TRIMA (TRIMA)\n            7. KAMA (KAMA)\n            8. MAMA (MAMA)\n            9. T3 (T3)\n            10. MACD (MACD)\n            11. MACDEXT (MACDEXT)\n            12. STOCH (STOCH)\n            13. STOCHF (STOCHF)\n            14. RSI (RSI)\n            15. STOCHRSI (STOCHRSI)\n            16. WILLR (WILLR)\n            17. ADX (ADX)\n            18. ADXR (ADXR)\n            19. APO (APO)\n            20. PPO (PPO)\n            21. MOM (MOM)\n            22. BOP (BOP)\n            23. CCI (CCI)\n            24. CMO (CMO)\n            25. ROC (ROC)\n            26. ROCR (ROCR)\n            27. AROON (AROON)\n            28. AROONOSC (AROONOSC)\n            29. MFI (MFI)\n            30. TRIX (TRIX)\n            31. ULTOSC (ULTOSC)\n            32. DX (DX)\n            33. MINUS_DI (MINUS_DI)\n            34. PLUS_DI (PLUS_DI)\n            35. MINUS_DM (MINUS_DM)\n            36. PLUS_DM (PLUS_DM)\n            37. BBANDS (BBANDS)\n            38. MIDPOINT (MIDPOINT)\n            39. MIDPRICE (MIDPRICE)\n            40. SAR (SAR)\n            41. TRANGE (TRANGE)\n            42. ATR (ATR)\n            43. NATR (NATR)\n            44. AD (AD)\n            45. ADOSC (ADOSC)\n            46. OBV (OBV)\n            47. HT_TRENDLINE (HT_TRENDLINE)\n            48. HT_SINE (HT_SINE)\n            49. HT_TRENDMODE (HT_TRENDMODE)\n            50. HT_DCPERIOD (HT_DCPERIOD)\n            51. HT_DCPHASE (HT_DCPHASE)\n            52. HT_PHASOR (HT_PHASOR)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestEight.data.choices[0].text;\n    } else {\n      console.log(\"Invalid Request Type!\");\n    }\n  }\n  async function extractInfo(requestType, query) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function extractSubInfo(subRequestType, query) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function formApiLinkConstructors(requestType, subRequestType, extractedInfo, extractedSubInfo) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n        \n        `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function formApiLink(requestType, extractedInfo) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function callApi(apiLink) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function summarizeApiCallData(requestType, apiCall) {}\n}\n_c = AlphaVantage;\nvar _c;\n$RefreshReg$(_c, \"AlphaVantage\");","map":{"version":3,"names":["Configuration","OpenAIApi","require","orgId","process","env","ORG_ID","apiKey","configuration","openai","AlphaVantage","query","workflow","then","result","console","log","requestType","getRequestType","firstDigit","replace","extractedRequestType","parseInt","subRequestType","getSubRequestType","extractedInfo","extractInfo","extractedSubInfo","extractSubInfo","apiLinkConstructors","formApiLinkConstructors","apiLink","formApiLink","apiCallData","callApi","summarizedApiCallData","summarizeApiCallData","response","createCompletion","model","prompt","max_tokens","temperature","data","choices","text","getSubRequestTypo","functionOne","requestOne","engine","functionTwo","requestTwo","functionThree","requestThree","functionFour","requestFour","functionFive","requestFive","functionSix","requestSix","functionSeven","requestSeven","functionEight","requestEight","apiCall"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/APIs/AlphaVantage.js"],"sourcesContent":["const { Configuration, OpenAIApi } = require('openai');\n\n// Determine request type, if request type with dates, extract dates, form apiLink constructors, apiCall, summarizeApiCallData\t\n\n\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\n\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n});\nconst openai = new OpenAIApi(configuration);\n\nexport function AlphaVantage(query){\n\nworkflow(query).then(result => {\n    console.log(result);\n    });\n\nasync function workflow(query) {\n    console.log(\"AlphaVantage called with query:\", query);\n    console.log(\"Determining Request Type...\");\n    const requestType = await getRequestType(query);\n    console.log(\"Unprocessed Request Type:\", requestType)\n    const firstDigit = requestType.replace(/\\D/g, '')[0];\n    const extractedRequestType = parseInt(firstDigit);\n    console.log(\"Processed Request Type:\", extractedRequestType);\n    console.log(\"Extracting sub Request Type\");\n    const subRequestType = await getSubRequestType(extractedRequestType, query);\n    console.log(\"Sub Request Type:\", subRequestType);\n    console.log(\"Extracting Info based on Request Type...\");\n    const extractedInfo = await extractInfo(requestType, query);\n    console.log(\"Extracting Sub Request Type Info...\");\n    const extractedSubInfo = await extractSubInfo( subRequestType, query);\n    console.log(\"Forming API Links...\");\n    const apiLinkConstructors = await formApiLinkConstructors(requestType, subRequestType, extractedInfo, extractedSubInfo);\n    const apiLink = await formApiLink(apiLinkConstructors, requestType, subRequestType, extractedInfo, extractedSubInfo);\n    console.log(\"API Link:\", apiLink);\n    console.log(\"Calling API...\");\n    const apiCallData = await callApi(apiLink);\n    console.log(\"API Call:\", apiCallData);\n    console.log(\"Summarizing API Call Data...\");\n    const summarizedApiCallData = await summarizeApiCallData(requestType, subRequestType, apiCallData);\n    console.log(\"Summarized API Call Data:\", summarizedApiCallData);\n    console.log(\"Returning Summarized API Call Data...\");\n    return summarizedApiCallData;\n}   \n\n   async function getRequestType(query) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            View the query, determine the request type, and output the whole line associated with the query, starting with the number.\n            (1) Core Stock APIS - Intraday, Daily, Weekly, Monthly, & Current Price.\n            (2) Alpha Intelligence - News & Sentiments, Winning Portfolios.\n            (3) Fundamental Data - Company Overview, Income Statement, Balance Sheet, Cash Flow, Earnings, Earnings Calendar, IPO Calendar\n            (4) Forex - Exchange Rates, Intraday, Daily, Weekly, Monthly\n            (5) Cryptocurrency - Intraday, Daily, Weekly, Monthly\n            (6) Commodities - Crude Oil(Brent), Natural Gas, Copper, Aluminum, Wheat, Corn, Cotton, Sugar, Coffee, Global Commodities Index\n            (7) Economic Indicators - Real GDP, Real GDP Per Capita, Treasury Yield, Federal Funds Interest Rate, CPI, Inflation, Retail Sales, Durable Goods Orders, Unemployment Rate, Nonfarm Payroll\n            (8) Technical Indicators - SMA, EMA, WMA, DEMA, TEMA, TRIMA, KAMA, MAMA, T3, MACD, MACDEXT, STOCH, STOCHF, RSI, STOCHRSI, WILLR, ADX, ADXR, APO, PPO, MOM, BOP, CCI, CMO, ROC, ROCR, AROON, AROONOSC, MFI, TRIX, ULTOSC, DX, MINUS_DI, PLUS_DI, MINUS_DM, PLUS_DM, BBANDS, MIDPOINT, MIDPRICE, SAR, TRANGE, ATR, NATR, AD, ADOSC, OBV, HT_TRENDLINE, HT_SINE, HT_TRENDMODE, HT_DCPERIOD, HT_DCPHASE, HT_PHASOR\n\n            Here is the query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n\n    // Then I have to figure out how to return the correct function based on the subRequestType.\n    // Then I have to figure out how to extract the info based on the subRequestType. For example, subRequestType 1 is TIME_SERIES_INTRADAY, so I need to extract the date, time, and interval.\n    // Then I have to write out the rest of the workflow, which involves extracting info, forming api links, calling apis, summarizing api call data, and returning summarized api call data.\n    \n    async function getSubRequestTypo(requestType, query) {\n        switch (requestType) {\n            case 1:\n                return await functionOne(); \n                async function functionOne(query){\n                    console.log(\"Case One! Running now...\");\n                    const requestOne = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query. \n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. Intraday (TIME_SERIES_INTRADAY)\n                        2. Daily (TIME_SERIES_DAILY)\n                        3. Weekly (TIME_SERIES_WEEKLY)\n                        4. Monthly (TIME_SERIES_MONTHLY)\n                        5. Current Price (GLOBAL_QUOTE)\n\n                        Query: ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n                    });\n                    console.log(\"requestOne:\", requestOne);\n                    return requestOne.data.choices[0].text;\n                };\n            case 2:\n                return await functionTwo();\n                async function functionTwo(query) {\n                    console.log(\"Case Two! Running now...\");\n                    const requestTwo = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. News & Sentiments (NEWS_SENTIMENT)\n                        2. Winning Portfolios (TOURNAMENT_PORTFOLIO)\n\n                        Query: ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n\n                    })\n                    return requestTwo.data.choices[0].text;\n                };\n            case 3:\n                return await functionThree();\n                async function functionThree() {\n                console.log(\"Case Three! Running now...\");\n                    const requestThree = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. Company Overview (OVERVIEW)\n                        2. Income Statement (INCOME_STATEMENT)\n                        3. Balance Sheet (BALANCE_SHEET)\n                        4. Cash Flow (CASH_FLOW)\n                        5. Earnings (EARNINGS)\n                        6. IPO Calendar (IPO_CALENDAR)\n\n                       Query: ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n                    })\n                    return requestThree.data.choices[0].text;\n                };\n            case 4:\n                return await functionFour();\n                async function functionFour() {   \n                console.log(\"Case Four! Running now...\");\n                    const requestFour = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n                        2. Intraday (FX_INTRADAY)\n                        3. Daily (FX_DAILY)\n                        4. Weekly (FX_WEEKLY)\n                        5. Monthly (FX_MONTHLY)\n                        \n                        Query: ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n                    })\n                    return requestFour.data.choices[0].text;\n                };\n            case 5:\n                return await functionFive();\n                async function functionFive() {\n                console.log(\"Case Five! Running now...\");\n                    const requestFive =  await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. Exhange Rates (CURRENCY_EXCHANGE_RATE)\n                        2. Intraday (CRYPTO_INTRADAY)\n                        3. Daily (CRYPTO_DAILY)\n                        4. Weekly (CRYPTO_WEEKLY)\n                        5. Monthly (CRYPTO_MONTHLY)\n\n                        Query: ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n                    })\n                    return requestFive.data.choices[0].text;\n                };\n            case 6:\n                return await functionSix();\n                async function functionSix() {\n                console.log(\"Case Six! Running now...\");\n                    const requestSix = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. Crude Oil, Brent (BRENT)\n                        2. Natural Gas (NATURAL_GAS)\n                        3. Copper (COPPER)\n                        4. Aluminum (ALUMINUM)\n                        5. Gold (GOLD)\n                        6. Wheat (WHEAT)\n                        7. Corn (CORN)\n                        8. Cotton (COTTON)\n                        9. Sugar (SUGAR)\n                        10. Coffee (COFFEE)\n                        11. Global Commodities Index (ALL_COMMODITIES)\n                \n                        Query: ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n                    })\n                    return requestSix.data.choices[0].text;\n                };\n            case 7:\n                return await functionSeven();\n                async function functionSeven() {\n                console.log(\"Case Seven! Running now...\");\n                    const requestSeven = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. REAL GDP (REAL_GDP)\n                        2. REAL GDP PER CAPITA (REAL_GDP_PER_CAPITA)\n                        3. TREASURY YIELD (TREASURY_YIELD)\n                        4. FEDERAL FUNDS RATE (FEDERAL_FUNDS_RATE)\n                        5. CPI (CPI)\n                        6. Inflation (INFLATION)\n                        7. Retail Sales (RETAIL_SALES)\n                        8. Durable Goods Orders (DURABLES)\n                        9. Unemployment Rate (UNEMPLOYMENT)\n                        10. NONFARM PAYROLLS (NONFARM_PAYROLL)\n\n                        Query: ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n                    })\n                    return requestSeven.data.choices[0].text;\n                };\n            case 8:\n                return await functionEight();\n                async function functionEight() {\n                console.log(\"Case Eight! Running now...\");\n                    const requestEight = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n                        Return: The item in the parenthesis that corresponds to the subRequestType.\n                        1. SMA (SMA)\n                        2. EMA (EMA)\n                        3. WMA (WMA)\n                        4. DEMA (DEMA)\n                        5. TEMA (TEMA)\n                        6. TRIMA (TRIMA)\n                        7. KAMA (KAMA)\n                        8. MAMA (MAMA)\n                        9. T3 (T3)\n                        10. MACD (MACD)\n                        11. MACDEXT (MACDEXT)\n                        12. STOCH (STOCH)\n                        13. STOCHF (STOCHF)\n                        14. RSI (RSI)\n                        15. STOCHRSI (STOCHRSI)\n                        16. WILLR (WILLR)\n                        17. ADX (ADX)\n                        18. ADXR (ADXR)\n                        19. APO (APO)\n                        20. PPO (PPO)\n                        21. MOM (MOM)\n                        22. BOP (BOP)\n                        23. CCI (CCI)\n                        24. CMO (CMO)\n                        25. ROC (ROC)\n                        26. ROCR (ROCR)\n                        27. AROON (AROON)\n                        28. AROONOSC (AROONOSC)\n                        29. MFI (MFI)\n                        30. TRIX (TRIX)\n                        31. ULTOSC (ULTOSC)\n                        32. DX (DX)\n                        33. MINUS_DI (MINUS_DI)\n                        34. PLUS_DI (PLUS_DI)\n                        35. MINUS_DM (MINUS_DM)\n                        36. PLUS_DM (PLUS_DM)\n                        37. BBANDS (BBANDS)\n                        38. MIDPOINT (MIDPOINT)\n                        39. MIDPRICE (MIDPRICE)\n                        40. SAR (SAR)\n                        41. TRANGE (TRANGE)\n                        42. ATR (ATR)\n                        43. NATR (NATR)\n                        44. AD (AD)\n                        45. ADOSC (ADOSC)\n                        46. OBV (OBV)\n                        47. HT_TRENDLINE (HT_TRENDLINE)\n                        48. HT_SINE (HT_SINE)\n                        49. HT_TRENDMODE (HT_TRENDMODE)\n                        50. HT_DCPERIOD (HT_DCPERIOD)\n                        51. HT_DCPHASE (HT_DCPHASE)\n                        52. HT_PHASOR (HT_PHASOR)\n\n                        Query: ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n                    })\n                    return requestEight.data.choices[0].text;\n                };\n            default:\n                return 'Invalid request type';\n        }\n    }\n    \n    async function getSubRequestType(requestType, query) {\n        if (requestType === 1) {\n        console.log(\"Case One! Running now...\");\n        const requestOne = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query. \n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Intraday (TIME_SERIES_INTRADAY)\n            2. Daily (TIME_SERIES_DAILY)\n            3. Weekly (TIME_SERIES_WEEKLY)\n            4. Monthly (TIME_SERIES_MONTHLY)\n            5. Current Price (GLOBAL_QUOTE)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        });\n        console.log(\"requestOne:\", requestOne);\n        return requestOne.data.choices[0].text;\n        } else if (requestType === 2) {\n        console.log(\"Case Two! Running now...\");\n        const requestTwo = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. News & Sentiments (NEWS_SENTIMENT)\n            2. Winning Portfolios (TOURNAMENT_PORTFOLIO)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        console.log(requestTwo);\n        return requestTwo.data.choices[0].text;\n        } else if (requestType === 3) {\n        const requestThree = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Company Overview (OVERVIEW)\n            2. Income Statement (INCOME_STATEMENT)\n            3. Balance Sheet (BALANCE_SHEET)\n            4. Cash Flow (CASH_FLOW)\n            5. Earnings (EARNINGS)\n            6. IPO Calendar (IPO_CALENDAR)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestThree.data.choices[0].text;  \n        } else if (requestType === 4) {\n        console.log(\"Case Four! Running now...\");\n        const requestFour = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (FX_INTRADAY)\n            3. Daily (FX_DAILY)\n            4. Weekly (FX_WEEKLY)\n            5. Monthly (FX_MONTHLY)\n            \n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestFour.data.choices[0].text;\n        } else if (requestType === 5) {\n        console.log(\"Case Four! Running now...\");\n        const requestFour = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (FX_INTRADAY)\n            3. Daily (FX_DAILY)\n            4. Weekly (FX_WEEKLY)\n            5. Monthly (FX_MONTHLY)\n            \n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestFour.data.choices[0].text;\n        } else if (requestType === 6) {\n        console.log(\"Case Six! Running now...\");\n        const requestSix = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Crude Oil, Brent (BRENT)\n            2. Natural Gas (NATURAL_GAS)\n            3. Copper (COPPER)\n            4. Aluminum (ALUMINUM)\n            5. Gold (GOLD)\n            6. Wheat (WHEAT)\n            7. Corn (CORN)\n            8. Cotton (COTTON)\n            9. Sugar (SUGAR)\n            10. Coffee (COFFEE)\n            11. Global Commodities Index (ALL_COMMODITIES)\n    \n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestSix.data.choices[0].text;     \n        } else if (requestType === 7) {\n        console.log(\"Case Seven! Running now...\");\n        const requestSeven = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. REAL GDP (REAL_GDP)\n            2. REAL GDP PER CAPITA (REAL_GDP_PER_CAPITA)\n            3. TREASURY YIELD (TREASURY_YIELD)\n            4. FEDERAL FUNDS RATE (FEDERAL_FUNDS_RATE)\n            5. CPI (CPI)\n            6. Inflation (INFLATION)\n            7. Retail Sales (RETAIL_SALES)\n            8. Durable Goods Orders (DURABLES)\n            9. Unemployment Rate (UNEMPLOYMENT)\n            10. NONFARM PAYROLLS (NONFARM_PAYROLL)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestSeven.data.choices[0].text;\n        } else if (requestType === 8) {\n        console.log(\"Case Eight! Running now...\");\n        requestEight = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. SMA (SMA)\n            2. EMA (EMA)\n            3. WMA (WMA)\n            4. DEMA (DEMA)\n            5. TEMA (TEMA)\n            6. TRIMA (TRIMA)\n            7. KAMA (KAMA)\n            8. MAMA (MAMA)\n            9. T3 (T3)\n            10. MACD (MACD)\n            11. MACDEXT (MACDEXT)\n            12. STOCH (STOCH)\n            13. STOCHF (STOCHF)\n            14. RSI (RSI)\n            15. STOCHRSI (STOCHRSI)\n            16. WILLR (WILLR)\n            17. ADX (ADX)\n            18. ADXR (ADXR)\n            19. APO (APO)\n            20. PPO (PPO)\n            21. MOM (MOM)\n            22. BOP (BOP)\n            23. CCI (CCI)\n            24. CMO (CMO)\n            25. ROC (ROC)\n            26. ROCR (ROCR)\n            27. AROON (AROON)\n            28. AROONOSC (AROONOSC)\n            29. MFI (MFI)\n            30. TRIX (TRIX)\n            31. ULTOSC (ULTOSC)\n            32. DX (DX)\n            33. MINUS_DI (MINUS_DI)\n            34. PLUS_DI (PLUS_DI)\n            35. MINUS_DM (MINUS_DM)\n            36. PLUS_DM (PLUS_DM)\n            37. BBANDS (BBANDS)\n            38. MIDPOINT (MIDPOINT)\n            39. MIDPRICE (MIDPRICE)\n            40. SAR (SAR)\n            41. TRANGE (TRANGE)\n            42. ATR (ATR)\n            43. NATR (NATR)\n            44. AD (AD)\n            45. ADOSC (ADOSC)\n            46. OBV (OBV)\n            47. HT_TRENDLINE (HT_TRENDLINE)\n            48. HT_SINE (HT_SINE)\n            49. HT_TRENDMODE (HT_TRENDMODE)\n            50. HT_DCPERIOD (HT_DCPERIOD)\n            51. HT_DCPHASE (HT_DCPHASE)\n            52. HT_PHASOR (HT_PHASOR)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestEight.data.choices[0].text;  \n        } else {\n            console.log(\"Invalid Request Type!\")\n        }\n    }\n\n\n    async function extractInfo(requestType, query) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n\n    async function extractSubInfo(subRequestType, query) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n\n   async function formApiLinkConstructors(requestType, subRequestType, extractedInfo, extractedSubInfo) {\n    const response =  await openai.createCompletion({\n        engine: \"text-davinci-003\",\n        prompt:`\n        \n        `,\n        max_tokens:128,\n        temperature: 0.5\n    })\n    return response.data.choices[0].text;\n   }\n\n    async function formApiLink(requestType, extractedInfo) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;       \n    }\n\n    async function callApi(apiLink) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n    async function summarizeApiCallData(requestType, apiCall) {\n\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}