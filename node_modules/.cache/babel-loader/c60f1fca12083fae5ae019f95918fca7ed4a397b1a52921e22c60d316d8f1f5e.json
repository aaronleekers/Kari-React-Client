{"ast":null,"code":"import { Configuration, OpenAIApi } from 'openai';\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport function KariFinancialAnalyst(query) {\n  const dataSources = {\n    1: AlphaVantage,\n    2: WallStreetBets,\n    3: StockSentimentAPI,\n    4: GFinance,\n    5: Crowdsense,\n    6: SECFilings\n  };\n  async function workflow(query) {\n    const dataSources = await getRecommendedDataSources(query);\n    const intRequest = parseInt(requestType);\n    const responses = await dataSources[intRequest](query);\n    const parsedResponses = await parseResponses(responses);\n    const combinedResponses = await combineResponses(parsedResponses);\n    return combinedResponses;\n  }\n  return workflow;\n\n  // This is basically going to determine what sources should be queried to get an ideal response\n  // It will send the query to each of the dataSources and get a response.\n\n  async function getRecommendedDataSources(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n        You are an artifical financial advisor. Your job is to view the user's request and determine which data sources are most relevant to the request.\n        Potential Options:\n        1. AlphaVantage - Stock Data, Alpha Intelligence, Fundamentals, Forex, Commodities, Economic Indicators, Technical Indicators\n        2. WallStreetBets - Stocks & Sentiment by Reddit posts on popular finance subreddits\n        3. StockSentimentAPI - Sentiment Analyis & News Articles by ticker\n        4. GFinance - General market screening, get info by category (winners, losers, active, etc.)\n        5. Crowdsense - Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes\n        6. SECFilings - SEC filings for a company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings   \n        Return: the numbers of the data sources you want to query, separated by commas. For example, if you want to query data sources 1, 2, and 3, you would return \"1,2,3\"\n        Message: ${query}     \n        `,\n      max_tokens: 3000,\n      temperature: .5,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n  async function parseResponses(responses) {}\n  async function combineResponses(parsedResponses) {}\n\n  // returns a number 1-6 based on the assigned requestType.\n  async function qualifyRequestType(queryString) {}\n\n  // overall workflow. Decides which sub-workflow to execute, executes it, then returns the response.\n  async function getResponsesFromDataSources(query) {\n    console.log(\"getResponsesFromDataSources called with query:\", query);\n    const requestType = await qualifyRequestType(queryString);\n    const intRequest = parseInt(requestType);\n    console.log(\"Request Type:\", intRequest);\n    const requestOutput = await requestFunctions[intRequest](queryString);\n    return requestOutput;\n  }\n\n  // To DO List: \n\n  // All Data Sources Here\n  // AlphaVantage - Stock Data, Alpha Intelligence, Fundamentals, Forex, Commodities, Economic Indicators, Technical Indicators\n  // WallStreetBets - Stocks & Sentiment by Reddit posts on popular finance subreddits\n  // Stock Sentiment API - Sentiment Analyis & News Articles by ticker\n  // G-Finance - General market screening, get info by category (winners, losers, active, etc.)\n  // Crowdsense - Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes\n  // SEC Filings - SEC filings for a company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings-\n\n  // overall workflow\n  // List all of the dataSources that need to be queried in order to get a good response\n\n  // Send the query to each of the dataSources\n  // Get the response from each of the dataSources\n  // Parse the response from each of the dataSources\n  // Combine the response from each of the dataSources\n  // Return the summarized response.\n}\n_c = KariFinancialAnalyst;\nvar _c;\n$RefreshReg$(_c, \"KariFinancialAnalyst\");","map":{"version":3,"names":["Configuration","OpenAIApi","orgId","process","env","ORG_ID","apiKey","configuration","openai","KariFinancialAnalyst","query","dataSources","AlphaVantage","WallStreetBets","StockSentimentAPI","GFinance","Crowdsense","SECFilings","workflow","getRecommendedDataSources","intRequest","parseInt","requestType","responses","parsedResponses","parseResponses","combinedResponses","combineResponses","response","createCompletion","model","prompt","max_tokens","temperature","stop","data","choices","text","qualifyRequestType","queryString","getResponsesFromDataSources","console","log","requestOutput","requestFunctions"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/KariFinancialAnalyst.js"],"sourcesContent":["import { Configuration, OpenAIApi } from 'openai';\n\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\n\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n  });\n  const openai = new OpenAIApi(configuration);\n\nexport function KariFinancialAnalyst(query) {\n\n    const dataSources = {\n        1: AlphaVantage,\n        2: WallStreetBets,\n        3: StockSentimentAPI,\n        4: GFinance,\n        5: Crowdsense,\n        6: SECFilings,\n    }\n\n    async function workflow(query){\n    const dataSources = await getRecommendedDataSources(query);\n    const intRequest = parseInt(requestType);\n    const responses = await dataSources[intRequest](query);\n    const parsedResponses = await parseResponses(responses);\n    const combinedResponses = await combineResponses(parsedResponses);\n    return combinedResponses;\n    }\n    return workflow;\n\n    // This is basically going to determine what sources should be queried to get an ideal response\n    // It will send the query to each of the dataSources and get a response.\n    \n    async function getRecommendedDataSources(query) {\n    const response = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n        You are an artifical financial advisor. Your job is to view the user's request and determine which data sources are most relevant to the request.\n        Potential Options:\n        1. AlphaVantage - Stock Data, Alpha Intelligence, Fundamentals, Forex, Commodities, Economic Indicators, Technical Indicators\n        2. WallStreetBets - Stocks & Sentiment by Reddit posts on popular finance subreddits\n        3. StockSentimentAPI - Sentiment Analyis & News Articles by ticker\n        4. GFinance - General market screening, get info by category (winners, losers, active, etc.)\n        5. Crowdsense - Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes\n        6. SECFilings - SEC filings for a company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings   \n        Return: the numbers of the data sources you want to query, separated by commas. For example, if you want to query data sources 1, 2, and 3, you would return \"1,2,3\"\n        Message: ${query}     \n        `,\n        max_tokens: 3000,\n        temperature: .5,\n        stop: \"/n\",\n    });\n    return response.data.choices[0].text;\n    }\n\n    \n\n\n    async function parseResponses(responses) {\n\n    }\n\n    async function combineResponses(parsedResponses) {\n\n    }\n\n\n    // returns a number 1-6 based on the assigned requestType.\nasync function qualifyRequestType(queryString) {\n  \n  }\n  \n  // overall workflow. Decides which sub-workflow to execute, executes it, then returns the response.\n  async function getResponsesFromDataSources(query) {\n    console.log(\"getResponsesFromDataSources called with query:\", query);\n    const requestType = await qualifyRequestType(queryString);\n    const intRequest = parseInt(requestType);\n    console.log(\"Request Type:\",intRequest);\n    const requestOutput = await requestFunctions[intRequest](queryString);\n    return requestOutput;\n  }\n  \n  \n\n// To DO List: \n\n\n// All Data Sources Here\n// AlphaVantage - Stock Data, Alpha Intelligence, Fundamentals, Forex, Commodities, Economic Indicators, Technical Indicators\n// WallStreetBets - Stocks & Sentiment by Reddit posts on popular finance subreddits\n// Stock Sentiment API - Sentiment Analyis & News Articles by ticker\n// G-Finance - General market screening, get info by category (winners, losers, active, etc.)\n// Crowdsense - Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes\n// SEC Filings - SEC filings for a company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings-\n\n// overall workflow\n// List all of the dataSources that need to be queried in order to get a good response\n\n// Send the query to each of the dataSources\n// Get the response from each of the dataSources\n// Parse the response from each of the dataSources\n// Combine the response from each of the dataSources\n// Return the summarized response.\n}"],"mappings":"AAAA,SAASA,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AAEjD,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,MAAM;AAChC,MAAMC,MAAM,GAAG,qDAAqD;AAEpE,MAAMC,aAAa,GAAG,IAAIP,aAAa,CAAC;EACpCE,KAAK,EAAEA,KAAK;EACZI,MAAM,EAAEA;AACV,CAAC,CAAC;AACF,MAAME,MAAM,GAAG,IAAIP,SAAS,CAACM,aAAa,CAAC;AAE7C,OAAO,SAASE,oBAAoB,CAACC,KAAK,EAAE;EAExC,MAAMC,WAAW,GAAG;IAChB,CAAC,EAAEC,YAAY;IACf,CAAC,EAAEC,cAAc;IACjB,CAAC,EAAEC,iBAAiB;IACpB,CAAC,EAAEC,QAAQ;IACX,CAAC,EAAEC,UAAU;IACb,CAAC,EAAEC;EACP,CAAC;EAED,eAAeC,QAAQ,CAACR,KAAK,EAAC;IAC9B,MAAMC,WAAW,GAAG,MAAMQ,yBAAyB,CAACT,KAAK,CAAC;IAC1D,MAAMU,UAAU,GAAGC,QAAQ,CAACC,WAAW,CAAC;IACxC,MAAMC,SAAS,GAAG,MAAMZ,WAAW,CAACS,UAAU,CAAC,CAACV,KAAK,CAAC;IACtD,MAAMc,eAAe,GAAG,MAAMC,cAAc,CAACF,SAAS,CAAC;IACvD,MAAMG,iBAAiB,GAAG,MAAMC,gBAAgB,CAACH,eAAe,CAAC;IACjE,OAAOE,iBAAiB;EACxB;EACA,OAAOR,QAAQ;;EAEf;EACA;;EAEA,eAAeC,yBAAyB,CAACT,KAAK,EAAE;IAChD,MAAMkB,QAAQ,GAAG,MAAMpB,MAAM,CAACqB,gBAAgB,CAAC;MAC3CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmBrB,KAAM;AACzB,SAAS;MACDsB,UAAU,EAAE,IAAI;MAChBC,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;IACV,CAAC,CAAC;IACF,OAAON,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;EACpC;EAKA,eAAeZ,cAAc,CAACF,SAAS,EAAE,CAEzC;EAEA,eAAeI,gBAAgB,CAACH,eAAe,EAAE,CAEjD;;EAGA;EACJ,eAAec,kBAAkB,CAACC,WAAW,EAAE,CAE7C;;EAEA;EACA,eAAeC,2BAA2B,CAAC9B,KAAK,EAAE;IAChD+B,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAEhC,KAAK,CAAC;IACpE,MAAMY,WAAW,GAAG,MAAMgB,kBAAkB,CAACC,WAAW,CAAC;IACzD,MAAMnB,UAAU,GAAGC,QAAQ,CAACC,WAAW,CAAC;IACxCmB,OAAO,CAACC,GAAG,CAAC,eAAe,EAACtB,UAAU,CAAC;IACvC,MAAMuB,aAAa,GAAG,MAAMC,gBAAgB,CAACxB,UAAU,CAAC,CAACmB,WAAW,CAAC;IACrE,OAAOI,aAAa;EACtB;;EAIF;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;AACA;AAAC,KA9FelC,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}