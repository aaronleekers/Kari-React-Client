{"ast":null,"code":"var _jsxFileName = \"/Users/aaronleek/Desktop/coding-projects/misc-projects/quick-hack-nw/Jonald - Hack/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport './normal.css';\nimport { useState } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nimport { inject } from '@vercel/analytics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ninject();\n\n// the handleSubmit front-end needs to be modified to call handleRequest if radio button is toggled yes. \n\n// envs\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\nfunction App() {\n  _s();\n  // statehooks\n  const [query, setQuery] = useState(\"\");\n  const [chatLog, setChatLog] = useState([]);\n  const [showOverlay, setShowOverlay] = useState(true);\n\n  //open ai auth\n  const configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey\n  });\n  const openai = new OpenAIApi(configuration);\n  const [details, setDetails] = useState(\"\");\n  const [style, setStyle] = useState(\"\");\n  const [brands, setBrands] = useState(\"\");\n\n  // First completion, sets the context as Kari.ai personality.\n  async function getInitialCompletion(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      Purpose: Take in the user's information and give a response. You generate a tweet calendar for the user.\n      Name: Jonald\n\n      Information passed in\n      Product Details: ${details}\n      Style: ${style}\n      Brands to Mimick: ${brands}\n      `,\n      max_tokens: 2048,\n      temperature: .6,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n  // Second completion, mainly just responds to messages in a conversational manner.\n  async function getContextCompletion(query, messages) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      Don't mention outright: Conversational Style, Context, Instructions.\n      Instructions: view the chatLog for context and respond to the latest message.\n      Context: You are an artificial financial advisor named Kari. \n\n      latestMessage: ${query}\n      chatLog: ${messages}\n      `,\n      max_tokens: 512,\n      temperature: .5,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n\n  // clearChat button function\n  function clearChat() {\n    setChatLog([]);\n    setShowOverlay(true);\n    setBrands(\"\");\n    setStyle(\"\");\n    setDetails(\"\");\n  }\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (query.trim() && query.length > 4) {\n      let chatLogNew = [...chatLog, {\n        user: \"me\",\n        message: `${query}`\n      }];\n      setQuery(\"\");\n      setChatLog(chatLogNew);\n      setShowOverlay(false);\n      const messages = chatLogNew.map(message => message.message).join(\"\");\n      console.log(\"Getting context completion\");\n      const data = await getContextCompletion(query, messages);\n      setChatLog([...chatLogNew, {\n        user: \"gpt\",\n        message: `${data}`\n      }]);\n    }\n  }\n  async function handleInitialSubmit(f) {\n    f.preventDefault();\n    let chatLogNew = [...chatLog, {\n      user: \"me\",\n      message: `${query}`\n    }];\n    setChatLog(chatLogNew);\n    setShowOverlay(false);\n    const messages = chatLogNew.map(message => message.message).join(\"\");\n    const data = await getInitialCompletion(messages);\n    setChatLog([...chatLogNew, {\n      user: \"gpt\",\n      message: `${data}`\n    }]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidemenu\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"sidemenu-header\",\n        children: \"Jonald\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"side-menu-button\",\n        onClick: clearChat,\n        children: \" Clear Chat \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [showOverlay && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleInitialSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"details\",\n          value: details,\n          onChange: details => setDetails(details.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"style\",\n          value: style,\n          onChange: style => setStyle(style.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"brands\",\n          value: brands,\n          onChange: style => setBrands(brands.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-button\",\n          onClick: () => {\n            handleSubmit();\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stock-screening-tool\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              rows: \"1\",\n              value: query,\n              onChange: e => setQuery(e.target.value),\n              className: \"chat-input-textarea\",\n              placeholder: \"Ask a question or give a command\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"submit-button\",\n              onClick: () => {\n                handleSubmit();\n              },\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"below-chatbox\",\n          children: [\"February 1 version. At this stage, feedback is very crucial. If you are beta-testing, please fill out \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://forms.gle/YvjMHj8kPX7xDX2H8\",\n            target: \"_new\",\n            children: \"this form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 134\n          }, this), \" and run through the feedback questions as it will help me a lot.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 1\n  }, this);\n}\n_s(App, \"ZVZIkFiGFM4/WXDj+onSIdWgbQg=\");\n_c = App;\nconst ChatMessage = _ref => {\n  let {\n    message\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clearfix\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-message ${message.user === \"gpt\" && \"chatgpt\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-message-center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ChatMessage;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["useState","Configuration","OpenAIApi","inject","orgId","process","env","ORG_ID","apiKey","App","query","setQuery","chatLog","setChatLog","showOverlay","setShowOverlay","configuration","openai","details","setDetails","style","setStyle","brands","setBrands","getInitialCompletion","response","createCompletion","model","prompt","max_tokens","temperature","stop","data","choices","text","getContextCompletion","messages","clearChat","handleSubmit","e","preventDefault","trim","length","chatLogNew","user","message","map","join","console","log","handleInitialSubmit","f","target","value","index","ChatMessage"],"sources":["/Users/aaronleek/Desktop/coding-projects/misc-projects/quick-hack-nw/Jonald - Hack/src/App.js"],"sourcesContent":["import './App.css';\nimport './normal.css'\nimport { useState } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nimport { inject } from '@vercel/analytics';\n\n\ninject();\n\n// the handleSubmit front-end needs to be modified to call handleRequest if radio button is toggled yes. \n\n\n// envs\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\n\n\nfunction App() {\n\n  // statehooks\n  const [query, setQuery] = useState(\"\");\n  const [chatLog, setChatLog] = useState([])\n  const [showOverlay, setShowOverlay] = useState(true);\n\n\n  //open ai auth\n  const configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n  });\n  const openai = new OpenAIApi(configuration);\n\n  const [details, setDetails] = useState(\"\");\n  const [style, setStyle] = useState(\"\");\n  const [brands, setBrands] = useState(\"\");\n\n// First completion, sets the context as Kari.ai personality.\n  async function getInitialCompletion(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      Purpose: Take in the user's information and give a response. You generate a tweet calendar for the user.\n      Name: Jonald\n\n      Information passed in\n      Product Details: ${details}\n      Style: ${style}\n      Brands to Mimick: ${brands}\n      `,\n      max_tokens: 2048,\n      temperature: .6,\n      stop: \"/n\",\n    });\n    return response.data.choices[0].text;\n  }\n// Second completion, mainly just responds to messages in a conversational manner.\n  async function getContextCompletion(query, messages) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      Don't mention outright: Conversational Style, Context, Instructions.\n      Instructions: view the chatLog for context and respond to the latest message.\n      Context: You are an artificial financial advisor named Kari. \n\n      latestMessage: ${query}\n      chatLog: ${messages}\n      `,\n      max_tokens: 512,\n      temperature: .5,\n      stop: \"/n\",\n    });\n    return response.data.choices[0].text;\n  }\n\n  // clearChat button function\n  function clearChat(){\n    setChatLog([]);\n    setShowOverlay(true);\n    setBrands(\"\");  \n    setStyle(\"\");\n    setDetails(\"\");\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (query.trim() && query.length > 4) {\n      let chatLogNew = [...chatLog, { user: \"me\", message: `${query}`}];\n      setQuery(\"\");\n      setChatLog(chatLogNew);\n      setShowOverlay(false);\n      const messages = chatLogNew.map((message) => message.message).join(\"\");\n        console.log(\"Getting context completion\");\n        const data = await getContextCompletion(query, messages);\n      setChatLog([...chatLogNew, { user: \"gpt\", message: `${data}`}]);\n    }\n  }\n\n  async function handleInitialSubmit(f) {\n    f.preventDefault();\n    let chatLogNew = [...chatLog, { user: \"me\", message: `${query}`}];\n    setChatLog(chatLogNew);\n    setShowOverlay(false);\n    const messages = chatLogNew.map((message) => message.message).join(\"\");\n    const data = await getInitialCompletion(messages);\n    setChatLog([...chatLogNew, { user: \"gpt\", message: `${data}`}]);\n  }\n  \n\n\nreturn (\n<div className=\"App\">\n<aside className=\"sidemenu\"> \n  <h3 className=\"sidemenu-header\">Jonald</h3>\n   <button className=\"side-menu-button\" onClick={clearChat}> Clear Chat </button> \n   </aside>\n      <section className=\"chatbox\">\n      {showOverlay && (\n        <form onSubmit={handleInitialSubmit}>\n            <input\n              type=\"text\"\n              id=\"details\"\n              value={details}\n              onChange={(details) => setDetails(details.target.value)}\n            />\n            <input\n              type=\"text\"\n              id=\"style\"\n              value={style}\n              onChange={(style) => setStyle(style.target.value)}\n            />\n            <input\n              type=\"text\"\n              id=\"brands\"\n              value={brands}\n              onChange={(style) => setBrands(brands.target.value)}\n            />\n            <button className=\"submit-button\" onClick={() => {handleSubmit();}}>Send</button>\n        </form>\n        )}\n        <div className=\"chat-log\">\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n    </div>\n    <div className=\"chat-input-holder\">\n    <div className=\"stock-screening-tool\">\n      <form onSubmit={handleSubmit}> \n        <input \n          rows=\"1\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          className=\"chat-input-textarea\"\n          placeholder=\"Ask a question or give a command\"></input>\n\n        <button className=\"submit-button\" onClick={() =>{ handleSubmit();}}>Send</button>\n      </form>\n    </div>\n  <p className='below-chatbox'>February 1 version. At this stage, feedback is very crucial. If you are beta-testing, please fill out <a href=\"https://forms.gle/YvjMHj8kPX7xDX2H8\" target=\"_new\">this form</a> and run through the feedback questions as it will help me a lot.</p>\n</div>\n</section>\n</div>\n  );\n}\n\nconst ChatMessage = ({ message }) => {\n  return (\n    <div className=\"clearfix\">\n    <div className={`chat-message ${message.user === \"gpt\" && \"chatgpt\"}`}>\n    <div className=\"chat-message-center\">\n    </div> \n    <div className=\"message\">\n      {message.message}\n  </div>\n</div>\n</div>\n  )\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}