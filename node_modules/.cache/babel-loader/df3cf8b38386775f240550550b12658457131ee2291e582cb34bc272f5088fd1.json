{"ast":null,"code":"var _jsxFileName = \"/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport './normal.css';\nimport { useState } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nimport { inject } from '@vercel/analytics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ninject();\n\n// the handleSubmit front-end needs to be modified to call handleRequest if radio button is toggled yes. \n\nconst orgId = process.env.ORG_ID;\nconst apiKey = process.env.API_KEY;\nfunction App() {\n  _s();\n  const configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey\n  });\n  const openai = new OpenAIApi(configuration);\n  async function getCompletion(messages, infoRequest) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      You are an artificial financial & investment advisor named Kari. \n      When a user has a response that is non-conversational, simply affirmative, \n      or you don't quite know how to respond to, just talk about your abilities again. \n      There should never be a blank response. Don't correct the user's punctuation \n      if they're lacking it. Ask one question at a time when lacking helpful context.\n      Here is the prompt: ${messages}\n      \n      Instructions: view the chatLog for context and respond to the latest message.\n      Context: You are an artificial financial advisor named Kari. \n      Purpose: Your purpose is to help the user understand the data that is passed in.\n      Formatting: Money in USD, \"$xxx,xxx.xx\", concise, answers the question, asks \n      leading questions to stimulate insights\n      Abilities: The user can choose to pull in live financial data summaries for you to process, \n      so tell the user to enable the live info and then ask away.\n\n      chatLog: ${messages}\n\n      Data Processing: if there is no data to summarize, don't output anything related to data. \n      Exception being if user asks question related to financial data in latest message of chatLog,\n      then respond with prompting the user to enable live info.\n\n      dataSummary: ${infoRequest}\n      `,\n      max_tokens: 1024,\n      temperature: .6,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n  const [input, setInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([]);\n  const [showOverlay, setShowOverlay] = useState(true);\n  const [getLiveInfo, setLiveInfo] = useState(false);\n  function clearChat() {\n    setChatLog([]);\n    setShowOverlay(true);\n  }\n\n  // this should be the function that primes the bot with necessary context It will set. Then we will create another function that gets a response from the bot based on the context it already knows.\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (input.trim() && input.length > 4) {\n      let chatLogNew = [...chatLog, {\n        user: \"me\",\n        message: `${input}`\n      }];\n      setInput(\"\");\n      setChatLog(chatLogNew);\n      setShowOverlay(false);\n      const messages = chatLogNew.map(message => message.message).join(\"\");\n      const infoRequest = await handleLiveInfo();\n      const data = await getCompletion(messages, infoRequest);\n      setChatLog([...chatLogNew, {\n        user: \"gpt\",\n        message: `${data}`\n      }]);\n    }\n  }\n  async function handleLiveInfo() {\n    const infoRequest = await getLiveInfo(input);\n    const data = await getCompletion(infoRequest, input);\n    return data;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidemenu\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"sidemenu-header\",\n        children: \"Kari\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"side-menu-button\",\n        onClick: clearChat,\n        children: \" Clear Chat \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"side-menu-button\",\n        onClick: () => window.open(\"https://forms.gle/6rQ4nsWddMqPgsCw9\"),\n        children: \" Join Waitlist \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [showOverlay && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Kari.ai Financial Advisor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overlay-card-columns\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overlay-card-column-example\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Example Prompts:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: () => setInput(\"What is the current stock price for SPY?\"),\n              children: \"\\\"What is the current stock price for SPY?\\\"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: () => setInput(\"What are the best investment options for someone in their 20s with a moderate level of risk tolerance?\"),\n              children: \"\\\"What are the best investment options for someone in their 20s with a moderate level of risk tolerance?\\\"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: () => setInput(\"What is your name and how can you actually help me with my finances?\"),\n              children: \"\\\"What is your name and how can you actually help me with my finances?\\\"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overlay-card-column\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Current Limitations:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"The chat may not have access to the most recent data on financial topics.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"The chat does not have access to the user's personal financial situation or other relevant context.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"The chat's answers may be limited by the quality and clarity of the prompts it receives.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overlay-card-column\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Future Features:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Save Threads\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Access to More Financial Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Charting & Data Visualization\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"And more!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stock-screening-tool\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              rows: \"1\",\n              value: input,\n              onChange: e => setInput(e.target.value),\n              className: \"chat-input-textarea\",\n              placeholder: \"Ask a question or give a command\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"radio\",\n              onChange: e => setLiveInfo(e.target.value),\n              children: \"Get Live Info\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"submit-button\",\n              onClick: () => {\n                handleSubmit();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"below-chatbox\",\n          children: [\"January 12 version. At this stage, feedback is very crucial. If you are beta-testing, please fill out \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://forms.gle/YvjMHj8kPX7xDX2H8\",\n            target: \"_new\",\n            children: \"this form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 134\n          }, this), \" and run through the feedback questions as it will help me a lot.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"2VEF7TOvcDaXcDgvX+oH8HTJCXs=\");\n_c = App;\nconst ChatMessage = _ref => {\n  let {\n    message\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clearfix\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-message ${message.user === \"gpt\" && \"chatgpt\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-message-center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ChatMessage;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["useState","Configuration","OpenAIApi","inject","orgId","process","env","ORG_ID","apiKey","API_KEY","App","configuration","openai","getCompletion","messages","infoRequest","response","createCompletion","model","prompt","max_tokens","temperature","stop","data","choices","text","input","setInput","chatLog","setChatLog","showOverlay","setShowOverlay","getLiveInfo","setLiveInfo","clearChat","handleSubmit","e","preventDefault","trim","length","chatLogNew","user","message","map","join","handleLiveInfo","window","open","index","target","value","ChatMessage"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/App.js"],"sourcesContent":["import './App.css';\nimport './normal.css'\nimport { useState } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nimport { inject } from '@vercel/analytics';\n\ninject();\n\n// the handleSubmit front-end needs to be modified to call handleRequest if radio button is toggled yes. \n\nconst orgId = process.env.ORG_ID;\nconst apiKey = process.env.API_KEY;\n\nfunction App() {\n\n  const configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n  });\n  const openai = new OpenAIApi(configuration);\n\n  async function getCompletion(messages, infoRequest) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      You are an artificial financial & investment advisor named Kari. \n      When a user has a response that is non-conversational, simply affirmative, \n      or you don't quite know how to respond to, just talk about your abilities again. \n      There should never be a blank response. Don't correct the user's punctuation \n      if they're lacking it. Ask one question at a time when lacking helpful context.\n      Here is the prompt: ${messages}\n      \n      Instructions: view the chatLog for context and respond to the latest message.\n      Context: You are an artificial financial advisor named Kari. \n      Purpose: Your purpose is to help the user understand the data that is passed in.\n      Formatting: Money in USD, \"$xxx,xxx.xx\", concise, answers the question, asks \n      leading questions to stimulate insights\n      Abilities: The user can choose to pull in live financial data summaries for you to process, \n      so tell the user to enable the live info and then ask away.\n\n      chatLog: ${messages}\n\n      Data Processing: if there is no data to summarize, don't output anything related to data. \n      Exception being if user asks question related to financial data in latest message of chatLog,\n      then respond with prompting the user to enable live info.\n\n      dataSummary: ${infoRequest}\n      `,\n      max_tokens: 1024,\n      temperature: .6,\n      stop: \"/n\",\n    });\n    return response.data.choices[0].text;\n  }\n\n  \n  const [input, setInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([])\n  const [showOverlay, setShowOverlay] = useState(true);\n  const [getLiveInfo, setLiveInfo] = useState(false);\n\n  function clearChat(){\n    setChatLog([]);\n    setShowOverlay(true);\n  }\n\n\n  \n// this should be the function that primes the bot with necessary context It will set. Then we will create another function that gets a response from the bot based on the context it already knows.\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (input.trim() && input.length > 4) {\n      let chatLogNew = [...chatLog, { user: \"me\", message: `${input}`}]\n      setInput(\"\");\n      setChatLog(chatLogNew);\n      setShowOverlay(false);\n      const messages = chatLogNew.map((message) => message.message).join(\"\")\n      const infoRequest = await handleLiveInfo();\n      const data = await getCompletion(messages, infoRequest);\n      setChatLog([...chatLogNew, { user: \"gpt\", message: `${data}`}])\n    }\n  }\n\n  async function handleLiveInfo() {\n    const infoRequest = await getLiveInfo(input);\n    const data = await getCompletion(infoRequest, input);\n    return data;\n  }\n\n  return (\n    <div className=\"App\">\n<aside className=\"sidemenu\"> \n  <h3 className=\"sidemenu-header\">Kari</h3>\n   <button className=\"side-menu-button\" onClick={clearChat}> Clear Chat </button> \n   <button className=\"side-menu-button\" onClick={() => window.open(\"https://forms.gle/6rQ4nsWddMqPgsCw9\")}> Join Waitlist </button> \n   </aside>\n      <section className=\"chatbox\">\n      {showOverlay && (\n          <div className=\"overlay-card\">\n            <div>\n              <h2>Kari.ai Financial Advisor</h2>\n            </div>\n          <div className=\"overlay-card-columns\">\n            <div className=\"overlay-card-column-example\">\n              <h3>Example Prompts:</h3>\n              <p onClick={() => setInput(\"What is the current stock price for SPY?\")}>\"What is the current stock price for SPY?\"</p>\n              <p onClick={() => setInput(\"What are the best investment options for someone in their 20s with a moderate level of risk tolerance?\")}>\"What are the best investment options for someone in their 20s with a moderate level of risk tolerance?\"</p>\n              <p onClick={() => setInput(\"What is your name and how can you actually help me with my finances?\")}>\"What is your name and how can you actually help me with my finances?\"</p>\n            </div>\n            <div className=\"overlay-card-column\">\n              <h3>Current Limitations:</h3>\n              <p>The chat may not have access to the most recent data on financial topics.</p>\n              <p>The chat does not have access to the user's personal financial situation or other relevant context.</p>\n              <p>The chat's answers may be limited by the quality and clarity of the prompts it receives.</p>\n            </div>\n            <div className=\"overlay-card-column\">\n              <h3>Future Features:</h3>\n              <p>Save Threads</p>\n              <p>Access to More Financial Data</p>\n              <p>Charting & Data Visualization</p>\n              <p>And more!</p>\n            </div>\n          </div>\n        </div>        \n        )}\n        <div className=\"chat-log\">\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n    </div>\n    <div className=\"chat-input-holder\">\n  <div className=\"stock-screening-tool\">\n    <form onSubmit={handleSubmit}> \n      <input \n        rows=\"1\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        className=\"chat-input-textarea\"\n        placeholder=\"Ask a question or give a command\"\n      />\n      <button type='radio' onChange={(e) => setLiveInfo(e.target.value)}>Get Live Info</button>\n      <button className=\"submit-button\" onClick={() => {handleSubmit();}}></button>\n    </form>\n  </div>\n  <p className='below-chatbox'>January 12 version. At this stage, feedback is very crucial. If you are beta-testing, please fill out <a href=\"https://forms.gle/YvjMHj8kPX7xDX2H8\" target=\"_new\">this form</a> and run through the feedback questions as it will help me a lot.</p>\n</div>\n</section>\n</div>\n  );\n}\n\n\nconst ChatMessage = ({ message }) => {\n  return (\n    <div className=\"clearfix\">\n    <div className={`chat-message ${message.user === \"gpt\" && \"chatgpt\"}`}>\n    <div className=\"chat-message-center\">\n    </div> \n    <div className=\"message\">\n      {message.message}\n  </div>\n</div>\n</div>\n  )\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}