{"ast":null,"code":"import { Configuration, OpenAIApi } from 'openai';\nimport { AlphaVantage } from './APIs/AlphaVantage';\nimport { WallStreetBets } from './APIs/WallStreetBets';\nimport { StockSentimentAPI } from './APIs/StockSentimentAPI';\nimport { GFinance } from './APIs/GFinance';\nimport { Crowdsense } from './APIs/Crowdsense';\nimport { SECFilings } from './APIs/SECFilings';\n\n// LAST LEFT OFF ON: Figuring out how to get the workflow to run in sequence without fucking up.\n\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport function KariFinancialAnalyst(query) {\n  workflow(query).then(result => {\n    console.log(result);\n    return workflow;\n  });\n\n  // maps possible requestTypes to an array of associated functions for callback. functions are below.\n  const requestFunctions = {\n    1: AlphaVantage,\n    //\n    2: WallStreetBets,\n    //  \n    3: StockSentimentAPI,\n    //\n    4: GFinance,\n    //  \n    5: Crowdsense,\n    // \n    6: SECFilings\n  };\n\n  // overall workflow. Decides which sub-workflow to execute, executes it, then returns the response.\n  function workflow(query) {\n    console.log(\"Step 1: gettingRecommendedDataSources\");\n    return getRecommendedDataSources(query).then(requestType => {\n      console.log(\"Step 2 getting response from requested function:\", requestType);\n      const requestOutput = requestFunctions[requestType](query);\n      return requestOutput;\n    });\n  }\n  async function getRecommendedDataSources(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n        You are an artifical financial advisor. Your job is to view the user's request and determine the data sources most relevant to the request.\n        These data sources are different APIs that provide different types of data. You will need to determine which data source is most relevant to the user's request.\n\n        Potential Options:\n           | Name | Description | How to Query |\n        1. | AlphaVantage | Stock Price Data, Alpha Intelligence, Company Fundamentals, Company Financial Statements, Forex, Commodities, Economic Indicators, Technical Indicators | Specific Questions |\n        2. | WallStreetBets | Stocks & Sentiment by Reddit posts on popular finance subreddits | Vague Requests, Trending Info |\n        3. | StockSentimentAPI | Sentiment Analyis & News Articles by ticker | Specific or Vague questions |\n        4. | GFinance | General market screening, get info by category (winners, losers, active, etc.) | Vague Requests, Trending Info |\n        5. | Crowdsense | Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes | Specific or Vague questions |\n        6. | SECFilings | SEC filings for a public company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings | Specific or Vague questions |\n\n        Output: The number of the data source you think is most relevant to the user's request.\n        Message: ${query}     \n        `,\n      max_tokens: 128,\n      temperature: .5,\n      stop: \"/n\"\n    });\n    const requestType = response.data.choices[0].text;\n    const intRequest = parseInt(requestType.match(/\\d+/)[0]);\n    return Promise.resolve(intRequest);\n  }\n}\n_c = KariFinancialAnalyst;\nvar _c;\n$RefreshReg$(_c, \"KariFinancialAnalyst\");","map":{"version":3,"names":["Configuration","OpenAIApi","AlphaVantage","WallStreetBets","StockSentimentAPI","GFinance","Crowdsense","SECFilings","orgId","process","env","ORG_ID","apiKey","configuration","openai","KariFinancialAnalyst","query","workflow","then","result","console","log","requestFunctions","getRecommendedDataSources","requestType","requestOutput","response","createCompletion","model","prompt","max_tokens","temperature","stop","data","choices","text","intRequest","parseInt","match","Promise","resolve"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/KariFinancialAnalyst.js"],"sourcesContent":["import { Configuration, OpenAIApi } from 'openai';\nimport { AlphaVantage } from './APIs/AlphaVantage';\nimport { WallStreetBets } from './APIs/WallStreetBets';\nimport { StockSentimentAPI } from './APIs/StockSentimentAPI';\nimport { GFinance } from './APIs/GFinance';\nimport { Crowdsense } from './APIs/Crowdsense';\nimport { SECFilings } from './APIs/SECFilings';\n\n\n\n// LAST LEFT OFF ON: Figuring out how to get the workflow to run in sequence without fucking up.\n\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\n\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n  });\n  const openai = new OpenAIApi(configuration);\n\nexport function KariFinancialAnalyst(query) {\n\n    workflow(query).then(result => {\n        console.log(result);\n        return workflow;\n        });\n    \n\n    // maps possible requestTypes to an array of associated functions for callback. functions are below.\n    const requestFunctions = {\n        1: AlphaVantage, //\n        2: WallStreetBets, //  \n        3: StockSentimentAPI, //\n        4: GFinance, //  \n        5: Crowdsense, // \n        6: SECFilings, \n    }\n\n    // overall workflow. Decides which sub-workflow to execute, executes it, then returns the response.\n    function workflow(query) {\n        console.log(\"Step 1: gettingRecommendedDataSources\");\n        return getRecommendedDataSources(query).then(requestType => {\n          console.log(\"Step 2 getting response from requested function:\", requestType);\n          const requestOutput = requestFunctions[requestType](query);\n          return requestOutput;\n        });\n      }\n      \n    async function getRecommendedDataSources(query) {\n    const response = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n        You are an artifical financial advisor. Your job is to view the user's request and determine the data sources most relevant to the request.\n        These data sources are different APIs that provide different types of data. You will need to determine which data source is most relevant to the user's request.\n\n        Potential Options:\n           | Name | Description | How to Query |\n        1. | AlphaVantage | Stock Price Data, Alpha Intelligence, Company Fundamentals, Company Financial Statements, Forex, Commodities, Economic Indicators, Technical Indicators | Specific Questions |\n        2. | WallStreetBets | Stocks & Sentiment by Reddit posts on popular finance subreddits | Vague Requests, Trending Info |\n        3. | StockSentimentAPI | Sentiment Analyis & News Articles by ticker | Specific or Vague questions |\n        4. | GFinance | General market screening, get info by category (winners, losers, active, etc.) | Vague Requests, Trending Info |\n        5. | Crowdsense | Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes | Specific or Vague questions |\n        6. | SECFilings | SEC filings for a public company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings | Specific or Vague questions |\n\n        Output: The number of the data source you think is most relevant to the user's request.\n        Message: ${query}     \n        `,\n        max_tokens: 128,\n        temperature: .5,\n        stop: \"/n\",\n    });\n    const requestType = response.data.choices[0].text;\n  const intRequest = parseInt(requestType.match(/\\d+/)[0]);\n  return Promise.resolve(intRequest);\n\n\n}\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AACjD,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,UAAU,QAAQ,mBAAmB;;AAI9C;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,MAAM;AAChC,MAAMC,MAAM,GAAG,qDAAqD;AAEpE,MAAMC,aAAa,GAAG,IAAIb,aAAa,CAAC;EACpCQ,KAAK,EAAEA,KAAK;EACZI,MAAM,EAAEA;AACV,CAAC,CAAC;AACF,MAAME,MAAM,GAAG,IAAIb,SAAS,CAACY,aAAa,CAAC;AAE7C,OAAO,SAASE,oBAAoB,CAACC,KAAK,EAAE;EAExCC,QAAQ,CAACD,KAAK,CAAC,CAACE,IAAI,CAACC,MAAM,IAAI;IAC3BC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACnB,OAAOF,QAAQ;EACf,CAAC,CAAC;;EAGN;EACA,MAAMK,gBAAgB,GAAG;IACrB,CAAC,EAAEpB,YAAY;IAAE;IACjB,CAAC,EAAEC,cAAc;IAAE;IACnB,CAAC,EAAEC,iBAAiB;IAAE;IACtB,CAAC,EAAEC,QAAQ;IAAE;IACb,CAAC,EAAEC,UAAU;IAAE;IACf,CAAC,EAAEC;EACP,CAAC;;EAED;EACA,SAASU,QAAQ,CAACD,KAAK,EAAE;IACrBI,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACpD,OAAOE,yBAAyB,CAACP,KAAK,CAAC,CAACE,IAAI,CAACM,WAAW,IAAI;MAC1DJ,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEG,WAAW,CAAC;MAC5E,MAAMC,aAAa,GAAGH,gBAAgB,CAACE,WAAW,CAAC,CAACR,KAAK,CAAC;MAC1D,OAAOS,aAAa;IACtB,CAAC,CAAC;EACJ;EAEF,eAAeF,yBAAyB,CAACP,KAAK,EAAE;IAChD,MAAMU,QAAQ,GAAG,MAAMZ,MAAM,CAACa,gBAAgB,CAAC;MAC3CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmBb,KAAM;AACzB,SAAS;MACDc,UAAU,EAAE,GAAG;MACfC,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;IACV,CAAC,CAAC;IACF,MAAMR,WAAW,GAAGE,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;IACnD,MAAMC,UAAU,GAAGC,QAAQ,CAACb,WAAW,CAACc,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,OAAOC,OAAO,CAACC,OAAO,CAACJ,UAAU,CAAC;EAGpC;AACA;AAAC,KAzDerB,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}