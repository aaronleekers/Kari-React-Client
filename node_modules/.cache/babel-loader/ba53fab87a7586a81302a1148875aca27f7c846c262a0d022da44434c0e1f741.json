{"ast":null,"code":"const {\n  Configuration,\n  OpenAIApi\n} = require('openai');\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport async function WallStreetBets(query) {\n  async function workflow(query) {\n    console.log(\"WSB called!\");\n    console.log(\"Step 1: formingApiParams from extractedInfo and subRequestType:\", extractedInfo);\n    const apiParams = await formApiParams(extractedInfo); // STEP 5\n    console.log(\"Step 3: Making API Call with params:\", apiParams);\n    const apiCallData = await callApi(apiParams); // STEP 6\n    console.log(\"Step 4: summarizingApiCallData with current date, requestType, subrequestType, apiCallData, and query:\", apiCallData, query);\n    const summarizedApiCallData = await summarizeApiCallData(apiCallData, query); // STEP 7\n    console.log(\"Final Step: Return Summary\", summarizedApiCallData);\n    return summarizedApiCallData;\n  }\n  const response = await workflow(query);\n  return response;\n  async function formApiParams(extractedInfo) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Instructions: Take in the query, and extract the time sentiment suggested, and format it like so:\n            \n            date=today            \n            \n            Possible Outputs:\n            date=today\n            date=yesterday\n            date=this_week\n            date=last_week\n            date=this_month\n            date=last_month\n\n            example:\n            query: What are the trending tocks for the last week?\n            output: date=last_week\n\n            extractedInfo: ${extractedInfo}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    const formattedText = response.data.choices[0].text.trim();\n    const functionIndex = formattedText.indexOf('date=');\n    return formattedText.slice(functionIndex);\n  }\n\n  // STEP 6\n  async function callApi(newApiParams) {\n    const url = `https://wallstreetbets.p.rapidapi.com/?${newApiParams}`;\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n        'X-RapidAPI-Host': 'wallstreetbets.p.rapidapi.com'\n      }\n    };\n    const response = await fetch(url, options);\n    const data = await response.text();\n    console.log('Original data:', data);\n    const trimmedData = data.replace(/\\s/g, '').substring(0, 3000);\n    console.log('Trimmed data:', trimmedData);\n    return trimmedData;\n  }\n\n  // STEP 7\n  async function summarizeApiCallData(requestType, subRequestType, apiCallData, query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Instructions: \n\n            DataSource: ${requestType},\n            Request Type: ${subRequestType}\n            Data to be summarized: ${apiCallData}\n            Question to be asked associated with data: ${query}\n\n            `,\n      max_tokens: 450,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n}\n_c = WallStreetBets;\nvar _c;\n$RefreshReg$(_c, \"WallStreetBets\");","map":{"version":3,"names":["Configuration","OpenAIApi","require","orgId","apiKey","configuration","openai","WallStreetBets","query","workflow","console","log","extractedInfo","apiParams","formApiParams","apiCallData","callApi","summarizedApiCallData","summarizeApiCallData","response","createCompletion","model","prompt","max_tokens","temperature","formattedText","data","choices","text","trim","functionIndex","indexOf","slice","newApiParams","url","options","method","headers","fetch","trimmedData","replace","substring","requestType","subRequestType"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/APIs/WallStreetBets.js"],"sourcesContent":["const { Configuration, OpenAIApi } = require('openai');\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\n\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n});\nconst openai = new OpenAIApi(configuration);\n\nexport async function WallStreetBets(query){\n\nasync function workflow(query) {\n    console.log(\"WSB called!\");\n    console.log(\"Step 1: formingApiParams from extractedInfo and subRequestType:\", extractedInfo);\n    const apiParams = await formApiParams(extractedInfo) // STEP 5\n    console.log(\"Step 3: Making API Call with params:\", apiParams)\n    const apiCallData = await callApi(apiParams); // STEP 6\n    console.log(\"Step 4: summarizingApiCallData with current date, requestType, subrequestType, apiCallData, and query:\",  apiCallData, query)\n    const summarizedApiCallData = await summarizeApiCallData( apiCallData, query); // STEP 7\n    console.log(\"Final Step: Return Summary\", summarizedApiCallData);\n    return summarizedApiCallData;\n}   \n    const response = await workflow(query);\n    return response;\n\n\n    async function formApiParams(extractedInfo) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: Take in the query, and extract the time sentiment suggested, and format it like so:\n            \n            date=today            \n            \n            Possible Outputs:\n            date=today\n            date=yesterday\n            date=this_week\n            date=last_week\n            date=this_month\n            date=last_month\n\n            example:\n            query: What are the trending tocks for the last week?\n            output: date=last_week\n\n            extractedInfo: ${extractedInfo}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        const formattedText = response.data.choices[0].text.trim();\n        const functionIndex = formattedText.indexOf('date=');\n        return formattedText.slice(functionIndex);\n        }\n\n    // STEP 6\n    async function callApi(newApiParams) {\n        const url = `https://wallstreetbets.p.rapidapi.com/?${newApiParams}`;\n        const options = {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n            'X-RapidAPI-Host': 'wallstreetbets.p.rapidapi.com'\n          }\n        };\n        const response = await fetch(url, options);\n        const data = await response.text();\n        console.log('Original data:', data);\n        const trimmedData = data.replace(/\\s/g, '').substring(0, 3000);\n        console.log('Trimmed data:', trimmedData);\n        return trimmedData;\n      }\n      \n    // STEP 7\n    async function summarizeApiCallData(requestType, subRequestType, apiCallData, query) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: \n\n            DataSource: ${requestType},\n            Request Type: ${subRequestType}\n            Data to be summarized: ${apiCallData}\n            Question to be asked associated with data: ${query}\n\n            `,\n            max_tokens: 450,\n            temperature: 0.5\n            \n        })\n        return response.data.choices[0].text;\n    }\n   }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}