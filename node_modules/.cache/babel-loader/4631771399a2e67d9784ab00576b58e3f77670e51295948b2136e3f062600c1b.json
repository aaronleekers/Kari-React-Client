{"ast":null,"code":"// src/queue.ts\nvar initQueue = () => {\n  if (window.va) return;\n  window.va = function a() {\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n    (window.vaq = window.vaq || []).push(params);\n  };\n};\n\n// src/utils.ts\nfunction isBrowser() {\n  return typeof window !== \"undefined\";\n}\nfunction isDevelopment() {\n  if (typeof process === \"undefined\") return false;\n  return process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"test\";\n}\nfunction getMode() {\n  let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"auto\";\n  if (mode === \"auto\") {\n    return isDevelopment() ? \"development\" : \"production\";\n  }\n  return mode;\n}\n\n// src/generic.ts\nvar inject = function () {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    debug: true\n  };\n  var _a;\n  if (!isBrowser()) return;\n  const mode = getMode(props.mode);\n  initQueue();\n  if (props.beforeSend) {\n    (_a = window.va) == null ? void 0 : _a.call(window, \"beforeSend\", props.beforeSend);\n  }\n  const src = mode === \"development\" ? \"https://cdn.vercel-insights.com/v1/script.debug.js\" : \"/_vercel/insights/script.js\";\n  if (document.head.querySelector(`script[src*=\"${src}\"]`)) return;\n  const script = document.createElement(\"script\");\n  script.src = src;\n  script.defer = true;\n  if (mode === \"development\" && props.debug === false) {\n    script.setAttribute(\"data-debug\", \"false\");\n  }\n  document.head.appendChild(script);\n};\nexport { inject };","map":{"version":3,"mappings":";AAAO,IAAMA,YAAY,MAAY;EAEnC,IAAIC,OAAOC,IAAI;EAEfD,OAAOC,KAAK,SAASC,IAAmB;IAAA,kCAAdC;MAAAA;IAAA;IACxB,CAACH,OAAOI,MAAMJ,OAAOI,OAAO,EAAC,EAAGC,KAAKF,MAAM;EAC7C;AACF;;;ACLO,SAASG,YAAqB;EACnC,OAAO,OAAON,WAAW;AAC3B;AAEO,SAASO,gBAAyB;EACvC,IAAI,OAAOC,YAAY,aAAa,OAAO;EAC3C,OACEA,QAAQC,IAAIC,aAAa,iBAAiBF,QAAQC,IAAIC,aAAa;AAEvE;AAEO,SAASC,UAAmC;EAAA,IAA3BC,2EAAa;EACnC,IAAIA,SAAS,QAAQ;IACnB,OAAOL,eAAc,GAAI,gBAAgB;EAC3C;EAEA,OAAOK;AACT;;;ACfO,IAAMC,SAAS,YAIX;EAAA,IAHTC,4EAAwB;IACtBC,OAAO;EACT;EAPF;EASE,IAAI,CAACT,WAAU,EAAG;EAElB,MAAMM,OAAOD,QAAQG,MAAMF,IAAI;EAE/Bb,WAAU;EAEV,IAAIe,MAAME,YAAY;IACpB,aAAOf,OAAP,gCAAY,cAAca,MAAME;EAClC;EAEA,MAAMC,MACJL,SAAS,gBACL,uDACA;EAEN,IAAIM,SAASC,KAAKC,cAAc,gBAAgBH,OAAO,GAAG;EAE1D,MAAMI,SAASH,SAASI,cAAc,QAAQ;EAC9CD,OAAOJ,MAAMA;EACbI,OAAOE,QAAQ;EAEf,IAAIX,SAAS,iBAAiBE,MAAMC,UAAU,OAAO;IACnDM,OAAOG,aAAa,cAAc,OAAO;EAC3C;EAEAN,SAASC,KAAKM,YAAYJ,MAAM;AAClC","names":["initQueue","window","va","a","params","vaq","push","isBrowser","isDevelopment","process","env","NODE_ENV","getMode","mode","inject","props","debug","beforeSend","src","document","head","querySelector","script","createElement","defer","setAttribute","appendChild"],"sources":["/Users/aaronleek/Desktop/coding-projects/afc/kari-plugin/Kari_Test_Client_Connection/node_modules/@vercel/analytics/src/queue.ts","/Users/aaronleek/Desktop/coding-projects/afc/kari-plugin/Kari_Test_Client_Connection/node_modules/@vercel/analytics/src/utils.ts","/Users/aaronleek/Desktop/coding-projects/afc/kari-plugin/Kari_Test_Client_Connection/node_modules/@vercel/analytics/src/generic.ts"],"sourcesContent":["export const initQueue = (): void => {\n  // initialize va until script is loaded\n  if (window.va) return;\n\n  window.va = function a(...params): void {\n    (window.vaq = window.vaq || []).push(params);\n  };\n};\n","import type { Mode } from './types';\n\nexport function isBrowser(): boolean {\n  return typeof window !== 'undefined';\n}\n\nexport function isDevelopment(): boolean {\n  if (typeof process === 'undefined') return false;\n  return (\n    process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test'\n  );\n}\n\nexport function getMode(mode: Mode = 'auto'): Mode {\n  if (mode === 'auto') {\n    return isDevelopment() ? 'development' : 'production';\n  }\n\n  return mode;\n}\n","import { initQueue } from './queue';\nimport type { AnalyticsProps } from './types';\nimport { isBrowser, getMode } from './utils';\n\nexport const inject = (\n  props: AnalyticsProps = {\n    debug: true,\n  },\n): void => {\n  if (!isBrowser()) return;\n\n  const mode = getMode(props.mode);\n\n  initQueue();\n\n  if (props.beforeSend) {\n    window.va?.('beforeSend', props.beforeSend);\n  }\n\n  const src =\n    mode === 'development'\n      ? 'https://cdn.vercel-insights.com/v1/script.debug.js'\n      : '/_vercel/insights/script.js';\n\n  if (document.head.querySelector(`script[src*=\"${src}\"]`)) return;\n\n  const script = document.createElement('script');\n  script.src = src;\n  script.defer = true;\n\n  if (mode === 'development' && props.debug === false) {\n    script.setAttribute('data-debug', 'false');\n  }\n\n  document.head.appendChild(script);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}