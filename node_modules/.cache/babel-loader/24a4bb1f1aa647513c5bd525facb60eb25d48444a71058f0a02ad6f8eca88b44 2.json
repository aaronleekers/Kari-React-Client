{"ast":null,"code":"/**\n * AlphaVantage takes in a query, determines the request type, determines the subRequestType, extracts\n * the necessary information, forms the apiParams, calls the api, and summarizes the apiCallData\n * @param query - the query that the user is asking\n */\n\nconst {\n  Configuration,\n  OpenAIApi\n} = require('openai');\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport async function GFinance(query) {\n  async function workflow(query) {\n    console.log(\"GF-1: extracting requestType\");\n    const requestType = await getRequestType(query);\n    console.log(\"GF-2: extracting api params from info:\", requestType);\n    const apiParams = await formApiParams(requestType);\n    console.log(\"GF-3: Making API Call with params:\", apiParams);\n    const apiCallData = await callApi(apiParams);\n    console.log(apiCallData);\n    return apiCallData;\n  }\n  const response = await workflow(query);\n  return response;\n  // STEP 1\n  async function getRequestType(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n\n            Query: ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    const firstDigit = response.data.choices[0].text.replace(/\\D/g, '')[0];\n    const requestType = parseInt(firstDigit);\n    return requestType;\n  }\n\n  // STEP 5\n  async function formApiParams(requestType) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Instructions: Take in the function, and the extracted info, and format them like so:\n            \n            function=FUNCTION&extractedInfo1=EXTRACTEDINFO1&extractedInfo2=EXTRACTEDINFO2\n            \n            Example:\n            \n            function: TIME_SERIES_INTRADAY\n            interval is 5min\n            symbol = MSFT\n            \n            function=TIME_SERIES_INTRADAY&interval=5min&symbol=MSFT\n\n            order of organization\n            1. function\n            2. interval (if interval is present)\n            3. everything else\n\n            lowercase operators\n\n            function: ${requestType}\n    \n            `,\n      max_tokens: 50,\n      temperature: 0.5\n    });\n    const formattedText = response.data.choices[0].text.trim();\n    const functionIndex = formattedText.indexOf('function=');\n    return formattedText.slice(functionIndex);\n  }\n\n  // STEP 6\n  async function callApi(newApiParams) {\n    const url = `https://alpha-vantage.p.rapidapi.com/query?${newApiParams}&datatype=json&output_size=compact`;\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n        'X-RapidAPI-Host': 'alpha-vantage.p.rapidapi.com'\n      }\n    };\n    const response = await fetch(url, options);\n    const data = await response.text();\n    const trimmedData = data.replace(/\\s/g, '').substring(0, 3000);\n    return trimmedData;\n  }\n}\n_c = GFinance;\nvar _c;\n$RefreshReg$(_c, \"GFinance\");","map":{"version":3,"names":["Configuration","OpenAIApi","require","orgId","apiKey","configuration","openai","GFinance","query","workflow","console","log","requestType","getRequestType","apiParams","formApiParams","apiCallData","callApi","response","createCompletion","model","prompt","max_tokens","temperature","firstDigit","data","choices","text","replace","parseInt","formattedText","trim","functionIndex","indexOf","slice","newApiParams","url","options","method","headers","fetch","trimmedData","substring"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/APIs/GFinance.js"],"sourcesContent":["/**\n * AlphaVantage takes in a query, determines the request type, determines the subRequestType, extracts\n * the necessary information, forms the apiParams, calls the api, and summarizes the apiCallData\n * @param query - the query that the user is asking\n */\n\nconst { Configuration, OpenAIApi } = require('openai');\n\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\n\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n});\nconst openai = new OpenAIApi(configuration);\n\nexport async function GFinance(query) {\n\n    async function workflow(query) {\n        console.log(\"GF-1: extracting requestType\")\n        const requestType = await getRequestType(query);\n        console.log(\"GF-2: extracting api params from info:\", requestType);\n        const apiParams = await formApiParams(requestType)\n        console.log(\"GF-3: Making API Call with params:\", apiParams)\n        const apiCallData = await callApi(apiParams);\n        console.log(apiCallData);\n        return apiCallData;\n    }\n    const response = await workflow(query);\n    return response;\n    // STEP 1\n    async function getRequestType(query) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        const firstDigit = response.data.choices[0].text.replace(/\\D/g, '')[0];\n        const requestType = parseInt(firstDigit);\n        return requestType;\n    }\n\n\n    // STEP 5\n    async function formApiParams(requestType) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: Take in the function, and the extracted info, and format them like so:\n            \n            function=FUNCTION&extractedInfo1=EXTRACTEDINFO1&extractedInfo2=EXTRACTEDINFO2\n            \n            Example:\n            \n            function: TIME_SERIES_INTRADAY\n            interval is 5min\n            symbol = MSFT\n            \n            function=TIME_SERIES_INTRADAY&interval=5min&symbol=MSFT\n\n            order of organization\n            1. function\n            2. interval (if interval is present)\n            3. everything else\n\n            lowercase operators\n\n            function: ${requestType}\n    \n            `,\n            max_tokens: 50,\n            temperature: 0.5,\n        })\n        const formattedText = response.data.choices[0].text.trim();\n        const functionIndex = formattedText.indexOf('function=');\n        return formattedText.slice(functionIndex);\n    }\n\n    // STEP 6\n    async function callApi(newApiParams) {\n        const url = `https://alpha-vantage.p.rapidapi.com/query?${newApiParams}&datatype=json&output_size=compact`;\n        const options = {\n            method: 'GET',\n            headers: {\n                'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n                'X-RapidAPI-Host': 'alpha-vantage.p.rapidapi.com'\n            }\n        };\n        const response = await fetch(url, options);\n        const data = await response.text();\n        const trimmedData = data.replace(/\\s/g, '').substring(0, 3000);\n        return trimmedData;\n    }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}