{"ast":null,"code":"var _jsxFileName = \"/Users/aaronleek/Desktop/coding-projects/misc-projects/quick-hack-nw/Jonald - Hack/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport './normal.css';\nimport { useState } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nimport { inject } from '@vercel/analytics';\nimport Slider from 'react-slick';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ninject();\n\n// the handleSubmit front-end needs to be modified to call handleRequest if radio button is toggled yes. \n\n// envs\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\nfunction App() {\n  _s();\n  // statehooks\n  const [query, setQuery] = useState(\"\");\n  const [chatLog, setChatLog] = useState([]);\n  const [showOverlay, setShowOverlay] = useState(true);\n  const [searchLiveInfo, setSearchLiveInfo] = useState(false);\n  const [search, setSearch] = useState(\"Search\");\n  const [count, setCount] = useState(0);\n\n  //open ai auth\n  const configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey\n  });\n  const openai = new OpenAIApi(configuration);\n\n  // First completion, sets the context as Kari.ai personality.\n  async function getInitialCompletion(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      Instructions: view the first nessage and respond to it accordingly.\n      Context: You are an artificial financial advisor named Kari. \n      Conversational Style: You are a friendly, helpful, and knowledgeable financial advisor.\n      Formatting: Money in USD, \"$xxx,xxx.xx\". (print out full number, not abbreviated)\n      Abilities: The user can choose to pull in live financial data summaries for you to process. If user asks for live data, you will need to process it. If there is none, you will need to respond accordingly.\n\n      Current feature list: Live Market Information (Stocks, Crypto, ETFs, Mutual Funds, Bonds, etc.), Smart Financial Analysis on Live Market Information, Insight generation - what to buy, what to sell, what to hold, etc.\n      Current data sources: eodHistoricalData.com\n      Current Data types: Current Asset prices, Historical Asset prices, macroeconomic data, crypto fundamentals, stock fundamentals, etc.\n      Current limitation list: Max of 3 stocks requested at a time. Max of one financial statement requested at a time.\n      future plans for platform: Charting, Personalized Advice, Alternative Data Sources, Intelligent insight generation, and more. \n\n      latestMessage: ${query}\n      `,\n      max_tokens: 2048,\n      temperature: .6,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n\n  // Second completion, mainly just responds to messages in a conversational manner.\n  async function getContextCompletion(query, messages) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      Don't mention outright: Conversational Style, Context, Instructions.\n      Instructions: view the chatLog for context and respond to the latest message.\n      Context: You are an artificial financial advisor named Kari. \n\n      latestMessage: ${query}\n      chatLog: ${messages}\n      `,\n      max_tokens: 512,\n      temperature: .5,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n\n  // clearChat button function\n  function clearChat() {\n    setCount(0);\n    setChatLog([]);\n    setShowOverlay(true);\n  }\n\n  // if messages array is empty, call getInitialCompletion\n  // if messages array is not empty, call getContextCompletion\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (query.trim() && query.length > 4) {\n      let liveInfoResponse;\n      if (searchLiveInfo === true) {\n        console.log(\"Getting live Info Now\");\n        liveInfoResponse = await getLiveInfo(query);\n        console.log(liveInfoResponse);\n      } else {\n        console.log(\"User did not request live info\");\n      }\n      let chatLogNew = [...chatLog, {\n        user: \"me\",\n        message: `${query}` + (liveInfoResponse ? ` ${liveInfoResponse}` : \"\")\n      }];\n      setQuery(\"\");\n      setChatLog(chatLogNew);\n      setShowOverlay(false);\n      const messages = chatLogNew.map(message => message.message).join(\"\");\n      let data;\n      if (count === 0) {\n        console.log(\"Getting initial completion\");\n        data = await getInitialCompletion(messages);\n        setCount(count + 1);\n      } else {\n        console.log(\"Getting context completion\");\n        data = await getContextCompletion(query, messages);\n      }\n      setChatLog([...chatLogNew, {\n        user: \"gpt\",\n        message: `${data}`\n      }]);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidemenu\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"sidemenu-header\",\n        children: \"Jonald\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"sidemenu-subheader\",\n        children: \"Generate your tweet calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"side-menu-button\",\n        onClick: clearChat,\n        children: \" Clear Chat \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stock-screening-tool\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              rows: \"1\",\n              value: query,\n              onChange: e => setQuery(e.target.value),\n              className: \"chat-input-textarea\",\n              placeholder: \"Ask a question or give a command\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"submit-button\",\n              onClick: () => {\n                setSearchLiveInfo(false);\n                handleSubmit();\n              },\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"submit-button\",\n              onClick: () => {\n                setSearchLiveInfo(true);\n                handleSubmit();\n              },\n              children: search\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"below-chatbox\",\n          children: [\"February 1 version. At this stage, feedback is very crucial. If you are beta-testing, please fill out \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://forms.gle/YvjMHj8kPX7xDX2H8\",\n            target: \"_new\",\n            children: \"this form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 134\n          }, this), \" and run through the feedback questions as it will help me a lot.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"F3DPcen//OUW4M5MQg9dyxigBso=\");\n_c = App;\nconst ChatMessage = _ref => {\n  let {\n    message\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clearfix\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-message ${message.user === \"gpt\" && \"chatgpt\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-message-center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ChatMessage;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["useState","Configuration","OpenAIApi","inject","Slider","orgId","process","env","ORG_ID","apiKey","App","query","setQuery","chatLog","setChatLog","showOverlay","setShowOverlay","searchLiveInfo","setSearchLiveInfo","search","setSearch","count","setCount","configuration","openai","getInitialCompletion","response","createCompletion","model","prompt","max_tokens","temperature","stop","data","choices","text","getContextCompletion","messages","clearChat","handleSubmit","e","preventDefault","trim","length","liveInfoResponse","console","log","getLiveInfo","chatLogNew","user","message","map","join","index","target","value","ChatMessage"],"sources":["/Users/aaronleek/Desktop/coding-projects/misc-projects/quick-hack-nw/Jonald - Hack/src/App.js"],"sourcesContent":["import './App.css';\nimport './normal.css'\nimport { useState } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nimport { inject } from '@vercel/analytics';\nimport Slider from 'react-slick';\n\n\ninject();\n\n// the handleSubmit front-end needs to be modified to call handleRequest if radio button is toggled yes. \n\n\n// envs\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\n\n\nfunction App() {\n\n  // statehooks\n  const [query, setQuery] = useState(\"\");\n  const [chatLog, setChatLog] = useState([])\n  const [showOverlay, setShowOverlay] = useState(true);\n  const [searchLiveInfo, setSearchLiveInfo] = useState(false);\n  const [search, setSearch] = useState(\"Search\");\n  const [count, setCount] = useState(0);\n\n\n  //open ai auth\n  const configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n  });\n  const openai = new OpenAIApi(configuration);\n\n// First completion, sets the context as Kari.ai personality.\n  async function getInitialCompletion(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      Instructions: view the first nessage and respond to it accordingly.\n      Context: You are an artificial financial advisor named Kari. \n      Conversational Style: You are a friendly, helpful, and knowledgeable financial advisor.\n      Formatting: Money in USD, \"$xxx,xxx.xx\". (print out full number, not abbreviated)\n      Abilities: The user can choose to pull in live financial data summaries for you to process. If user asks for live data, you will need to process it. If there is none, you will need to respond accordingly.\n\n      Current feature list: Live Market Information (Stocks, Crypto, ETFs, Mutual Funds, Bonds, etc.), Smart Financial Analysis on Live Market Information, Insight generation - what to buy, what to sell, what to hold, etc.\n      Current data sources: eodHistoricalData.com\n      Current Data types: Current Asset prices, Historical Asset prices, macroeconomic data, crypto fundamentals, stock fundamentals, etc.\n      Current limitation list: Max of 3 stocks requested at a time. Max of one financial statement requested at a time.\n      future plans for platform: Charting, Personalized Advice, Alternative Data Sources, Intelligent insight generation, and more. \n\n      latestMessage: ${query}\n      `,\n      max_tokens: 2048,\n      temperature: .6,\n      stop: \"/n\",\n    });\n    return response.data.choices[0].text;\n  }\n\n// Second completion, mainly just responds to messages in a conversational manner.\n  async function getContextCompletion(query, messages) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      Don't mention outright: Conversational Style, Context, Instructions.\n      Instructions: view the chatLog for context and respond to the latest message.\n      Context: You are an artificial financial advisor named Kari. \n\n      latestMessage: ${query}\n      chatLog: ${messages}\n      `,\n      max_tokens: 512,\n      temperature: .5,\n      stop: \"/n\",\n    });\n    return response.data.choices[0].text;\n  }\n\n  // clearChat button function\n  function clearChat(){\n    setCount(0);\n    setChatLog([]);\n    setShowOverlay(true);\n  }\n\n\n  // if messages array is empty, call getInitialCompletion\n  // if messages array is not empty, call getContextCompletion\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (query.trim() && query.length > 4) {\n      let liveInfoResponse;\n      if (searchLiveInfo === (true)) {\n        console.log(\"Getting live Info Now\");\n        liveInfoResponse = await getLiveInfo(query);\n        console.log(liveInfoResponse);\n      } else {\n        console.log(\"User did not request live info\");\n      }\n      let chatLogNew = [...chatLog, { user: \"me\", message: `${query}` + (liveInfoResponse ? ` ${liveInfoResponse}` : \"\")}];\n      setQuery(\"\");\n      setChatLog(chatLogNew);\n      setShowOverlay(false);\n      const messages = chatLogNew.map((message) => message.message).join(\"\");\n      let data;\n      if (count === 0) {\n        console.log(\"Getting initial completion\");\n        data = await getInitialCompletion(messages);\n        setCount(count + 1);\n      } else {\n        console.log(\"Getting context completion\");\n        data = await getContextCompletion(query, messages);\n      }\n      setChatLog([...chatLogNew, { user: \"gpt\", message: `${data}`}]);\n    }\n  }\n  \n\n\n\n  return (\n    <div className=\"App\">\n<aside className=\"sidemenu\"> \n  <h3 className=\"sidemenu-header\">Jonald</h3>\n  <h4 className=\"sidemenu-subheader\">Generate your tweet calendar</h4>\n   <button className=\"side-menu-button\" onClick={clearChat}> Clear Chat </button> \n   </aside>\n      <section className=\"chatbox\">\n        <div className=\"chat-log\">\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n    </div>\n    <div className=\"chat-input-holder\">\n    <div className=\"stock-screening-tool\">\n      <form onSubmit={handleSubmit}> \n        <input \n          rows=\"1\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          className=\"chat-input-textarea\"\n          placeholder=\"Ask a question or give a command\"></input>\n\n        <button className=\"submit-button\" onClick={() => {setSearchLiveInfo(false); handleSubmit();}}>Send</button>\n        <button className=\"submit-button\" onClick={() => {setSearchLiveInfo(true); handleSubmit()}}>{search}</button>\n      </form>\n    </div>\n  <p className='below-chatbox'>February 1 version. At this stage, feedback is very crucial. If you are beta-testing, please fill out <a href=\"https://forms.gle/YvjMHj8kPX7xDX2H8\" target=\"_new\">this form</a> and run through the feedback questions as it will help me a lot.</p>\n</div>\n</section>\n</div>\n  );\n}\n\nconst ChatMessage = ({ message }) => {\n  return (\n    <div className=\"clearfix\">\n    <div className={`chat-message ${message.user === \"gpt\" && \"chatgpt\"}`}>\n    <div className=\"chat-message-center\">\n    </div> \n    <div className=\"message\">\n      {message.message}\n  </div>\n</div>\n</div>\n  )\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}