{"ast":null,"code":"var _jsxFileName = \"/Users/aaronleek/Desktop/coding-projects/afc/Merged/kari-full-stack/Kari_Client_Server/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport './normal.css';\nimport { useState } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nimport { inject } from '@vercel/analytics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ninject();\nconst orgId = \"org-9HfRDuLSYdMqot8sxBpkd5A0\";\nconst apiKey = \"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\";\nconst eodApi = \"63a2477acc2587.58203009\";\nfunction App() {\n  _s();\n  // state hooks\n  const [stockName, setStockname] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([]);\n  const [showOverlay, setShowOverlay] = useState(true);\n  const [interval, setInterval] = useState(\"5m\");\n  const [from, setFrom] = useState(\"\");\n  const [to, setTo] = useState(\"\");\n\n  // openAI auth\n  const configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey\n  });\n  const openai = new OpenAIApi(configuration);\n\n  // main prompter, runs off context\n  async function getCompletion(message) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\"You are an artificial financial & investment advisor named Kari. When a user has a response that is non-conversational, simply affirmative, or you don't quite know how to respond to, just talk about your abilities again.  Don't correct the user's punctuation if they're lacking it. Ask one question at a time when lacking helpful context. Here is the prompt: ${message}\"`,\n      max_tokens: 500,\n      temperature: .7,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n\n  // prompter that decides what an input is most likely asking\n  async function standardizeInput() {\n    try {\n      const evaluation = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `View the input, and then select from a list of options what the user is trying to do. RESPOND ONLY WITH THE TITLE OF THE OPTION IN THE PARENTHESIS. DO NOT ADD ANY OTHER COMMENTARY.\"${input}\"\n                       Option 1 (real-time). Getting current price of a specific stock?(if this, respond only with real-time)\n                       Option 2 (fundamentals). Getting fundamentals of a cryptocurrency or stock(if this, respond only with fundamentals)\n                       Option 3 (insider-transactions). Getting insider transactions(if this, respond only with insider-transactions)\n                       Option 4 (calendar/earnings). Getting upcoming earnings of a stock(if this, respond only with calendar/earnings\n                       Option 5 (calendar/ipos). Getting upcoming ipo filings, (if this, respond only with calendar/ipos))`,\n        max_tokens: 250,\n        temperature: .5,\n        stop: \"/n\"\n      });\n      console.log(evaluation);\n      const evaluationText = evaluation.data.choices[0].text.toLowerCase();\n      console.log(evaluationText);\n      let standardizedInput;\n      if (evaluationText.includes(\"real-time\")) {\n        const reformattedInput = await openai.createCompletion({\n          model: \"text-davinci-002\",\n          prompt: `extract the specific stock being discussed in this input, and respond only with the stock symbol. For example, if the input is asking for the price of apple stock, you can recognize that and respond only with AAPL.${input}`,\n          max_tokens: 250,\n          temperature: .3,\n          stop: \"/n\"\n        });\n        console.log(reformattedInput);\n        standardizedInput = reformattedInput.data.choices[0].text;\n      }\n      if (evaluation.includes(\"option-two\")) {\n        const reformattedInput = await openai.createCompletion({\n          model: \"text-davinci-002\",\n          prompt: `Extract the specific stock being discussed in this input, and respond only with the stock symbol. For example, if the input is asking for the price of apple stock, you can recognize that and respond only with AAPL. There might be questions about crypto currency pairs as well. So if someone asks about the price of bitcoin, you would respond with BTC-USD only.\"${input}\"`,\n          max_tokens: 250,\n          temperature: .3,\n          stop: \"/n\"\n        });\n        console.log(reformattedInput);\n        standardizedInput = reformattedInput.data.choices[0].text;\n      }\n      if (evaluation.includes(\"option-three\")) {\n        const reformattedInput = await openai.createCompletion({\n          model: \"text-davinci-002\",\n          prompt: `Extract the specific stock and time range in this input, and respond only with the stock symbol, the from time, and the to time Format it like ( insider-transactions | stockName | from | to ).\"${input}\"`,\n          max_tokens: 250,\n          temperature: .3,\n          stop: \"/n\"\n        });\n        console.log(reformattedInput);\n        standardizedInput = reformattedInput.data.choices[0].text;\n      }\n      if (evaluation.includes(\"option-five\")) {\n        const reformattedInput = await openai.createCompletion({\n          model: \"text-davinci-002\",\n          prompt: `Extract the specific stock and time range in this input, and respond only with the stock symbol, the from time, and the to time Format it like ( calendar/earnings | stockName | from | to ).\"${input}\"`,\n          max_tokens: 250,\n          temperature: .3,\n          stop: \"/n\"\n        });\n        console.log(reformattedInput);\n        standardizedInput = reformattedInput.data.choices[0].text;\n      }\n      if (evaluation.includes(\"option-six\")) {\n        const reformattedInput = await openai.createCompletion({\n          model: \"text-davinci-002\",\n          prompt: `Extract the specific stock and time range in this input, and respond only with the stock symbol, the from time, and the to time Format it like ( calendar/ipos | from | to ).\"${input}\"`,\n          max_tokens: 250,\n          temperature: .3,\n          stop: \"/n\"\n        });\n        console.log(reformattedInput);\n        standardizedInput = reformattedInput.data.choices[0].text;\n      }\n      {\n        standardizedInput = input;\n        console.log(standardizedInput);\n      }\n      return standardizedInput; // Return the standardized input\n    } catch (error) {\n      console.error(error);\n      return \"Error occurred while processing input, please try again later.\";\n    }\n  }\n  async function apiStandardize(standardizedInput) {\n    const evaluation = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `Your job is to take in the standardizedInput and apply it formatting to it. \n                 Replace {action} with the first item in the standardizedInput.\n                 If you see a stock symbol or crypto pairing, change nothing about it, and replace {stockName} with it.\n                 If you see a from time, convert it to UNIX and add &from= to it.\n                 If you see a to time, convert it to UNIX and add &to= to it.\n                 Respond with the link constructed from api/ onwards. Do not add any other commentary or quotes.\n                 https://eodhistoricaldata.com/api/{action}/{stockName}.US?api_token=63a2477acc2587.58203009&interval={interval}&fmt=json\n                 ${standardizedInput}`\n    });\n    return evaluation.data.choices[0].text;\n  }\n  console.log(apiStandardize);\n  async function handleSubmit(e) {\n    e.preventDefault();\n    let chatLogNew = [...chatLog];\n    setInput(\"\");\n    setShowOverlay(false);\n    setStockname(\"\");\n    setInterval(\"\");\n    setFrom(\"\");\n    setTo(\"\");\n    if (input.trim() && input.length > 4) {\n      const messages = chatLogNew.map(message => message.message).join(\"\");\n      chatLogNew.push({\n        user: \"me\",\n        message: `${input}`\n      });\n      const standardizedInput = await standardizeInput();\n      console.log(standardizedInput);\n      const pattern = /(?<stockName>\\b[A-Z]+\\b) \\| (?<from>\\b\\d{1,2}\\/\\d{1,2}\\/\\d{4}\\b) \\| (?<to>\\b\\d{1,2}\\/\\d{1,2}\\/\\d{4}\\b) \\| (?<interval>\\b[0-9]*[mhd]\\b)/;\n      const match = standardizedInput.match(pattern);\n      if (match) {\n        const {\n          stockName,\n          from,\n          to,\n          interval\n        } = match.groups;\n        console.log(stockName, from, to, interval);\n        console.log(\"It's a match! Converting to and from to UNIX\");\n        const unixFrom = Math.floor(new Date(from).getTime() / 1000);\n        const unixTo = Math.floor(new Date(to).getTime() / 1000);\n        console.log(unixFrom, unixTo);\n        try {\n          console.log(\"Sending request\");\n          const url = `https://eodhistoricaldata.com/api/search/${stockName}.US?api_token=${eodApi}&interval=${interval}&fmt=json`;\n          console.log(url);\n          const response = await fetch(url);\n          const data = await response.json();\n          console.log(\"Data Received, analyzing now!\", data);\n          const botResponse = await analyzeData(data);\n          chatLogNew.push({\n            user: \"gpt\",\n            message: `${botResponse}`\n          });\n          setChatLog(chatLogNew);\n          console.log(botResponse);\n        } catch (error) {\n          console.error(error);\n        }\n        return;\n      } else {\n        console.log(\"Regular expression did not match input.\");\n      }\n      const data = await getCompletion(messages);\n      chatLogNew.push({\n        user: \"gpt\",\n        message: `${data}`\n      });\n    }\n    setChatLog(chatLogNew);\n  }\n  async function analyzeData(data) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\"You are an artifical stock analyst. Summarize this financial data to the user in a high level, insightful and friendly manner. Here is the user's question ${input}. Here is the data, it was returned from EODHistoricalData.com ${JSON.stringify(data)}\"`,\n      max_tokens: 3000,\n      temperature: .5,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n  function clearChat() {\n    setChatLog([]);\n    setShowOverlay(true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidemenu\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"sidemenu-header\",\n        children: \"Kari\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"side-menu-button\",\n        onClick: clearChat,\n        children: \" Clear Chat \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"side-menu-button\",\n        onClick: () => window.open(\"https://forms.gle/6rQ4nsWddMqPgsCw9\"),\n        children: \" Join Waitlist \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [showOverlay && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Kari.ai Financial Advisor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overlay-card-columns\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overlay-card-column-example\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Example Prompts:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: () => setInput(\"What is the current stock price for SPY?\"),\n              children: \"\\\"What is the current stock price for SPY?\\\"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: () => setInput(\"What are the best investment options for someone in their 20s with a moderate level of risk tolerance?\"),\n              children: \"\\\"What are the best investment options for someone in their 20s with a moderate level of risk tolerance?\\\"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: () => setInput(\"What is your name and how can you actually help me with my finances?\"),\n              children: \"\\\"What is your name and how can you actually help me with my finances?\\\"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overlay-card-column\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Current Limitations:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"The chat may not have access to the most recent data on financial topics.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"The chat does not have access to the user's personal financial situation or other relevant context.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"The chat's answers may be limited by the quality and clarity of the prompts it receives.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overlay-card-column\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Future Features:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Save Threads\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Access to More Financial Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Charting & Data Visualization\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"And more!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stock-screening-tool\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              rows: \"1\",\n              value: input,\n              onChange: e => setInput(e.target.value),\n              className: \"chat-input-textarea\",\n              placeholder: \"Ask a question or give a command\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"submit-button\",\n              onClick: () => {\n                handleSubmit();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"below-chatbox\",\n          children: [\"January 12 version. At this stage, feedback is very crucial. If you are beta-testing, please fill out \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://forms.gle/YvjMHj8kPX7xDX2H8\",\n            target: \"_new\",\n            children: \"this form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 134\n          }, this), \" and run through the feedback questions as it will help me a lot.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ElUhPXc2nHrEksaSX7NDCcCIjRU=\");\n_c = App;\nconst ChatMessage = _ref => {\n  let {\n    message\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clearfix\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-message ${message.user === \"gpt\" && \"chatgpt\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-message-center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ChatMessage;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["useState","Configuration","OpenAIApi","inject","orgId","apiKey","eodApi","App","stockName","setStockname","input","setInput","chatLog","setChatLog","showOverlay","setShowOverlay","interval","setInterval","from","setFrom","to","setTo","configuration","openai","getCompletion","message","response","createCompletion","model","prompt","max_tokens","temperature","stop","data","choices","text","standardizeInput","evaluation","console","log","evaluationText","toLowerCase","standardizedInput","includes","reformattedInput","error","apiStandardize","handleSubmit","e","preventDefault","chatLogNew","trim","length","messages","map","join","push","user","pattern","match","groups","unixFrom","Math","floor","Date","getTime","unixTo","url","fetch","json","botResponse","analyzeData","JSON","stringify","clearChat","window","open","index","target","value","ChatMessage"],"sources":["/Users/aaronleek/Desktop/coding-projects/afc/Merged/kari-full-stack/Kari_Client_Server/src/App.js"],"sourcesContent":["import './App.css';\nimport './normal.css'\nimport { useState } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nimport { inject } from '@vercel/analytics';\n\ninject();\n\nconst orgId = \"org-9HfRDuLSYdMqot8sxBpkd5A0\"\nconst apiKey = \"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\"\nconst eodApi = \"63a2477acc2587.58203009\"\n\nfunction App() {\n\n\n  // state hooks\n  const [stockName, setStockname] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([])\n  const [showOverlay, setShowOverlay] = useState(true);\n  const [interval, setInterval] = useState(\"5m\");\n  const [from, setFrom] = useState(\"\");\n  const [to, setTo] = useState(\"\");\n\n\n  // openAI auth\n  const configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n  });\n  const openai = new OpenAIApi(configuration);\n\n  // main prompter, runs off context\n  async function getCompletion(message) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\"You are an artificial financial & investment advisor named Kari. When a user has a response that is non-conversational, simply affirmative, or you don't quite know how to respond to, just talk about your abilities again.  Don't correct the user's punctuation if they're lacking it. Ask one question at a time when lacking helpful context. Here is the prompt: ${message}\"`,\n      max_tokens: 500,\n      temperature: .7,\n      stop: \"/n\",\n    });\n    return response.data.choices[0].text;\n  }\n\n\n    // prompter that decides what an input is most likely asking\n    async function standardizeInput() {\n      try {\n          const evaluation = await openai.createCompletion({\n              model: \"text-davinci-003\",\n              prompt: `View the input, and then select from a list of options what the user is trying to do. RESPOND ONLY WITH THE TITLE OF THE OPTION IN THE PARENTHESIS. DO NOT ADD ANY OTHER COMMENTARY.\"${input}\"\n                       Option 1 (real-time). Getting current price of a specific stock?(if this, respond only with real-time)\n                       Option 2 (fundamentals). Getting fundamentals of a cryptocurrency or stock(if this, respond only with fundamentals)\n                       Option 3 (insider-transactions). Getting insider transactions(if this, respond only with insider-transactions)\n                       Option 4 (calendar/earnings). Getting upcoming earnings of a stock(if this, respond only with calendar/earnings\n                       Option 5 (calendar/ipos). Getting upcoming ipo filings, (if this, respond only with calendar/ipos))`,\n              max_tokens: 250,\n              temperature: .5,\n              stop: \"/n\",\n          });\n          console.log(evaluation)\n          const evaluationText = evaluation.data.choices[0].text.toLowerCase();\n          console.log(evaluationText);\n          let standardizedInput; \n          if (evaluationText.includes(\"real-time\")) {\n              const reformattedInput = await openai.createCompletion({\n                  model: \"text-davinci-002\",\n                  prompt: `extract the specific stock being discussed in this input, and respond only with the stock symbol. For example, if the input is asking for the price of apple stock, you can recognize that and respond only with AAPL.${input}`,\n                  max_tokens: 250,\n                  temperature: .3,\n                  stop: \"/n\",\n              });\n              console.log(reformattedInput);\n              standardizedInput = reformattedInput.data.choices[0].text;\n          }\n          if (evaluation.includes(\"option-two\")) {\n              const reformattedInput = await openai.createCompletion({\n                  model: \"text-davinci-002\",\n                  prompt: `Extract the specific stock being discussed in this input, and respond only with the stock symbol. For example, if the input is asking for the price of apple stock, you can recognize that and respond only with AAPL. There might be questions about crypto currency pairs as well. So if someone asks about the price of bitcoin, you would respond with BTC-USD only.\"${input}\"`,\n                  max_tokens: 250,\n                  temperature: .3,\n                  stop: \"/n\",\n              });\n              console.log(reformattedInput);\n              standardizedInput = reformattedInput.data.choices[0].text;\n          } \n          if (evaluation.includes(\"option-three\")) {\n            const reformattedInput = await openai.createCompletion({\n                model: \"text-davinci-002\",\n                prompt: `Extract the specific stock and time range in this input, and respond only with the stock symbol, the from time, and the to time Format it like ( insider-transactions | stockName | from | to ).\"${input}\"`,\n                max_tokens: 250,\n                temperature: .3,\n                stop: \"/n\",\n            });\n            console.log(reformattedInput);\n            standardizedInput = reformattedInput.data.choices[0].text;\n        }\n        if (evaluation.includes(\"option-five\")) {\n          const reformattedInput = await openai.createCompletion({\n              model: \"text-davinci-002\",\n              prompt: `Extract the specific stock and time range in this input, and respond only with the stock symbol, the from time, and the to time Format it like ( calendar/earnings | stockName | from | to ).\"${input}\"`,\n              max_tokens: 250,\n              temperature: .3,\n              stop: \"/n\",\n          });\n          console.log(reformattedInput);\n          standardizedInput = reformattedInput.data.choices[0].text;\n      }\n      if (evaluation.includes(\"option-six\")) {\n        const reformattedInput = await openai.createCompletion({\n            model: \"text-davinci-002\",\n            prompt: `Extract the specific stock and time range in this input, and respond only with the stock symbol, the from time, and the to time Format it like ( calendar/ipos | from | to ).\"${input}\"`,\n            max_tokens: 250,\n            temperature: .3,\n            stop: \"/n\",\n        });\n        console.log(reformattedInput);\n        standardizedInput = reformattedInput.data.choices[0].text;\n        }     \n        {\n          standardizedInput = input;\n          console.log(standardizedInput);\n        }\n          return standardizedInput; // Return the standardized input\n      } catch (error) {\n          console.error(error);\n          return \"Error occurred while processing input, please try again later.\";\n      }\n  }\n\n  async function apiStandardize(standardizedInput) {\n      const evaluation = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `Your job is to take in the standardizedInput and apply it formatting to it. \n                 Replace {action} with the first item in the standardizedInput.\n                 If you see a stock symbol or crypto pairing, change nothing about it, and replace {stockName} with it.\n                 If you see a from time, convert it to UNIX and add &from= to it.\n                 If you see a to time, convert it to UNIX and add &to= to it.\n                 Respond with the link constructed from api/ onwards. Do not add any other commentary or quotes.\n                 https://eodhistoricaldata.com/api/{action}/{stockName}.US?api_token=63a2477acc2587.58203009&interval={interval}&fmt=json\n                 ${standardizedInput}`\n      })      \n    return evaluation.data.choices[0].text;\n  } console.log(apiStandardize)\n\n  \n  async function handleSubmit(e) {\n    e.preventDefault();\n    let chatLogNew = [...chatLog,]\n    setInput(\"\");\n    setShowOverlay(false);\n    setStockname(\"\");\n    setInterval(\"\");\n    setFrom(\"\");\n    setTo(\"\");\n\n    if (input.trim() && input.length > 4) {\n      const messages = chatLogNew.map((message) => message.message).join(\"\");\n      chatLogNew.push({ user: \"me\", message: `${input}`});\n      const standardizedInput = await standardizeInput();\n      console.log(standardizedInput);\n      const pattern = /(?<stockName>\\b[A-Z]+\\b) \\| (?<from>\\b\\d{1,2}\\/\\d{1,2}\\/\\d{4}\\b) \\| (?<to>\\b\\d{1,2}\\/\\d{1,2}\\/\\d{4}\\b) \\| (?<interval>\\b[0-9]*[mhd]\\b)/;\n      const match = standardizedInput.match(pattern);\n      if (match) {\n        const { stockName, from, to, interval } = match.groups;\n        console.log(stockName, from, to, interval);\n        console.log(\"It's a match! Converting to and from to UNIX\")\n        const unixFrom = Math.floor(new Date(from).getTime() / 1000);\n        const unixTo = Math.floor(new Date(to).getTime() / 1000);\n        console.log(unixFrom, unixTo);\n          try {\n          console.log(\"Sending request\");\n          const url = (`https://eodhistoricaldata.com/api/search/${stockName}.US?api_token=${eodApi}&interval=${interval}&fmt=json`);\n          console.log(url);\n          const response = await fetch(url);\n          const data = await response.json();\n          console.log(\"Data Received, analyzing now!\", data);\n          const botResponse = await analyzeData(data);\n          chatLogNew.push({ user: \"gpt\", message: `${botResponse}`});\n          setChatLog(chatLogNew);\n          console.log(botResponse);\n        } catch (error) {\n          console.error(error)\n        }\n        return;\n      } else {\n        console.log(\"Regular expression did not match input.\");\n      }\n      const data = await getCompletion(messages);\n      chatLogNew.push({ user: \"gpt\", message: `${data}`});\n    }\n    setChatLog(chatLogNew);\n  }\n  \n\n  async function analyzeData(data) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\"You are an artifical stock analyst. Summarize this financial data to the user in a high level, insightful and friendly manner. Here is the user's question ${input}. Here is the data, it was returned from EODHistoricalData.com ${JSON.stringify(data)}\"`,\n      max_tokens: 3000,\n      temperature: .5,\n      stop: \"/n\",\n      });\n      return response.data.choices[0].text;\n  }\n\n  function clearChat(){\n    setChatLog([]);\n    setShowOverlay(true);\n  }\n\n  return (\n    <div className=\"App\">\n<aside className=\"sidemenu\"> \n  <h3 className=\"sidemenu-header\">Kari</h3>\n   <button className=\"side-menu-button\" onClick={clearChat}> Clear Chat </button> \n   <button className=\"side-menu-button\" onClick={() => window.open(\"https://forms.gle/6rQ4nsWddMqPgsCw9\")}> Join Waitlist </button> \n   </aside>\n      <section className=\"chatbox\">\n      {showOverlay && (\n          <div className=\"overlay-card\">\n            <div>\n              <h2>Kari.ai Financial Advisor</h2>\n            </div>\n          <div className=\"overlay-card-columns\">\n            <div className=\"overlay-card-column-example\">\n              <h3>Example Prompts:</h3>\n              <p onClick={() => setInput(\"What is the current stock price for SPY?\")}>\"What is the current stock price for SPY?\"</p>\n              <p onClick={() => setInput(\"What are the best investment options for someone in their 20s with a moderate level of risk tolerance?\")}>\"What are the best investment options for someone in their 20s with a moderate level of risk tolerance?\"</p>\n              <p onClick={() => setInput(\"What is your name and how can you actually help me with my finances?\")}>\"What is your name and how can you actually help me with my finances?\"</p>\n            </div>\n            <div className=\"overlay-card-column\">\n              <h3>Current Limitations:</h3>\n              <p>The chat may not have access to the most recent data on financial topics.</p>\n              <p>The chat does not have access to the user's personal financial situation or other relevant context.</p>\n              <p>The chat's answers may be limited by the quality and clarity of the prompts it receives.</p>\n            </div>\n            <div className=\"overlay-card-column\">\n              <h3>Future Features:</h3>\n              <p>Save Threads</p>\n              <p>Access to More Financial Data</p>\n              <p>Charting & Data Visualization</p>\n              <p>And more!</p>\n            </div>\n          </div>\n        </div>        \n        )}\n        <div className=\"chat-log\">\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n    </div>\n    <div className=\"chat-input-holder\">\n  <div className=\"stock-screening-tool\">\n    <form onSubmit={handleSubmit}>\n      <input \n        rows=\"1\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        className=\"chat-input-textarea\"\n        placeholder=\"Ask a question or give a command\"\n      />\n      <button className=\"submit-button\" onClick={() => {handleSubmit();}}></button>\n    </form>\n  </div>\n  <p className='below-chatbox'>January 12 version. At this stage, feedback is very crucial. If you are beta-testing, please fill out <a href=\"https://forms.gle/YvjMHj8kPX7xDX2H8\" target=\"_new\">this form</a> and run through the feedback questions as it will help me a lot.</p>\n</div>\n</section>\n</div>\n  );\n}\n\n\nconst ChatMessage = ({ message }) => {\n  return (\n    <div className=\"clearfix\">\n    <div className={`chat-message ${message.user === \"gpt\" && \"chatgpt\"}`}>\n    <div className=\"chat-message-center\">\n    </div> \n    <div className=\"message\">\n      {message.message}\n  </div>\n</div>\n</div>\n  )\n}\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAO,cAAc;AACrB,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AACjD,SAASC,MAAM,QAAQ,mBAAmB;AAAC;AAE3CA,MAAM,EAAE;AAER,MAAMC,KAAK,GAAG,8BAA8B;AAC5C,MAAMC,MAAM,GAAG,qDAAqD;AACpE,MAAMC,MAAM,GAAG,yBAAyB;AAExC,SAASC,GAAG,GAAG;EAAA;EAGb;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACkB,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACoB,EAAE,EAAEC,KAAK,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;;EAGhC;EACA,MAAMsB,aAAa,GAAG,IAAIrB,aAAa,CAAC;IACtCG,KAAK,EAAEA,KAAK;IACZC,MAAM,EAAEA;EACV,CAAC,CAAC;EACF,MAAMkB,MAAM,GAAG,IAAIrB,SAAS,CAACoB,aAAa,CAAC;;EAE3C;EACA,eAAeE,aAAa,CAACC,OAAO,EAAE;IACpC,MAAMC,QAAQ,GAAG,MAAMH,MAAM,CAACI,gBAAgB,CAAC;MAC7CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAG,2WAA0WJ,OAAQ,GAAE;MAC7XK,UAAU,EAAE,GAAG;MACfC,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;IACR,CAAC,CAAC;IACF,OAAON,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;EACtC;;EAGE;EACA,eAAeC,gBAAgB,GAAG;IAChC,IAAI;MACA,MAAMC,UAAU,GAAG,MAAMd,MAAM,CAACI,gBAAgB,CAAC;QAC7CC,KAAK,EAAE,kBAAkB;QACzBC,MAAM,EAAG,wLAAuLnB,KAAM;AACpN;AACA;AACA;AACA;AACA,2HAA2H;QAC7GoB,UAAU,EAAE,GAAG;QACfC,WAAW,EAAE,EAAE;QACfC,IAAI,EAAE;MACV,CAAC,CAAC;MACFM,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;MACvB,MAAMG,cAAc,GAAGH,UAAU,CAACJ,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACM,WAAW,EAAE;MACpEH,OAAO,CAACC,GAAG,CAACC,cAAc,CAAC;MAC3B,IAAIE,iBAAiB;MACrB,IAAIF,cAAc,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAE;QACtC,MAAMC,gBAAgB,GAAG,MAAMrB,MAAM,CAACI,gBAAgB,CAAC;UACnDC,KAAK,EAAE,kBAAkB;UACzBC,MAAM,EAAG,yNAAwNnB,KAAM,EAAC;UACxOoB,UAAU,EAAE,GAAG;UACfC,WAAW,EAAE,EAAE;UACfC,IAAI,EAAE;QACV,CAAC,CAAC;QACFM,OAAO,CAACC,GAAG,CAACK,gBAAgB,CAAC;QAC7BF,iBAAiB,GAAGE,gBAAgB,CAACX,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;MAC7D;MACA,IAAIE,UAAU,CAACM,QAAQ,CAAC,YAAY,CAAC,EAAE;QACnC,MAAMC,gBAAgB,GAAG,MAAMrB,MAAM,CAACI,gBAAgB,CAAC;UACnDC,KAAK,EAAE,kBAAkB;UACzBC,MAAM,EAAG,4WAA2WnB,KAAM,GAAE;UAC5XoB,UAAU,EAAE,GAAG;UACfC,WAAW,EAAE,EAAE;UACfC,IAAI,EAAE;QACV,CAAC,CAAC;QACFM,OAAO,CAACC,GAAG,CAACK,gBAAgB,CAAC;QAC7BF,iBAAiB,GAAGE,gBAAgB,CAACX,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;MAC7D;MACA,IAAIE,UAAU,CAACM,QAAQ,CAAC,cAAc,CAAC,EAAE;QACvC,MAAMC,gBAAgB,GAAG,MAAMrB,MAAM,CAACI,gBAAgB,CAAC;UACnDC,KAAK,EAAE,kBAAkB;UACzBC,MAAM,EAAG,oMAAmMnB,KAAM,GAAE;UACpNoB,UAAU,EAAE,GAAG;UACfC,WAAW,EAAE,EAAE;UACfC,IAAI,EAAE;QACV,CAAC,CAAC;QACFM,OAAO,CAACC,GAAG,CAACK,gBAAgB,CAAC;QAC7BF,iBAAiB,GAAGE,gBAAgB,CAACX,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;MAC7D;MACA,IAAIE,UAAU,CAACM,QAAQ,CAAC,aAAa,CAAC,EAAE;QACtC,MAAMC,gBAAgB,GAAG,MAAMrB,MAAM,CAACI,gBAAgB,CAAC;UACnDC,KAAK,EAAE,kBAAkB;UACzBC,MAAM,EAAG,iMAAgMnB,KAAM,GAAE;UACjNoB,UAAU,EAAE,GAAG;UACfC,WAAW,EAAE,EAAE;UACfC,IAAI,EAAE;QACV,CAAC,CAAC;QACFM,OAAO,CAACC,GAAG,CAACK,gBAAgB,CAAC;QAC7BF,iBAAiB,GAAGE,gBAAgB,CAACX,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;MAC7D;MACA,IAAIE,UAAU,CAACM,QAAQ,CAAC,YAAY,CAAC,EAAE;QACrC,MAAMC,gBAAgB,GAAG,MAAMrB,MAAM,CAACI,gBAAgB,CAAC;UACnDC,KAAK,EAAE,kBAAkB;UACzBC,MAAM,EAAG,iLAAgLnB,KAAM,GAAE;UACjMoB,UAAU,EAAE,GAAG;UACfC,WAAW,EAAE,EAAE;UACfC,IAAI,EAAE;QACV,CAAC,CAAC;QACFM,OAAO,CAACC,GAAG,CAACK,gBAAgB,CAAC;QAC7BF,iBAAiB,GAAGE,gBAAgB,CAACX,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;MACzD;MACA;QACEO,iBAAiB,GAAGhC,KAAK;QACzB4B,OAAO,CAACC,GAAG,CAACG,iBAAiB,CAAC;MAChC;MACE,OAAOA,iBAAiB,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZP,OAAO,CAACO,KAAK,CAACA,KAAK,CAAC;MACpB,OAAO,gEAAgE;IAC3E;EACJ;EAEA,eAAeC,cAAc,CAACJ,iBAAiB,EAAE;IAC7C,MAAML,UAAU,GAAG,MAAMd,MAAM,CAACI,gBAAgB,CAAC;MAC/CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmBa,iBAAkB;IAC/B,CAAC,CAAC;IACJ,OAAOL,UAAU,CAACJ,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;EACxC;EAAEG,OAAO,CAACC,GAAG,CAACO,cAAc,CAAC;EAG7B,eAAeC,YAAY,CAACC,CAAC,EAAE;IAC7BA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAIC,UAAU,GAAG,CAAC,GAAGtC,OAAO,CAAE;IAC9BD,QAAQ,CAAC,EAAE,CAAC;IACZI,cAAc,CAAC,KAAK,CAAC;IACrBN,YAAY,CAAC,EAAE,CAAC;IAChBQ,WAAW,CAAC,EAAE,CAAC;IACfE,OAAO,CAAC,EAAE,CAAC;IACXE,KAAK,CAAC,EAAE,CAAC;IAET,IAAIX,KAAK,CAACyC,IAAI,EAAE,IAAIzC,KAAK,CAAC0C,MAAM,GAAG,CAAC,EAAE;MACpC,MAAMC,QAAQ,GAAGH,UAAU,CAACI,GAAG,CAAE7B,OAAO,IAAKA,OAAO,CAACA,OAAO,CAAC,CAAC8B,IAAI,CAAC,EAAE,CAAC;MACtEL,UAAU,CAACM,IAAI,CAAC;QAAEC,IAAI,EAAE,IAAI;QAAEhC,OAAO,EAAG,GAAEf,KAAM;MAAC,CAAC,CAAC;MACnD,MAAMgC,iBAAiB,GAAG,MAAMN,gBAAgB,EAAE;MAClDE,OAAO,CAACC,GAAG,CAACG,iBAAiB,CAAC;MAC9B,MAAMgB,OAAO,GAAG,wIAAwI;MACxJ,MAAMC,KAAK,GAAGjB,iBAAiB,CAACiB,KAAK,CAACD,OAAO,CAAC;MAC9C,IAAIC,KAAK,EAAE;QACT,MAAM;UAAEnD,SAAS;UAAEU,IAAI;UAAEE,EAAE;UAAEJ;QAAS,CAAC,GAAG2C,KAAK,CAACC,MAAM;QACtDtB,OAAO,CAACC,GAAG,CAAC/B,SAAS,EAAEU,IAAI,EAAEE,EAAE,EAAEJ,QAAQ,CAAC;QAC1CsB,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;QAC3D,MAAMsB,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAIC,IAAI,CAAC9C,IAAI,CAAC,CAAC+C,OAAO,EAAE,GAAG,IAAI,CAAC;QAC5D,MAAMC,MAAM,GAAGJ,IAAI,CAACC,KAAK,CAAC,IAAIC,IAAI,CAAC5C,EAAE,CAAC,CAAC6C,OAAO,EAAE,GAAG,IAAI,CAAC;QACxD3B,OAAO,CAACC,GAAG,CAACsB,QAAQ,EAAEK,MAAM,CAAC;QAC3B,IAAI;UACJ5B,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9B,MAAM4B,GAAG,GAAK,4CAA2C3D,SAAU,iBAAgBF,MAAO,aAAYU,QAAS,WAAW;UAC1HsB,OAAO,CAACC,GAAG,CAAC4B,GAAG,CAAC;UAChB,MAAMzC,QAAQ,GAAG,MAAM0C,KAAK,CAACD,GAAG,CAAC;UACjC,MAAMlC,IAAI,GAAG,MAAMP,QAAQ,CAAC2C,IAAI,EAAE;UAClC/B,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEN,IAAI,CAAC;UAClD,MAAMqC,WAAW,GAAG,MAAMC,WAAW,CAACtC,IAAI,CAAC;UAC3CiB,UAAU,CAACM,IAAI,CAAC;YAAEC,IAAI,EAAE,KAAK;YAAEhC,OAAO,EAAG,GAAE6C,WAAY;UAAC,CAAC,CAAC;UAC1DzD,UAAU,CAACqC,UAAU,CAAC;UACtBZ,OAAO,CAACC,GAAG,CAAC+B,WAAW,CAAC;QAC1B,CAAC,CAAC,OAAOzB,KAAK,EAAE;UACdP,OAAO,CAACO,KAAK,CAACA,KAAK,CAAC;QACtB;QACA;MACF,CAAC,MAAM;QACLP,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACxD;MACA,MAAMN,IAAI,GAAG,MAAMT,aAAa,CAAC6B,QAAQ,CAAC;MAC1CH,UAAU,CAACM,IAAI,CAAC;QAAEC,IAAI,EAAE,KAAK;QAAEhC,OAAO,EAAG,GAAEQ,IAAK;MAAC,CAAC,CAAC;IACrD;IACApB,UAAU,CAACqC,UAAU,CAAC;EACxB;EAGA,eAAeqB,WAAW,CAACtC,IAAI,EAAE;IAC/B,MAAMP,QAAQ,GAAG,MAAMH,MAAM,CAACI,gBAAgB,CAAC;MAC7CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAG,+JAA8JnB,KAAM,kEAAiE8D,IAAI,CAACC,SAAS,CAACxC,IAAI,CAAE,GAAE;MACrQH,UAAU,EAAE,IAAI;MAChBC,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;IACN,CAAC,CAAC;IACF,OAAON,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;EACxC;EAEA,SAASuC,SAAS,GAAE;IAClB7D,UAAU,CAAC,EAAE,CAAC;IACdE,cAAc,CAAC,IAAI,CAAC;EACtB;EAEA,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBACxB;MAAO,SAAS,EAAC,UAAU;MAAA,wBACzB;QAAI,SAAS,EAAC,iBAAiB;QAAA,UAAC;MAAI;QAAA;QAAA;QAAA;MAAA,QAAK,eACxC;QAAQ,SAAS,EAAC,kBAAkB;QAAC,OAAO,EAAE2D,SAAU;QAAA,UAAC;MAAY;QAAA;QAAA;QAAA;MAAA,QAAS,eAC9E;QAAQ,SAAS,EAAC,kBAAkB;QAAC,OAAO,EAAE,MAAMC,MAAM,CAACC,IAAI,CAAC,qCAAqC,CAAE;QAAA,UAAC;MAAe;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACxH,eACL;MAAS,SAAS,EAAC,SAAS;MAAA,WAC3B9D,WAAW,iBACR;QAAK,SAAS,EAAC,cAAc;QAAA,wBAC3B;UAAA,uBACE;YAAA,UAAI;UAAyB;YAAA;YAAA;YAAA;UAAA;QAAK;UAAA;UAAA;UAAA;QAAA,QAC9B,eACR;UAAK,SAAS,EAAC,sBAAsB;UAAA,wBACnC;YAAK,SAAS,EAAC,6BAA6B;YAAA,wBAC1C;cAAA,UAAI;YAAgB;cAAA;cAAA;cAAA;YAAA,QAAK,eACzB;cAAG,OAAO,EAAE,MAAMH,QAAQ,CAAC,0CAA0C,CAAE;cAAA,UAAC;YAA0C;cAAA;cAAA;cAAA;YAAA,QAAI,eACtH;cAAG,OAAO,EAAE,MAAMA,QAAQ,CAAC,wGAAwG,CAAE;cAAA,UAAC;YAAwG;cAAA;cAAA;cAAA;YAAA,QAAI,eAClP;cAAG,OAAO,EAAE,MAAMA,QAAQ,CAAC,sEAAsE,CAAE;cAAA,UAAC;YAAsE;cAAA;cAAA;cAAA;YAAA,QAAI;UAAA;YAAA;YAAA;YAAA;UAAA,QAC1K,eACN;YAAK,SAAS,EAAC,qBAAqB;YAAA,wBAClC;cAAA,UAAI;YAAoB;cAAA;cAAA;cAAA;YAAA,QAAK,eAC7B;cAAA,UAAG;YAAyE;cAAA;cAAA;cAAA;YAAA,QAAI,eAChF;cAAA,UAAG;YAAmG;cAAA;cAAA;cAAA;YAAA,QAAI,eAC1G;cAAA,UAAG;YAAwF;cAAA;cAAA;cAAA;YAAA,QAAI;UAAA;YAAA;YAAA;YAAA;UAAA,QAC3F,eACN;YAAK,SAAS,EAAC,qBAAqB;YAAA,wBAClC;cAAA,UAAI;YAAgB;cAAA;cAAA;cAAA;YAAA,QAAK,eACzB;cAAA,UAAG;YAAY;cAAA;cAAA;cAAA;YAAA,QAAI,eACnB;cAAA,UAAG;YAA6B;cAAA;cAAA;cAAA;YAAA,QAAI,eACpC;cAAA,UAAG;YAA6B;cAAA;cAAA;cAAA;YAAA,QAAI,eACpC;cAAA,UAAG;YAAS;cAAA;cAAA;cAAA;YAAA,QAAI;UAAA;YAAA;YAAA;YAAA;UAAA,QACZ;QAAA;UAAA;UAAA;UAAA;QAAA,QACF;MAAA;QAAA;QAAA;QAAA;MAAA,QAEP,eACD;QAAK,SAAS,EAAC,UAAU;QAAA,UACtBC,OAAO,CAAC0C,GAAG,CAAC,CAAC7B,OAAO,EAAEoD,KAAK,kBAC1B,QAAC,WAAW;UAAa,OAAO,EAAEpD;QAAQ,GAAxBoD,KAAK;UAAA;UAAA;UAAA;QAAA,QACxB;MAAC;QAAA;QAAA;QAAA;MAAA,QACF,eACN;QAAK,SAAS,EAAC,mBAAmB;QAAA,wBACpC;UAAK,SAAS,EAAC,sBAAsB;UAAA,uBACnC;YAAM,QAAQ,EAAE9B,YAAa;YAAA,wBAC3B;cACE,IAAI,EAAC,GAAG;cACR,KAAK,EAAErC,KAAM;cACb,QAAQ,EAAGsC,CAAC,IAAKrC,QAAQ,CAACqC,CAAC,CAAC8B,MAAM,CAACC,KAAK,CAAE;cAC1C,SAAS,EAAC,qBAAqB;cAC/B,WAAW,EAAC;YAAkC;cAAA;cAAA;cAAA;YAAA,QAC9C,eACF;cAAQ,SAAS,EAAC,eAAe;cAAC,OAAO,EAAE,MAAM;gBAAChC,YAAY,EAAE;cAAC;YAAE;cAAA;cAAA;cAAA;YAAA,QAAU;UAAA;YAAA;YAAA;YAAA;UAAA;QACxE;UAAA;UAAA;UAAA;QAAA,QACH,eACN;UAAG,SAAS,EAAC,eAAe;UAAA,WAAC,wGAAsG;YAAG,IAAI,EAAC,qCAAqC;YAAC,MAAM,EAAC,MAAM;YAAA,UAAC;UAAS;YAAA;YAAA;YAAA;UAAA,QAAI,qEAAiE;QAAA;UAAA;UAAA;UAAA;QAAA,QAAI;MAAA;QAAA;QAAA;QAAA;MAAA,QAC7Q;IAAA;MAAA;MAAA;MAAA;IAAA,QACI;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEN;AAAC,GAlQQxC,GAAG;AAAA,KAAHA,GAAG;AAqQZ,MAAMyE,WAAW,GAAG,QAAiB;EAAA,IAAhB;IAAEvD;EAAQ,CAAC;EAC9B,oBACE;IAAK,SAAS,EAAC,UAAU;IAAA,uBACzB;MAAK,SAAS,EAAG,gBAAeA,OAAO,CAACgC,IAAI,KAAK,KAAK,IAAI,SAAU,EAAE;MAAA,wBACtE;QAAK,SAAS,EAAC;MAAqB;QAAA;QAAA;QAAA;MAAA,QAC9B,eACN;QAAK,SAAS,EAAC,SAAS;QAAA,UACrBhC,OAAO,CAACA;MAAO;QAAA;QAAA;QAAA;MAAA,QACd;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QACA;AAEN,CAAC;AAAA,MAZKuD,WAAW;AAajB,eAAezE,GAAG;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}