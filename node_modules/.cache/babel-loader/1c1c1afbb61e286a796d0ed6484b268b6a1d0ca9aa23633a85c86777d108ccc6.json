{"ast":null,"code":"const {\n  Configuration,\n  OpenAIApi\n} = require('openai');\n\n// Determine request type, if request type with dates, extract dates, form apiLink constructors, apiCall, summarizeApiCallData\t\n\nconst orgId = process.env.ORG_ID;\nconst apiKey = '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';\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport function AlphaVantage(query) {\n  workflow(query).then(result => {\n    console.log(result);\n  });\n\n  // this needs to be modified so that it is a conditional statement that checks the request type and then runs the function within the conditional statement. So, if the request type is one, I wan to have \n  async function workflow(query) {\n    console.log(\"AlphaVantage called with query:\", query);\n    console.log(\"Determining Request Type...\");\n    const requestType = getRequestType(query);\n    console.log(\"Request Type:\", requestType);\n    console.log(\"Extracting Info based on Request Type...\");\n    const subRequestType = await getSubRequestType(requestType, query);\n    console.log(\"Sub Request Type:\", subRequestType);\n    const extractedInfo = await extractInfo(requestType, query);\n    console.log(\"Extracting Sub Request Type Info...\");\n    const extractedSubInfo = await extractSubInfo(subRequestType, query);\n    console.log(\"Forming API Links...\");\n    const apiLink = await formApiLink(requestType, subRequestType, extractedInfo, extractedSubInfo);\n    console.log(\"API Link:\", apiLink);\n    console.log(\"Calling API...\");\n    const apiCallData = await callApi(apiLink);\n    console.log(\"API Call:\", apiCallData);\n    console.log(\"Summarizing API Call Data...\");\n    const summarizedApiCallData = await summarizeApiCallData(requestType, subRequestType, apiCallData);\n    console.log(\"Summarized API Call Data:\", summarizedApiCallData);\n    console.log(\"Returning Summarized API Call Data...\");\n    return summarizedApiCallData;\n  }\n  async function getRequestType(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            View the query, determine the request type, return the number associated with the request type\n            1. Core Stock APIS - Intraday, Daily, Weekly, Monthly Price Performance.\n            2. Alpha Intelligence - News & Sentiments, Winning Portfolios.\n            3. Fundamental Data - Company Overview, Income Statement, Balance Sheet, Cash Flow, Earnings, Earnings Calendar, IPO Calendar\n            4. Forex - Exchange Rates, Intraday, Daily, Weekly, Monthly\n            5. Cryptocurrency - Intraday, Daily, Weekly, Monthly\n            6. Commodities - Crude Oil(WTI), Crude Oil(Brent), Natural Gas, Copper, Aluminum, Wheat, Corn, Cotton, Sugar, Coffee, Global Commodities Index\n            7. Economic Indicators - Real GDP, Real GDP Per Capita, Treasury Yield, Federal Funds Interest Rate, CPI, Inflation, Retail Sales, Durable Goods Orders, Unemployment Rate, Nonfarm Payroll\n            8. Technical Indicators - SMA, EMA, WMA, DEMA, TEMA, TRIMA, KAMA, MAMA, T3, MACD, MACDEXT, STOCH, STOCHF, RSI, STOCHRSI, WILLR, ADX, ADXR, APO, PPO, MOM, BOP, CCI, CMO, ROC, ROCR, AROON, AROONOSC, MFI, TRIX, ULTOSC, DX, MINUS_DI, PLUS_DI, MINUS_DM, PLUS_DM, BBANDS, MIDPOINT, MIDPRICE, SAR, TRANGE, ATR, NATR, AD, ADOSC, OBV, HT_TRENDLINE, HT_SINE, HT_TRENDMODE, HT_DCPERIOD, HT_DCPHASE, HT_PHASOR\n\n            Here is the query: ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  // currently working on filling this out with the relevant data types in the docs for the different request types.\n  // Then I have to figure out how to convert the variable requestType to an int. \n  // Then I have to figure out how to return the correct function based on the requestType.\n  // Then I have to write out the rest of the workflow, which involves extracting info, forming api links, calling apis, summarizing api call data, and returning summarized api call data.\n\n  async function getSubRequestType(requestType, query) {\n    switch (requestType) {\n      case 1:\n        return await coreStockAPIs(query);\n        async function coreStockAPIs(query) {\n          const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query. Return the item in the parenthesis that corresponds to the subRequestType.\n                        1. Intraday (TIME_SERIES_INTRADAY)\n                        2. Daily (TIME_SERIES_DAILY)\n                        3. Weekly (TIME_SERIES_WEEKLY)\n                        4. Monthly (TIME_SERIES_MONTHLY)\n                        \n                        ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return response.data.choices[0].text;\n        }\n      case 2:\n        return await alphaIntelligence(query);\n        async function alphaIntelligence(query) {\n          const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return response.data.choices[0].text;\n        }\n      case 3:\n        return await fundamentalData(query);\n        async function fundamentalData(query) {\n          const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return response.data.choices[0].text;\n        }\n      case 4:\n        return await forex(query);\n        async function forex(query) {\n          const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return response.data.choices[0].text;\n        }\n      case 5:\n        return await cryptocurrency(query);\n        async function cryptocurrency(query) {\n          const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return response.data.choices[0].text;\n        }\n      case 6:\n        return await commodities(query);\n        async function commodities(query) {\n          const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return response.data.choices[0].text;\n        }\n      case 7:\n        return await economicIndicators(query);\n        async function economicIndicators(query) {\n          const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return response.data.choices[0].text;\n        }\n      case 8:\n        return await technicalIndicators(query);\n        async function technicalIndicators(query) {\n          const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n                        ${query}\n                        `,\n            max_tokens: 128,\n            temperature: 0.5\n          });\n          return response.data.choices[0].text;\n        }\n      default:\n        return 'Invalid request type';\n    }\n  }\n  async function extractInfo(requestType, query) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function extractSubInfo(subRequestType, query) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function formApiLink(requestType, extractedInfo) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function callApi(apiLink) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function summarizeApiCallData(requestType, apiCall) {}\n}\n_c = AlphaVantage;\nvar _c;\n$RefreshReg$(_c, \"AlphaVantage\");","map":{"version":3,"names":["Configuration","OpenAIApi","require","orgId","process","env","ORG_ID","apiKey","configuration","openai","AlphaVantage","query","workflow","then","result","console","log","requestType","getRequestType","subRequestType","getSubRequestType","extractedInfo","extractInfo","extractedSubInfo","extractSubInfo","apiLink","formApiLink","apiCallData","callApi","summarizedApiCallData","summarizeApiCallData","response","createCompletion","model","prompt","max_tokens","temperature","data","choices","text","coreStockAPIs","engine","alphaIntelligence","fundamentalData","forex","cryptocurrency","commodities","economicIndicators","technicalIndicators","apiCall"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/APIs/AlphaVantage.js"],"sourcesContent":["const { Configuration, OpenAIApi } = require('openai');\n\n// Determine request type, if request type with dates, extract dates, form apiLink constructors, apiCall, summarizeApiCallData\t\n\n\nconst orgId = process.env.ORG_ID;\nconst apiKey = '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';\n\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n});\nconst openai = new OpenAIApi(configuration);\n\nexport function AlphaVantage(query){\n\nworkflow(query).then(result => {\n    console.log(result);\n    });\n      \n    // this needs to be modified so that it is a conditional statement that checks the request type and then runs the function within the conditional statement. So, if the request type is one, I wan to have \nasync function workflow(query) {\n    console.log(\"AlphaVantage called with query:\", query);\n    console.log(\"Determining Request Type...\");\n    const requestType =  getRequestType(query);\n    console.log(\"Request Type:\",requestType);\n    console.log(\"Extracting Info based on Request Type...\");\n    const subRequestType = await getSubRequestType(requestType, query);\n    console.log(\"Sub Request Type:\", subRequestType);\n    const extractedInfo = await extractInfo(requestType, query);\n    console.log(\"Extracting Sub Request Type Info...\");\n    const extractedSubInfo = await extractSubInfo( subRequestType, query);\n    console.log(\"Forming API Links...\");\n    const apiLink = await formApiLink(requestType, subRequestType, extractedInfo, extractedSubInfo);\n    console.log(\"API Link:\", apiLink);\n    console.log(\"Calling API...\");\n    const apiCallData = await callApi(apiLink);\n    console.log(\"API Call:\", apiCallData);\n    console.log(\"Summarizing API Call Data...\");\n    const summarizedApiCallData = await summarizeApiCallData(requestType, subRequestType, apiCallData);\n    console.log(\"Summarized API Call Data:\", summarizedApiCallData);\n    console.log(\"Returning Summarized API Call Data...\");\n    return summarizedApiCallData;\n}   \n\n   async function getRequestType(query) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            View the query, determine the request type, return the number associated with the request type\n            1. Core Stock APIS - Intraday, Daily, Weekly, Monthly Price Performance.\n            2. Alpha Intelligence - News & Sentiments, Winning Portfolios.\n            3. Fundamental Data - Company Overview, Income Statement, Balance Sheet, Cash Flow, Earnings, Earnings Calendar, IPO Calendar\n            4. Forex - Exchange Rates, Intraday, Daily, Weekly, Monthly\n            5. Cryptocurrency - Intraday, Daily, Weekly, Monthly\n            6. Commodities - Crude Oil(WTI), Crude Oil(Brent), Natural Gas, Copper, Aluminum, Wheat, Corn, Cotton, Sugar, Coffee, Global Commodities Index\n            7. Economic Indicators - Real GDP, Real GDP Per Capita, Treasury Yield, Federal Funds Interest Rate, CPI, Inflation, Retail Sales, Durable Goods Orders, Unemployment Rate, Nonfarm Payroll\n            8. Technical Indicators - SMA, EMA, WMA, DEMA, TEMA, TRIMA, KAMA, MAMA, T3, MACD, MACDEXT, STOCH, STOCHF, RSI, STOCHRSI, WILLR, ADX, ADXR, APO, PPO, MOM, BOP, CCI, CMO, ROC, ROCR, AROON, AROONOSC, MFI, TRIX, ULTOSC, DX, MINUS_DI, PLUS_DI, MINUS_DM, PLUS_DM, BBANDS, MIDPOINT, MIDPRICE, SAR, TRANGE, ATR, NATR, AD, ADOSC, OBV, HT_TRENDLINE, HT_SINE, HT_TRENDMODE, HT_DCPERIOD, HT_DCPHASE, HT_PHASOR\n\n            Here is the query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n    // currently working on filling this out with the relevant data types in the docs for the different request types.\n    // Then I have to figure out how to convert the variable requestType to an int. \n    // Then I have to figure out how to return the correct function based on the requestType.\n    // Then I have to write out the rest of the workflow, which involves extracting info, forming api links, calling apis, summarizing api call data, and returning summarized api call data.\n    \n    async function getSubRequestType(requestType, query) {\n        switch (requestType) {\n            case 1:\n                return await coreStockAPIs(query);\n                async function coreStockAPIs(query){\n                    const response = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query. Return the item in the parenthesis that corresponds to the subRequestType.\n                        1. Intraday (TIME_SERIES_INTRADAY)\n                        2. Daily (TIME_SERIES_DAILY)\n                        3. Weekly (TIME_SERIES_WEEKLY)\n                        4. Monthly (TIME_SERIES_MONTHLY)\n                        \n                        ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n            \n                    })\n                    return response.data.choices[0].text;\n                }\n            case 2:\n                return await alphaIntelligence(query);\n                async function alphaIntelligence(query){\n                    const response = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n\n                    })\n                    return response.data.choices[0].text;\n                }\n            case 3:\n                return await fundamentalData(query);\n                async function fundamentalData(query){\n                    const response = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n                    })\n                    return response.data.choices[0].text;\n                }\n            case 4:\n                return await forex(query);\n                async function forex(query){\n                    const response = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n                    })\n                    return response.data.choices[0].text;\n                }\n            case 5:\n                return await cryptocurrency(query);\n                async function cryptocurrency(query){\n                    const response = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n                    })\n                    return response.data.choices[0].text;\n                }\n            case 6:\n                return await commodities(query);\n                async function commodities(query){\n                    const response = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n                    })\n                    return response.data.choices[0].text;\n                }\n            case 7:\n                return await economicIndicators(query);\n                async function economicIndicators(query){\n                    const response = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n                    })\n                    return response.data.choices[0].text;\n                }\n            case 8:\n                return await technicalIndicators(query);\n                async function technicalIndicators(query){\n                    const response = await openai.createCompletion({\n                        engine: \"text-davinci-003\",\n                        prompt: `\n                        ${query}\n                        `,\n                        max_tokens: 128,\n                        temperature: 0.5,\n                    })\n                    return response.data.choices[0].text;\n                }\n\n            default:\n                return 'Invalid request type';\n        }\n    }\n    \n    async function extractInfo(requestType, query) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n\n    async function extractSubInfo(subRequestType, query) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n\n    async function formApiLink(requestType, extractedInfo) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;       \n    }\n\n    async function callApi(apiLink) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n    async function summarizeApiCallData(requestType, apiCall) {\n\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}