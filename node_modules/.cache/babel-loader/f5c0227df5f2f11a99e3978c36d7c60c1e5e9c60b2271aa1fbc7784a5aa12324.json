{"ast":null,"code":"import { Configuration, OpenAIApi } from 'openai';\nimport { AlphaVantage } from './APIs/AlphaVantage';\nimport { WallStreetBets } from './APIs/WallStreetBets';\nimport { StockSentimentAPI } from './APIs/StockSentimentAPI';\nimport { GFinance } from './APIs/GFinance';\nimport { Crowdsense } from './APIs/Crowdsense';\nimport { SECFilings } from './APIs/SECFilings';\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport function KariFinancialAnalyst(query) {\n  // maps possible requestTypes to an array of associated functions for callback. functions are below.\n  const requestFunctions = {\n    1: AlphaVantage,\n    // COMPLETE\n    2: WallStreetBets,\n    // COMPLETE \n    3: StockSentimentAPI,\n    // NOT COMPLETE // TO BE CHECKED OFF AFTER 6\n    4: GFinance,\n    // COMPLETE \n    5: Crowdsense,\n    // COMPELTE\n    6: SECFilings // COMPLETE \n  };\n\n  // overall workflow. Decides which sub-workflow to execute, executes it, then returns the response.\n  async function api_search(queryString) {\n    console.log(\"api_search called with queryString:\", queryString);\n    const requestType = await qualifyRequestType(queryString);\n    const intRequest = parseInt(requestType);\n    console.log(\"Request Type:\", intRequest);\n    const requestOutput = await requestFunctions[intRequest](queryString);\n    return requestOutput;\n  }\n\n  // This is basically going to determine what sources should be queried to get an ideal response\n  // It will send the query to each of the dataSources and get a response.\n\n  async function getRecommendedDataSources(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n        You are an artifical financial advisor. Your job is to view the user's request and determine which data sources are most relevant to the request.\n        Potential Options:\n        1. AlphaVantage - Stock Data, Alpha Intelligence, Fundamentals, Forex, Commodities, Economic Indicators, Technical Indicators\n        2. WallStreetBets - Stocks & Sentiment by Reddit posts on popular finance subreddits \n        3. StockSentimentAPI - Sentiment Analyis & News Articles by ticker\n        4. GFinance - General market screening, get info by category (winners, losers, active, etc.)\n        5. Crowdsense - Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes\n        6. SECFilings - SEC filings for a company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings   \n        Return: the numbers of the data sources you want to query, separated by commas. For example, if you want to query data sources 1, 2, and 3, you would return \"1,2,3\"\n        Message: ${query}     \n        `,\n      max_tokens: 128,\n      temperature: .5,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n  async function parseResponses(responses) {}\n  async function combineResponses(parsedResponses) {}\n\n  // Send the query to each of the dataSources\n  // Get the response from each of the dataSources\n  // Parse the response from each of the dataSources\n  // Combine the response from each of the dataSources\n  // Return the summarized response.\n}\n_c = KariFinancialAnalyst;\nvar _c;\n$RefreshReg$(_c, \"KariFinancialAnalyst\");","map":{"version":3,"names":["Configuration","OpenAIApi","AlphaVantage","WallStreetBets","StockSentimentAPI","GFinance","Crowdsense","SECFilings","orgId","process","env","ORG_ID","apiKey","configuration","openai","KariFinancialAnalyst","query","requestFunctions","api_search","queryString","console","log","requestType","qualifyRequestType","intRequest","parseInt","requestOutput","getRecommendedDataSources","response","createCompletion","model","prompt","max_tokens","temperature","stop","data","choices","text","parseResponses","responses","combineResponses","parsedResponses"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/KariFinancialAnalyst.js"],"sourcesContent":["import { Configuration, OpenAIApi } from 'openai';\nimport { AlphaVantage } from './APIs/AlphaVantage';\nimport { WallStreetBets } from './APIs/WallStreetBets';\nimport { StockSentimentAPI } from './APIs/StockSentimentAPI';\nimport { GFinance } from './APIs/GFinance';\nimport { Crowdsense } from './APIs/Crowdsense';\nimport { SECFilings } from './APIs/SECFilings';\n\n\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\n\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n  });\n  const openai = new OpenAIApi(configuration);\n\nexport function KariFinancialAnalyst(query) {\n\n// maps possible requestTypes to an array of associated functions for callback. functions are below.\nconst requestFunctions = {\n    1: AlphaVantage, // COMPLETE\n    2: WallStreetBets, // COMPLETE \n    3: StockSentimentAPI, // NOT COMPLETE // TO BE CHECKED OFF AFTER 6\n    4: GFinance, // COMPLETE \n    5: Crowdsense, // COMPELTE\n    6: SECFilings, // COMPLETE \n   }\n   \n   // overall workflow. Decides which sub-workflow to execute, executes it, then returns the response.\n   async function api_search(queryString) {\n     console.log(\"api_search called with queryString:\", queryString);\n     const requestType = await qualifyRequestType(queryString);\n     const intRequest = parseInt(requestType);\n     console.log(\"Request Type:\",intRequest);\n     const requestOutput = await requestFunctions[intRequest](queryString);\n     return requestOutput;\n   }\n   \n   \n\n    // This is basically going to determine what sources should be queried to get an ideal response\n    // It will send the query to each of the dataSources and get a response.\n    \n    async function getRecommendedDataSources(query) {\n    const response = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n        You are an artifical financial advisor. Your job is to view the user's request and determine which data sources are most relevant to the request.\n        Potential Options:\n        1. AlphaVantage - Stock Data, Alpha Intelligence, Fundamentals, Forex, Commodities, Economic Indicators, Technical Indicators\n        2. WallStreetBets - Stocks & Sentiment by Reddit posts on popular finance subreddits \n        3. StockSentimentAPI - Sentiment Analyis & News Articles by ticker\n        4. GFinance - General market screening, get info by category (winners, losers, active, etc.)\n        5. Crowdsense - Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes\n        6. SECFilings - SEC filings for a company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings   \n        Return: the numbers of the data sources you want to query, separated by commas. For example, if you want to query data sources 1, 2, and 3, you would return \"1,2,3\"\n        Message: ${query}     \n        `,\n        max_tokens: 128,\n        temperature: .5,\n        stop: \"/n\",\n    });\n    return response.data.choices[0].text;\n    }\n\n    \n    async function parseResponses(responses) {\n\n    }\n\n    async function combineResponses(parsedResponses) {\n\n    }\n\n\n\n\n// Send the query to each of the dataSources\n// Get the response from each of the dataSources\n// Parse the response from each of the dataSources\n// Combine the response from each of the dataSources\n// Return the summarized response.\n}"],"mappings":"AAAA,SAASA,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AACjD,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,UAAU,QAAQ,mBAAmB;AAG9C,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,MAAM;AAChC,MAAMC,MAAM,GAAG,qDAAqD;AAEpE,MAAMC,aAAa,GAAG,IAAIb,aAAa,CAAC;EACpCQ,KAAK,EAAEA,KAAK;EACZI,MAAM,EAAEA;AACV,CAAC,CAAC;AACF,MAAME,MAAM,GAAG,IAAIb,SAAS,CAACY,aAAa,CAAC;AAE7C,OAAO,SAASE,oBAAoB,CAACC,KAAK,EAAE;EAE5C;EACA,MAAMC,gBAAgB,GAAG;IACrB,CAAC,EAAEf,YAAY;IAAE;IACjB,CAAC,EAAEC,cAAc;IAAE;IACnB,CAAC,EAAEC,iBAAiB;IAAE;IACtB,CAAC,EAAEC,QAAQ;IAAE;IACb,CAAC,EAAEC,UAAU;IAAE;IACf,CAAC,EAAEC,UAAU,CAAE;EAChB,CAAC;;EAED;EACA,eAAeW,UAAU,CAACC,WAAW,EAAE;IACrCC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEF,WAAW,CAAC;IAC/D,MAAMG,WAAW,GAAG,MAAMC,kBAAkB,CAACJ,WAAW,CAAC;IACzD,MAAMK,UAAU,GAAGC,QAAQ,CAACH,WAAW,CAAC;IACxCF,OAAO,CAACC,GAAG,CAAC,eAAe,EAACG,UAAU,CAAC;IACvC,MAAME,aAAa,GAAG,MAAMT,gBAAgB,CAACO,UAAU,CAAC,CAACL,WAAW,CAAC;IACrE,OAAOO,aAAa;EACtB;;EAIC;EACA;;EAEA,eAAeC,yBAAyB,CAACX,KAAK,EAAE;IAChD,MAAMY,QAAQ,GAAG,MAAMd,MAAM,CAACe,gBAAgB,CAAC;MAC3CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmBf,KAAM;AACzB,SAAS;MACDgB,UAAU,EAAE,GAAG;MACfC,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;IACV,CAAC,CAAC;IACF,OAAON,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;EACpC;EAGA,eAAeC,cAAc,CAACC,SAAS,EAAE,CAEzC;EAEA,eAAeC,gBAAgB,CAACC,eAAe,EAAE,CAEjD;;EAKJ;EACA;EACA;EACA;EACA;AACA;AAAC,KAlEe1B,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}