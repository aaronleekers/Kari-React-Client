{"ast":null,"code":"/**\n * AlphaVantage takes in a query, determines the request type, determines the subRequestType, extracts\n * the necessary information, forms the apiParams, calls the api, and summarizes the apiCallData\n * @param query - the query that the user is asking\n */\n\nconst {\n  Configuration,\n  OpenAIApi\n} = require('openai');\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport async function GFinance(query) {\n  async function workflow(query) {\n    console.log(\"GF-1: extracting api params from info:\", query);\n    const apiParams = await formApiParams(query);\n    console.log(\"GF-2: Making API Call with params:\", apiParams);\n    const apiCallData = await callApi(apiParams);\n    console.log(apiCallData);\n    return apiCallData;\n  }\n  const response = await workflow(query);\n  return response;\n  async function formApiParams(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Instructions: view the query, and determine which of the options is closest to the request. \n\n            Options:\n                indexes (All stock indexes)\n                most-active (Most active stocks of the day)\n                gainers (Stocks that gained the most during the day)\n                losers (Stocks that lost the most during the day)\n                climate-leaders (Stocks that are sustainable investments)\n                cryptocurrencies (Cryptocurrencies)\n                currencies (Currencies)\n\n\n            Output: the word associated with the option you chose.\n\n            Query: ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    const formattedText = response.data.choices[0].text.trim();\n    return formattedText;\n  }\n\n  // STEP 6\n  async function callApi(apiParams) {\n    const url = `https://g-finance.p.rapidapi.com/market-trends/?t=${apiParams}e&s=en&gl=US`;\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n        'X-RapidAPI-Host': 'alpha-vantage.p.rapidapi.com'\n      }\n    };\n    const response = await fetch(url, options);\n    const data = await response.text();\n    const trimmedData = data.replace(/\\s/g, '').substring(0, 3000);\n    return trimmedData;\n  }\n  ;\n}\n_c = GFinance;\nvar _c;\n$RefreshReg$(_c, \"GFinance\");","map":{"version":3,"names":["Configuration","OpenAIApi","require","orgId","apiKey","configuration","openai","GFinance","query","workflow","console","log","apiParams","formApiParams","apiCallData","callApi","response","createCompletion","model","prompt","max_tokens","temperature","formattedText","data","choices","text","trim","url","options","method","headers","fetch","trimmedData","replace","substring"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/APIs/GFinance.js"],"sourcesContent":["/**\n * AlphaVantage takes in a query, determines the request type, determines the subRequestType, extracts\n * the necessary information, forms the apiParams, calls the api, and summarizes the apiCallData\n * @param query - the query that the user is asking\n */\n\nconst { Configuration, OpenAIApi } = require('openai');\n\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\n\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n});\nconst openai = new OpenAIApi(configuration);\n\nexport async function GFinance(query) {\n\n    async function workflow(query) {\n        console.log(\"GF-1: extracting api params from info:\", query);\n        const apiParams = await formApiParams(query)\n        console.log(\"GF-2: Making API Call with params:\", apiParams)\n        const apiCallData = await callApi(apiParams);\n        console.log(apiCallData);\n        return apiCallData;\n    }\n    const response = await workflow(query);\n    return response;\n\n    async function formApiParams(query) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: view the query, and determine which of the options is closest to the request. \n\n            Options:\n                indexes (All stock indexes)\n                most-active (Most active stocks of the day)\n                gainers (Stocks that gained the most during the day)\n                losers (Stocks that lost the most during the day)\n                climate-leaders (Stocks that are sustainable investments)\n                cryptocurrencies (Cryptocurrencies)\n                currencies (Currencies)\n\n\n            Output: the word associated with the option you chose.\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        const formattedText = response.data.choices[0].text.trim();\n        return formattedText;\n    }\n\n    // STEP 6\n    async function callApi(apiParams) {\n        const url = `https://g-finance.p.rapidapi.com/market-trends/?t=${apiParams}e&s=en&gl=US`;\n        const options = {\n            method: 'GET',\n            headers: {\n                'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n                'X-RapidAPI-Host': 'alpha-vantage.p.rapidapi.com'\n            }\n        };\n        const response = await fetch(url, options);\n        const data = await response.text();\n        const trimmedData = data.replace(/\\s/g, '').substring(0, 3000);\n        return trimmedData;\n    };\n\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA,aAAa;EAAEC;AAAU,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEtD,MAAMC,KAAK,GAAG,8BAA8B;AAC5C,MAAMC,MAAM,GAAG,qDAAqD;AAEpE,MAAMC,aAAa,GAAG,IAAIL,aAAa,CAAC;EACpCG,KAAK,EAAEA,KAAK;EACZC,MAAM,EAAEA;AACZ,CAAC,CAAC;AACF,MAAME,MAAM,GAAG,IAAIL,SAAS,CAACI,aAAa,CAAC;AAE3C,OAAO,eAAeE,QAAQ,CAACC,KAAK,EAAE;EAElC,eAAeC,QAAQ,CAACD,KAAK,EAAE;IAC3BE,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEH,KAAK,CAAC;IAC5D,MAAMI,SAAS,GAAG,MAAMC,aAAa,CAACL,KAAK,CAAC;IAC5CE,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEC,SAAS,CAAC;IAC5D,MAAME,WAAW,GAAG,MAAMC,OAAO,CAACH,SAAS,CAAC;IAC5CF,OAAO,CAACC,GAAG,CAACG,WAAW,CAAC;IACxB,OAAOA,WAAW;EACtB;EACA,MAAME,QAAQ,GAAG,MAAMP,QAAQ,CAACD,KAAK,CAAC;EACtC,OAAOQ,QAAQ;EAEf,eAAeH,aAAa,CAACL,KAAK,EAAE;IAChC,MAAMQ,QAAQ,GAAG,MAAMV,MAAM,CAACW,gBAAgB,CAAC;MAC3CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqBX,KAAM;AAC3B,aAAa;MACDY,UAAU,EAAE,GAAG;MACfC,WAAW,EAAE;IAEjB,CAAC,CAAC;IACF,MAAMC,aAAa,GAAGN,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,EAAE;IAC1D,OAAOJ,aAAa;EACxB;;EAEA;EACA,eAAeP,OAAO,CAACH,SAAS,EAAE;IAC9B,MAAMe,GAAG,GAAI,qDAAoDf,SAAU,cAAa;IACxF,MAAMgB,OAAO,GAAG;MACZC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,gBAAgB,EAAE,oDAAoD;QACtE,iBAAiB,EAAE;MACvB;IACJ,CAAC;IACD,MAAMd,QAAQ,GAAG,MAAMe,KAAK,CAACJ,GAAG,EAAEC,OAAO,CAAC;IAC1C,MAAML,IAAI,GAAG,MAAMP,QAAQ,CAACS,IAAI,EAAE;IAClC,MAAMO,WAAW,GAAGT,IAAI,CAACU,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC;IAC9D,OAAOF,WAAW;EACtB;EAAC;AAEL;AAAC,KAzDqBzB,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}