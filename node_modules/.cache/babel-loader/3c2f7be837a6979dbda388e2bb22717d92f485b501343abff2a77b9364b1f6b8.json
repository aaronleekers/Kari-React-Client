{"ast":null,"code":"const {\n  Configuration,\n  OpenAIApi\n} = require('openai');\n\n// Determine request type, if request type with dates, extract dates, form apiLink constructors, apiCall, summarizeApiCallData\t\n\nconst orgId = process.env.ORG_ID;\nconst apiKey = process.env.API_KEY;\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport function AlphaVantage(query) {\n  async function workflow(query) {\n    console.log(\"AlphaVantage called with query:\", query);\n    console.log(\"Determining Request Type...\");\n    const requestType = await getRequestType(query);\n    console.log(\"Request Type:\", requestType);\n    console.log(\"Extracting Info based on Request Type...\");\n    const extractedInfo = await extractInfo(requestType, query);\n    console.log(\"Extracted Info:\", extractedInfo);\n    console.log(\"Forming API Links...\");\n    const apiLink = await formApiLink(requestType, extractedInfo);\n    console.log(\"API Link:\", apiLink);\n    console.log(\"Calling API...\");\n    const apiCall = await callApi(apiLink);\n    console.log(\"API Call:\", apiCall);\n    console.log(\"Summarizing API Call Data...\");\n    const summarizedApiCallData = await summarizeApiCallData(requestType, apiCall);\n    console.log(\"Summarized API Call Data:\", summarizedApiCallData);\n    console.log(\"Returning Summarized API Call Data...\");\n    return summarizedApiCallData;\n  }\n  return workflow;\n  async function getRequestType(query) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function extractInfo(requestType, query) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function formApiLink(requestType, extractedInfo) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function callApi(apiLink) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function summarizeApiCallData(requestType, apiCall) {}\n}\n_c = AlphaVantage;\nvar _c;\n$RefreshReg$(_c, \"AlphaVantage\");","map":{"version":3,"names":["Configuration","OpenAIApi","require","orgId","process","env","ORG_ID","apiKey","API_KEY","configuration","openai","AlphaVantage","query","workflow","console","log","requestType","getRequestType","extractedInfo","extractInfo","apiLink","formApiLink","apiCall","callApi","summarizedApiCallData","summarizeApiCallData","response","createCompletion","engine","prompt","max_tokens","temperature","data","choices","text"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/APIs/AlphaVantage.js"],"sourcesContent":["const { Configuration, OpenAIApi } = require('openai');\n\n// Determine request type, if request type with dates, extract dates, form apiLink constructors, apiCall, summarizeApiCallData\t\n\n  \nconst orgId = process.env.ORG_ID;\nconst apiKey = process.env.API_KEY;\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n});\n  \nconst openai = new OpenAIApi(configuration);\n\n  export function AlphaVantage(query){\n\n    async function workflow(query) {\n        console.log(\"AlphaVantage called with query:\", query);\n        console.log(\"Determining Request Type...\");\n        const requestType = await getRequestType(query);\n        console.log(\"Request Type:\",requestType);\n        console.log(\"Extracting Info based on Request Type...\");\n        const extractedInfo = await extractInfo(requestType, query);\n        console.log(\"Extracted Info:\", extractedInfo);\n        console.log(\"Forming API Links...\");\n        const apiLink = await formApiLink(requestType, extractedInfo);\n        console.log(\"API Link:\", apiLink);\n        console.log(\"Calling API...\");\n        const apiCall = await callApi(apiLink);\n        console.log(\"API Call:\", apiCall);\n        console.log(\"Summarizing API Call Data...\");\n        const summarizedApiCallData = await summarizeApiCallData(requestType, apiCall);\n        console.log(\"Summarized API Call Data:\", summarizedApiCallData);\n        console.log(\"Returning Summarized API Call Data...\");\n        return summarizedApiCallData;\n    }\n    return workflow;\n   \n    async function getRequestType(query) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n    async function extractInfo(requestType, query) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n    async function formApiLink(requestType, extractedInfo) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;       \n    }\n    async function callApi(apiLink) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n    async function summarizeApiCallData(requestType, apiCall) {\n\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}