{"ast":null,"code":"const {\n  Configuration,\n  OpenAIApi\n} = require('openai');\n\n// Determine request type, if request type with dates, extract dates, form apiLink constructors, apiCall, summarizeApiCallData\t\n\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport function AlphaVantage(query) {\n  workflow(query).then(result => {\n    console.log(result);\n  });\n  function workflow(query) {\n    let requestType;\n    let extractedInfo;\n    let apiLink;\n    let apiCall;\n    let summarizedApiCallData;\n    console.log(\"AlphaVantage called with query:\", query);\n    console.log(\"Determining Request Type...\");\n    requestType = getRequestType(query);\n    console.log(\"Request Type:\", requestType);\n    console.log(\"Extracting Info based on Request Type...\");\n    extractedInfo = extractInfo(requestType, query);\n    console.log(\"Extracted Info:\", extractedInfo);\n    console.log(\"Forming API Links...\");\n    apiLink = formApiLink(requestType, extractedInfo);\n    console.log(\"API Link:\", apiLink);\n    console.log(\"Calling API...\");\n    apiCall = callApi(apiLink);\n    console.log(\"API Call:\", apiCall);\n    console.log(\"Summarizing API Call Data...\");\n    summarizedApiCallData = summarizeApiCallData(requestType, apiCall);\n    console.log(\"Summarized API Call Data:\", summarizedApiCallData);\n    console.log(\"Returning Summarized API Call Data...\");\n    return summarizedApiCallData;\n  }\n  async function getRequestType(query) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            View the query, determine the request type, return the number associated with the request type\n            1. Core Stock APIS - Intraday, Daily, Weekly, Monthly Price Performance.\n            2. Alpha Intelligence - News & Sentiments, Winning Portfolios\n            3. Fundamental Data - Company Overview, Income Statement, Balance Sheet, Cash Flow, Earnings, Earnings Calendar, IPO Calendar\n            4. Forex - Exchange Rates, Intraday, Daily, Weekly, Monthly\n            5. Cryptocurrency - Intraday, Daily, Weekly, Monthly\n            6. Commodities - Crude Oil(WTI), Crude Oil(Brent), Natural Gas, Copper, Aluminum, Wheat, Corn, Cotton, Sugar, Coffee, Global Commodities Index\n            7. Economic Indicators - Real GDP, Real GDP Per Capita, Treasury Yield, Federal Funds Interest Rate, CPI, Inflation, Retail Sales, Durable Goods Orders, Unemployment Rate, Nonfarm Payroll\n            8. Technical Indicators - SMA, EMA, WMA, DEMA, TEMA, TRIMA, KAMA, MAMA, T3, MACD, MACDEXT, STOCH, STOCHF, RSI, STOCHRSI, WILLR, ADX, ADXR, APO, PPO, MOM, BOP, CCI, CMO, ROC, ROCR, AROON, AROONOSC, MFI, TRIX, ULTOSC, DX, MINUS_DI, PLUS_DI, MINUS_DM, PLUS_DM, BBANDS, MIDPOINT, MIDPRICE, SAR, TRANGE, ATR, NATR, AD, ADOSC, OBV, HT_TRENDLINE, HT_SINE, HT_TRENDMODE, HT_DCPERIOD, HT_DCPHASE, HT_PHASOR\n\n            Here is the query: ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function extractInfo(requestType, query) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function formApiLink(requestType, extractedInfo) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function callApi(apiLink) {\n    const response = await openai.createCompletion({\n      engine: \"text-davinci-003\",\n      prompt: `\n            ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n  async function summarizeApiCallData(requestType, apiCall) {}\n}\n_c = AlphaVantage;\nvar _c;\n$RefreshReg$(_c, \"AlphaVantage\");","map":{"version":3,"names":["Configuration","OpenAIApi","require","orgId","process","env","ORG_ID","apiKey","configuration","openai","AlphaVantage","query","workflow","then","result","console","log","requestType","extractedInfo","apiLink","apiCall","summarizedApiCallData","getRequestType","extractInfo","formApiLink","callApi","summarizeApiCallData","response","createCompletion","engine","prompt","max_tokens","temperature","data","choices","text"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/APIs/AlphaVantage.js"],"sourcesContent":["const { Configuration, OpenAIApi } = require('openai');\n\n// Determine request type, if request type with dates, extract dates, form apiLink constructors, apiCall, summarizeApiCallData\t\n\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\n\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n});\nconst openai = new OpenAIApi(configuration);\n\nexport function AlphaVantage(query){\n\nworkflow(query).then(result => {\n    console.log(result);\n    });\n      \n\nfunction workflow(query) {\n    let requestType;\n    let extractedInfo;\n    let apiLink;\n    let apiCall;\n    let summarizedApiCallData;\n\n    console.log(\"AlphaVantage called with query:\", query);\n    console.log(\"Determining Request Type...\");\n    requestType =  getRequestType(query);\n    console.log(\"Request Type:\",requestType);\n    console.log(\"Extracting Info based on Request Type...\");\n    extractedInfo = extractInfo(requestType, query);\n    console.log(\"Extracted Info:\", extractedInfo);\n    console.log(\"Forming API Links...\");\n     apiLink =  formApiLink(requestType, extractedInfo);\n    console.log(\"API Link:\", apiLink);\n    console.log(\"Calling API...\");\n    apiCall =  callApi(apiLink);\n    console.log(\"API Call:\", apiCall);\n    console.log(\"Summarizing API Call Data...\");\n    summarizedApiCallData =  summarizeApiCallData(requestType, apiCall);\n    console.log(\"Summarized API Call Data:\", summarizedApiCallData);\n    console.log(\"Returning Summarized API Call Data...\");\n    return summarizedApiCallData;\n}   \n\n   async function getRequestType(query) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            View the query, determine the request type, return the number associated with the request type\n            1. Core Stock APIS - Intraday, Daily, Weekly, Monthly Price Performance.\n            2. Alpha Intelligence - News & Sentiments, Winning Portfolios\n            3. Fundamental Data - Company Overview, Income Statement, Balance Sheet, Cash Flow, Earnings, Earnings Calendar, IPO Calendar\n            4. Forex - Exchange Rates, Intraday, Daily, Weekly, Monthly\n            5. Cryptocurrency - Intraday, Daily, Weekly, Monthly\n            6. Commodities - Crude Oil(WTI), Crude Oil(Brent), Natural Gas, Copper, Aluminum, Wheat, Corn, Cotton, Sugar, Coffee, Global Commodities Index\n            7. Economic Indicators - Real GDP, Real GDP Per Capita, Treasury Yield, Federal Funds Interest Rate, CPI, Inflation, Retail Sales, Durable Goods Orders, Unemployment Rate, Nonfarm Payroll\n            8. Technical Indicators - SMA, EMA, WMA, DEMA, TEMA, TRIMA, KAMA, MAMA, T3, MACD, MACDEXT, STOCH, STOCHF, RSI, STOCHRSI, WILLR, ADX, ADXR, APO, PPO, MOM, BOP, CCI, CMO, ROC, ROCR, AROON, AROONOSC, MFI, TRIX, ULTOSC, DX, MINUS_DI, PLUS_DI, MINUS_DM, PLUS_DM, BBANDS, MIDPOINT, MIDPRICE, SAR, TRANGE, ATR, NATR, AD, ADOSC, OBV, HT_TRENDLINE, HT_SINE, HT_TRENDMODE, HT_DCPERIOD, HT_DCPHASE, HT_PHASOR\n\n            Here is the query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n    async function extractInfo(requestType, query) {\n\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n    async function formApiLink(requestType, extractedInfo) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;       \n    }\n    async function callApi(apiLink) {\n        const response = await openai.createCompletion({\n            engine: \"text-davinci-003\",\n            prompt: `\n            ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text;\n    }\n    async function summarizeApiCallData(requestType, apiCall) {\n\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}