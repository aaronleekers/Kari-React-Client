{"ast":null,"code":"import { Configuration, OpenAIApi } from 'openai';\nimport { AlphaVantage } from './APIs/AlphaVantage';\nimport { WallStreetBets } from './APIs/WallStreetBets';\nimport { StockSentimentAPI } from './APIs/StockSentimentAPI';\nimport { GFinance } from './APIs/GFinance';\nimport { Crowdsense } from './APIs/Crowdsense';\nimport { FinancialStatements } from './APIs/FinancialStatements';\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport async function KariFinancialAnalyst(query) {\n  /* This is a dictionary of functions that are called based on the output of the OpenAI API. */\n  const requestFunctions = {\n    1: AlphaVantage,\n    2: WallStreetBets,\n    3: StockSentimentAPI,\n    // WORK ON \n    4: GFinance,\n    5: Crowdsense,\n    // WORK ON\n    6: FinancialStatements // WORK ON\n  };\n\n  /**\n   * > The function `workflow` takes a query, and returns a response\n   * @param query - the query string\n   * @returns The response from the workflow function.\n   */\n  async function workflow(query) {\n    console.log(\"KariFA-1: gettingRecommendedDataSources\");\n    const requestType = await getDataSource(query);\n    console.log(\"KariFA-2 getting response from requested function:\", requestType);\n    const requestOutput = await requestFunctions[requestType](query);\n    return requestOutput;\n  }\n\n  // proposed new function\n  async function workflow(query) {\n    console.log(\"KFA-1: gettingVagueness\");\n    const vagueness = await getVagueness(query);\n    console.log(\"Vagueness:\", vagueness);\n    if (vagueness > .5) {\n      console.log(\"Hella vague bruh, trying to find some shit for you\");\n      const dataSources = await getDataSources(query);\n      console.log(\"Okay we will  do these sources:\", dataSources);\n      // this part will need to take the dataSources numbers,\n      // and run the various functions associated with the datasources\n      // and finally, it will put them all into an organized report.\n      const data = await getData(query, dataSources);\n      console.log(data);\n      const report = await summarizeData(data);\n      console.log(report);\n      return report;\n    } else if (vagueness < .5) {\n      console.log(\"Thanks for the specific request, returning the exact thing u asked for\");\n      const dataSource = getDataSource(query);\n      console.log(\"I think it is this one:\", dataSource);\n      const requestOutput = await requestFunctions[dataSource](query);\n      return requestOutput;\n    }\n  }\n  async function getVagueness(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n        Instructions: determine how vague this request is on a scale of 0 to 1, as it pertains to obtaining financial information & insights.\n        Query: ${query},\n\n        Examples: \n        I: What is the current price of $TSLA? | O: 0.9\n        I: What are the top five stocks on WSB? | O: 0.8\n        I: What are the most active stocks today? | 0: 0.7\n        I: What are the loser stocks today? | O: 0.7 \n        I: What are the most popular investments right now? | O: 0.4\n        I: What is the latest insights in alternative data? | O: 0.3\n      `,\n      max_tokens: 128\n    });\n    return response.data.choices[0].text;\n  }\n  ;\n  async function getDataSources(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n        You are an artifical financial advisor. Your job is to view the user's request and determine the data sources most relevant to the request.\n        These data sources are different APIs that provide different types of data. You will need to determine which data sources are most relevant to the user's request.\n\n        Potential Options:\n           | Name | Description | How to Query |\n        1. | AlphaVantage | Stock Price Data, Alpha Intelligence, Forex, Commodities, Economic Indicators, Technical Indicators | Specific Questions |\n        2. | WallStreetBets | Stocks & Sentiment by Reddit posts on popular finance subreddits | Vague Requests, Trending Info |\n        3. | StockSentimentAPI | Sentiment Analyis & News Articles by ticker | Specific or Vague questions |\n        4. | GFinance | General market screening, get info by category (winners, losers, active, etc.) | Vague Requests, Trending Info, For overviews & Climate questions |\n        5. | Crowdsense | Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes | Specific or Vague questions |\n        6. | FinancialStatements | SEC filings for a public company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings | Specific or Vague questions |\n\n        Output: The numbers of the data source you think is most relevant to the user's request, separated by commas.\n        Message: ${query}     \n        `,\n      max_tokens: 128,\n      temperature: .5,\n      stop: \"/n\"\n    });\n    const requestType = response.data.choices[0].text;\n    const intRequest = parseInt(requestType.match(/\\d+/)[0]);\n    return intRequest;\n  }\n  ;\n  async function getData(query, dataSource) {\n    // this part will need to take the dataSources numbers,\n    // and run the various functions associated with the datasources\n    // and finally, it will put them all into an organized report.\n  }\n  ;\n  async function summarizeData() {}\n  ;\n\n  /* This function is using the OpenAI API to determine which data source is most relevant to the\n  user's request. */\n  async function getDataSource(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n        You are an artifical financial advisor. Your job is to view the user's request and determine the data sources most relevant to the request.\n        These data sources are different APIs that provide different types of data. You will need to determine which data source is most relevant to the user's request.\n\n        Potential Options:\n           | Name | Description | How to Query |\n        1. | AlphaVantage | Stock Price Data, Alpha Intelligence, Forex, Commodities, Economic Indicators, Technical Indicators | Specific Questions |\n        2. | WallStreetBets | Stocks & Sentiment by Reddit posts on popular finance subreddits | Vague Requests, Trending Info |\n        3. | StockSentimentAPI | Sentiment Analyis & News Articles by ticker | Specific or Vague questions |\n        4. | GFinance | General market screening, get info by category (winners, losers, active, etc.) | Vague Requests, Trending Info, For overviews & Climate questions |\n        5. | Crowdsense | Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes | Specific or Vague questions |\n        6. | FinancialStatements | SEC filings for a public company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings | Specific or Vague questions |\n\n        Output: The number of the data source you think is most relevant to the user's request.\n        Message: ${query}     \n        `,\n      max_tokens: 128,\n      temperature: .5,\n      stop: \"/n\"\n    });\n    const requestType = response.data.choices[0].text;\n    const intRequest = parseInt(requestType.match(/\\d+/)[0]);\n    return intRequest;\n  }\n  const response = await workflow(query);\n  return response;\n}\n_c = KariFinancialAnalyst;\nvar _c;\n$RefreshReg$(_c, \"KariFinancialAnalyst\");","map":{"version":3,"names":["Configuration","OpenAIApi","AlphaVantage","WallStreetBets","StockSentimentAPI","GFinance","Crowdsense","FinancialStatements","orgId","process","env","ORG_ID","apiKey","configuration","openai","KariFinancialAnalyst","query","requestFunctions","workflow","console","log","requestType","getDataSource","requestOutput","vagueness","getVagueness","dataSources","getDataSources","data","getData","report","summarizeData","dataSource","response","createCompletion","model","prompt","max_tokens","choices","text","temperature","stop","intRequest","parseInt","match"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/KariFinancialAnalyst.js"],"sourcesContent":["import { Configuration, OpenAIApi } from 'openai';\nimport { AlphaVantage } from './APIs/AlphaVantage';\nimport { WallStreetBets } from './APIs/WallStreetBets';\nimport { StockSentimentAPI } from './APIs/StockSentimentAPI';\nimport { GFinance } from './APIs/GFinance';\nimport { Crowdsense } from './APIs/Crowdsense';\nimport { FinancialStatements } from './APIs/FinancialStatements';\n\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\n\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey,\n});\nconst openai = new OpenAIApi(configuration);\n\nexport async function KariFinancialAnalyst(query) {\n  /* This is a dictionary of functions that are called based on the output of the OpenAI API. */\n  const requestFunctions = {\n    1: AlphaVantage,\n    2: WallStreetBets,\n    3: StockSentimentAPI, // WORK ON \n    4: GFinance,\n    5: Crowdsense, // WORK ON\n    6: FinancialStatements, // WORK ON\n  }\n\n  /**\n   * > The function `workflow` takes a query, and returns a response\n   * @param query - the query string\n   * @returns The response from the workflow function.\n   */\n  async function workflow(query) {\n    console.log(\"KariFA-1: gettingRecommendedDataSources\")\n    const requestType = await getDataSource(query);\n    console.log(\"KariFA-2 getting response from requested function:\", requestType);\n    const requestOutput = await requestFunctions[requestType](query);\n    return requestOutput;\n  }\n\n  // proposed new function\n  async function workflow(query) {\n    console.log(\"KFA-1: gettingVagueness\")\n    const vagueness = await getVagueness(query);\n    console.log(\"Vagueness:\", vagueness)\n    if (vagueness > .5) {\n      console.log(\"Hella vague bruh, trying to find some shit for you\");\n      const dataSources = await getDataSources(query);\n      console.log(\"Okay we will  do these sources:\", dataSources);\n      // this part will need to take the dataSources numbers,\n      // and run the various functions associated with the datasources\n      // and finally, it will put them all into an organized report.\n      const data = await getData(query, dataSources);\n      console.log(data);\n      const report = await summarizeData(data);\n      console.log(report);\n      return report;\n    } else if (vagueness < .5) {\n      console.log(\"Thanks for the specific request, returning the exact thing u asked for\")\n      const dataSource = getDataSource(query);\n      console.log(\"I think it is this one:\", dataSource);\n      const requestOutput = await requestFunctions[dataSource](query);\n      return requestOutput;\n    }\n  }\n\n  async function getVagueness(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n        Instructions: determine how vague this request is on a scale of 0 to 1, as it pertains to obtaining financial information & insights.\n        Query: ${query},\n\n        Examples: \n        I: What is the current price of $TSLA? | O: 0.9\n        I: What are the top five stocks on WSB? | O: 0.8\n        I: What are the most active stocks today? | 0: 0.7\n        I: What are the loser stocks today? | O: 0.7 \n        I: What are the most popular investments right now? | O: 0.4\n        I: What is the latest insights in alternative data? | O: 0.3\n      `,\n      max_tokens: 128,\n    })\n    return response.data.choices[0].text;\n  };\n\n  async function getDataSources(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n        You are an artifical financial advisor. Your job is to view the user's request and determine the data sources most relevant to the request.\n        These data sources are different APIs that provide different types of data. You will need to determine which data sources are most relevant to the user's request.\n\n        Potential Options:\n           | Name | Description | How to Query |\n        1. | AlphaVantage | Stock Price Data, Alpha Intelligence, Forex, Commodities, Economic Indicators, Technical Indicators | Specific Questions |\n        2. | WallStreetBets | Stocks & Sentiment by Reddit posts on popular finance subreddits | Vague Requests, Trending Info |\n        3. | StockSentimentAPI | Sentiment Analyis & News Articles by ticker | Specific or Vague questions |\n        4. | GFinance | General market screening, get info by category (winners, losers, active, etc.) | Vague Requests, Trending Info, For overviews & Climate questions |\n        5. | Crowdsense | Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes | Specific or Vague questions |\n        6. | FinancialStatements | SEC filings for a public company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings | Specific or Vague questions |\n\n        Output: The numbers of the data source you think is most relevant to the user's request, separated by commas.\n        Message: ${query}     \n        `,\n      max_tokens: 128,\n      temperature: .5,\n      stop: \"/n\",\n    });\n    const requestType = response.data.choices[0].text;\n    const intRequest = parseInt(requestType.match(/\\d+/)[0]);\n    return intRequest;\n  };\n\n  async function getData(query, dataSource) {\n    // this part will need to take the dataSources numbers,\n    // and run the various functions associated with the datasources\n    // and finally, it will put them all into an organized report.\n  };\n\n  async function summarizeData() {\n\n  };\n\n  /* This function is using the OpenAI API to determine which data source is most relevant to the\n  user's request. */\n  async function getDataSource(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n        You are an artifical financial advisor. Your job is to view the user's request and determine the data sources most relevant to the request.\n        These data sources are different APIs that provide different types of data. You will need to determine which data source is most relevant to the user's request.\n\n        Potential Options:\n           | Name | Description | How to Query |\n        1. | AlphaVantage | Stock Price Data, Alpha Intelligence, Forex, Commodities, Economic Indicators, Technical Indicators | Specific Questions |\n        2. | WallStreetBets | Stocks & Sentiment by Reddit posts on popular finance subreddits | Vague Requests, Trending Info |\n        3. | StockSentimentAPI | Sentiment Analyis & News Articles by ticker | Specific or Vague questions |\n        4. | GFinance | General market screening, get info by category (winners, losers, active, etc.) | Vague Requests, Trending Info, For overviews & Climate questions |\n        5. | Crowdsense | Cryptocurrency Sentiment Analsyis by scraping social media & predicting future spikes | Specific or Vague questions |\n        6. | FinancialStatements | SEC filings for a public company by ticker, including Manager Ownership, Insider Transactions, and Manager Holdings | Specific or Vague questions |\n\n        Output: The number of the data source you think is most relevant to the user's request.\n        Message: ${query}     \n        `,\n      max_tokens: 128,\n      temperature: .5,\n      stop: \"/n\",\n    });\n    const requestType = response.data.choices[0].text;\n    const intRequest = parseInt(requestType.match(/\\d+/)[0]);\n    return intRequest;\n  }\n\n  const response = await workflow(query);\n  return response;\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AACjD,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,mBAAmB,QAAQ,4BAA4B;AAEhE,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,MAAM;AAChC,MAAMC,MAAM,GAAG,qDAAqD;AAEpE,MAAMC,aAAa,GAAG,IAAIb,aAAa,CAAC;EACtCQ,KAAK,EAAEA,KAAK;EACZI,MAAM,EAAEA;AACV,CAAC,CAAC;AACF,MAAME,MAAM,GAAG,IAAIb,SAAS,CAACY,aAAa,CAAC;AAE3C,OAAO,eAAeE,oBAAoB,CAACC,KAAK,EAAE;EAChD;EACA,MAAMC,gBAAgB,GAAG;IACvB,CAAC,EAAEf,YAAY;IACf,CAAC,EAAEC,cAAc;IACjB,CAAC,EAAEC,iBAAiB;IAAE;IACtB,CAAC,EAAEC,QAAQ;IACX,CAAC,EAAEC,UAAU;IAAE;IACf,CAAC,EAAEC,mBAAmB,CAAE;EAC1B,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,eAAeW,QAAQ,CAACF,KAAK,EAAE;IAC7BG,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtD,MAAMC,WAAW,GAAG,MAAMC,aAAa,CAACN,KAAK,CAAC;IAC9CG,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEC,WAAW,CAAC;IAC9E,MAAME,aAAa,GAAG,MAAMN,gBAAgB,CAACI,WAAW,CAAC,CAACL,KAAK,CAAC;IAChE,OAAOO,aAAa;EACtB;;EAEA;EACA,eAAeL,QAAQ,CAACF,KAAK,EAAE;IAC7BG,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,MAAMI,SAAS,GAAG,MAAMC,YAAY,CAACT,KAAK,CAAC;IAC3CG,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEI,SAAS,CAAC;IACpC,IAAIA,SAAS,GAAG,EAAE,EAAE;MAClBL,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;MACjE,MAAMM,WAAW,GAAG,MAAMC,cAAc,CAACX,KAAK,CAAC;MAC/CG,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEM,WAAW,CAAC;MAC3D;MACA;MACA;MACA,MAAME,IAAI,GAAG,MAAMC,OAAO,CAACb,KAAK,EAAEU,WAAW,CAAC;MAC9CP,OAAO,CAACC,GAAG,CAACQ,IAAI,CAAC;MACjB,MAAME,MAAM,GAAG,MAAMC,aAAa,CAACH,IAAI,CAAC;MACxCT,OAAO,CAACC,GAAG,CAACU,MAAM,CAAC;MACnB,OAAOA,MAAM;IACf,CAAC,MAAM,IAAIN,SAAS,GAAG,EAAE,EAAE;MACzBL,OAAO,CAACC,GAAG,CAAC,wEAAwE,CAAC;MACrF,MAAMY,UAAU,GAAGV,aAAa,CAACN,KAAK,CAAC;MACvCG,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEY,UAAU,CAAC;MAClD,MAAMT,aAAa,GAAG,MAAMN,gBAAgB,CAACe,UAAU,CAAC,CAAChB,KAAK,CAAC;MAC/D,OAAOO,aAAa;IACtB;EACF;EAEA,eAAeE,YAAY,CAACT,KAAK,EAAE;IACjC,MAAMiB,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,gBAAgB,CAAC;MAC7CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAG;AACf;AACA,iBAAiBpB,KAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDqB,UAAU,EAAE;IACd,CAAC,CAAC;IACF,OAAOJ,QAAQ,CAACL,IAAI,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;EACtC;EAAC;EAED,eAAeZ,cAAc,CAACX,KAAK,EAAE;IACnC,MAAMiB,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,gBAAgB,CAAC;MAC7CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmBpB,KAAM;AACzB,SAAS;MACHqB,UAAU,EAAE,GAAG;MACfG,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;IACR,CAAC,CAAC;IACF,MAAMpB,WAAW,GAAGY,QAAQ,CAACL,IAAI,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;IACjD,MAAMG,UAAU,GAAGC,QAAQ,CAACtB,WAAW,CAACuB,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,OAAOF,UAAU;EACnB;EAAC;EAED,eAAeb,OAAO,CAACb,KAAK,EAAEgB,UAAU,EAAE;IACxC;IACA;IACA;EAAA;EACD;EAED,eAAeD,aAAa,GAAG,CAE/B;EAAC;;EAED;AACF;EACE,eAAeT,aAAa,CAACN,KAAK,EAAE;IAClC,MAAMiB,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,gBAAgB,CAAC;MAC7CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmBpB,KAAM;AACzB,SAAS;MACHqB,UAAU,EAAE,GAAG;MACfG,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;IACR,CAAC,CAAC;IACF,MAAMpB,WAAW,GAAGY,QAAQ,CAACL,IAAI,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;IACjD,MAAMG,UAAU,GAAGC,QAAQ,CAACtB,WAAW,CAACuB,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,OAAOF,UAAU;EACnB;EAEA,MAAMT,QAAQ,GAAG,MAAMf,QAAQ,CAACF,KAAK,CAAC;EACtC,OAAOiB,QAAQ;AACjB;AAAC,KA5IqBlB,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}