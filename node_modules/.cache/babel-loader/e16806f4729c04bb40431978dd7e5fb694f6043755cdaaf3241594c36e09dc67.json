{"ast":null,"code":"/**\n * AlphaVantage takes in a query, determines the request type, determines the subRequestType, extracts\n * the necessary information, forms the apiParams, calls the api, and summarizes the apiCallData\n * @param query - the query that the user is asking\n */\n\nconst {\n  Configuration,\n  OpenAIApi\n} = require('openai');\n\n// to do: move these to env variables\n// 2. Make summary better\n\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport async function AlphaVantage(query) {\n  async function workflow(query) {\n    console.log(\"AlphaVantage called!\");\n    console.log(\"AV: Step 1: gettingRequestType from query:\", query);\n    const requestType = await getRequestType(query); // STEP 1\n    console.log(\"AV: Step 2: processing requestType to int:\", requestType);\n    const firstDigit = requestType.replace(/\\D/g, '')[0]; // STEP 2\n    const extractedRequestType = parseInt(firstDigit); // STEP 2.5\n    console.log(\"AV: Step 3: gettingSubRequestType from extractedRequestType & Query:\", requestType, query);\n    const subRequestType = await getSubRequestType(extractedRequestType, query); // STEP 3\n    console.log(\"AV: Step 4: extractingInfo from extractedRequestType & Query:\", extractedRequestType, query);\n    const extractedInfo = await extractInfo(extractedRequestType, query); // STEP 4\n    console.log(\"AV: Step 5: formingApiParams from extractedInfo and subRequestType:\", extractedInfo, subRequestType);\n    const apiParams = await formApiParams(subRequestType, extractedInfo); // STEP 5\n    console.log(\"AV: Making API Call with params:\", apiParams);\n    const apiCallData = await callApi(apiParams); // STEP 6\n    console.log(\"AV: Step 7: summarizingApiCallData with current date, requestType, subrequestType, apiCallData, and query:\", requestType, subRequestType, apiCallData, query);\n    const summarizedApiCallData = await summarizeApiCallData(requestType, subRequestType, apiCallData, query); // STEP 7\n    console.log(\"AV: Final Step: Return Summary\", summarizedApiCallData);\n    return summarizedApiCallData;\n  }\n  const response = await workflow(query);\n  return response;\n  // STEP 1\n  async function getRequestType(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            View the query, determine the request type, and output the whole line associated with the query, starting with the number.\n            (1) Core Stock APIS - Intraday, Daily, Weekly, Monthly, & Current Price. (Input would have a stock ticker symbol)\n            (2) Forex - Exchange Rates, Intraday, Daily, Weekly, Monthly (Input would have a currency pair)\n            (3) Cryptocurrency - Intraday, Daily, Weekly, Monthly (Input would have a cryptocurrency symbol)\n            (4) Commodities - Crude Oil(Brent), Natural Gas, Copper, Aluminum, Wheat, Corn, Cotton, Sugar, Coffee, Global Commodities Index  (Input would describe a commodity)\n            (5) Economic Indicators - Real GDP, Real GDP Per Capita, Treasury Yield, Federal Funds Interest Rate, CPI, Inflation, Retail Sales, Durable Goods Orders, Unemployment Rate, Nonfarm Payroll (Input would describe an economic indicator)\n            (6) Technical Indicators - SMA, EMA, WMA, DEMA, TEMA, TRIMA, KAMA, MAMA, T3, MACD, MACDEXT, STOCH, STOCHF, RSI, STOCHRSI, WILLR, ADX, ADXR, APO, PPO, MOM, BOP, CCI, CMO, ROC, ROCR, AROON, AROONOSC, MFI, TRIX, ULTOSC, DX, MINUS_DI, PLUS_DI, MINUS_DM, PLUS_DM, BBANDS, MIDPOINT, MIDPRICE, SAR, TRANGE, ATR, NATR, AD, ADOSC, OBV, HT_TRENDLINE, HT_SINE, HT_TRENDMODE, HT_DCPERIOD, HT_DCPHASE, HT_PHASOR (Input would describe a technical indicator)\n\n            Here is the query: ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text.replace(/\\D/g, '')[0];\n  }\n  // STEP 3 \n  async function getSubRequestType(extractedRequestType, query) {\n    if (extractedRequestType === 1) {\n      try {\n        let requestOne;\n        requestOne = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                    Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query. \n                    Return: The item in the parenthesis that corresponds to the subRequestType.\n                    1. Intraday (TIME_SERIES_INTRADAY)\n                    2. Daily (TIME_SERIES_DAILY)\n                    3. Weekly (TIME_SERIES_WEEKLY)\n                    4. Monthly (TIME_SERIES_MONTHLY)\n                    5. Current Price (GLOBAL_QUOTE)\n            \n                    Query: ${query}\n                    `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        console.log(\"requestOne:\", requestOne);\n        return requestOne.data.choices[0].text;\n      } catch (error) {\n        console.error(\"Error in createCompletion function:\", error);\n      }\n    } else if (extractedRequestType === 2) {\n      console.log(\"Case Two! Running now...\");\n      let requestFour;\n      requestFour = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (FX_INTRADAY)\n            3. Daily (FX_DAILY)\n            4. Weekly (FX_WEEKLY)\n            5. Monthly (FX_MONTHLY)\n            \n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestFour.data.choices[0].text;\n    } else if (extractedRequestType === 3) {\n      console.log(\"Case Three! Running now...\");\n      let requestFive;\n      requestFive = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exhange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (CRYPTO_INTRADAY)\n            3. Daily (CRYPTO_DAILY)\n            4. Weekly (CRYPTO_WEEKLY)\n            5. Monthly (CRYPTO_MONTHLY)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestFive.data.choices[0].text;\n    } else if (extractedRequestType === 4) {\n      console.log(\"Case Four! Running now...\");\n      let requestSix;\n      requestSix = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Crude Oil, Brent (BRENT)\n            2. Natural Gas (NATURAL_GAS)\n            3. Copper (COPPER)\n            4. Aluminum (ALUMINUM)\n            5. Gold (GOLD)\n            6. Wheat (WHEAT)\n            7. Corn (CORN)\n            8. Cotton (COTTON)\n            9. Sugar (SUGAR)\n            10. Coffee (COFFEE)\n            11. Global Commodities Index (ALL_COMMODITIES)\n    \n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestSix.data.choices[0].text;\n    } else if (extractedRequestType === 5) {\n      console.log(\"Case Five! Running now...\");\n      let requestSeven;\n      requestSeven = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. REAL GDP (REAL_GDP)\n            2. REAL GDP PER CAPITA (REAL_GDP_PER_CAPITA)\n            3. TREASURY YIELD (TREASURY_YIELD)\n            4. FEDERAL FUNDS RATE (FEDERAL_FUNDS_RATE)\n            5. CPI (CPI)\n            6. Inflation (INFLATION)\n            7. Retail Sales (RETAIL_SALES)\n            8. Durable Goods Orders (DURABLES)\n            9. Unemployment Rate (UNEMPLOYMENT)\n            10. NONFARM PAYROLLS (NONFARM_PAYROLL)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestSeven.data.choices[0].text;\n    } else if (extractedRequestType === 6) {\n      console.log(\"Case Six! Running now...\");\n      let requestEight;\n      requestEight = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. SMA (SMA)\n            2. EMA (EMA)\n            3. WMA (WMA)\n            4. DEMA (DEMA)\n            5. TEMA (TEMA)\n            6. TRIMA (TRIMA)\n            7. KAMA (KAMA)\n            8. MAMA (MAMA)\n            9. T3 (T3)\n            10. MACD (MACD)\n            11. MACDEXT (MACDEXT)\n            12. STOCH (STOCH)\n            13. STOCHF (STOCHF)\n            14. RSI (RSI)\n            15. STOCHRSI (STOCHRSI)\n            16. WILLR (WILLR)\n            17. ADX (ADX)\n            18. ADXR (ADXR)\n            19. APO (APO)\n            20. PPO (PPO)\n            21. MOM (MOM)\n            22. BOP (BOP)\n            23. CCI (CCI)\n            24. CMO (CMO)\n            25. ROC (ROC)\n            26. ROCR (ROCR)\n            27. AROON (AROON)\n            28. AROONOSC (AROONOSC)\n            29. MFI (MFI)\n            30. TRIX (TRIX)\n            31. ULTOSC (ULTOSC)\n            32. DX (DX)\n            33. MINUS_DI (MINUS_DI)\n            34. PLUS_DI (PLUS_DI)\n            35. MINUS_DM (MINUS_DM)\n            36. PLUS_DM (PLUS_DM)\n            37. BBANDS (BBANDS)\n            38. MIDPOINT (MIDPOINT)\n            39. MIDPRICE (MIDPRICE)\n            40. SAR (SAR)\n            41. TRANGE (TRANGE)\n            42. ATR (ATR)\n            43. NATR (NATR)\n            44. AD (AD)\n            45. ADOSC (ADOSC)\n            46. OBV (OBV)\n            47. HT_TRENDLINE (HT_TRENDLINE)\n            48. HT_SINE (HT_SINE)\n            49. HT_TRENDMODE (HT_TRENDMODE)\n            50. HT_DCPERIOD (HT_DCPERIOD)\n            51. HT_DCPHASE (HT_DCPHASE)\n            52. HT_PHASOR (HT_PHASOR)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestEight.data.choices[0].text;\n    } else {\n      console.log(\"Invalid Request Type!\");\n    }\n  }\n\n  // STEP 4\n  async function extractInfo(extractedRequestType, query) {\n    if (extractedRequestType === 1) {\n      // extract stockName, interval \n      try {\n        console.log(\"Extracting stockName & Interval!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: View the query, and extract the stock ticker symbol from it, and the interval period (1min, 5min, 15min, 30min, 60min)\n                Defaults if N/A: symbol: AAPL, interval: 30min\n\n                Return: The output prefaced by the label and a colon. (symbol: AAPL, interval: 30min);\n\n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 2) {\n      // extract fromCurrency, extract toCurrency, if only one currency, make it a USD pair. \n      try {\n        console.log(\"Extracting from_currency, to_currency!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: extract the currency pair from this request. If there is only one currency, compare it against USD.\n                Output: from_currency: extracted currency in request, to_currency: extracted currency in request or USD if N/A.\n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 3) {\n      // extract fromCurrency, extract toCurrency, if only one currency, make it a USD pair. \n      try {\n        console.log(\"Extracting from_currency, to_currency!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: extract the currency pair from this request. If there is only one currency, compare it against USD. view ${subRequestType}, if it is INTRADAY, extract the interval as well, if no interval, set it to 30min.\n                Output: from_currency: extracted currency in request, to_currency: extracted currency in request or USD if N/A, interval (if subRequestType is INTRADAY): extracted interval in request or 30min if N/A.\n                Query: ${query}\n                Context: There might be cryptocurrency pairs in this mix.\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 4) {\n      // extract interval if present\n      try {\n        console.log(\"Extracting interval if present!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: extract the time interval if present in this query. If not present, return \"monthly\"\n                Possible time intervals: daily, weekly, monthly\n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 5) {\n      // extract interval if present\n      try {\n        console.log(\"Extracting interval if present!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: extract the time interval if present in this query. If not present, return \"monthly\"\n                Possible time intervals: daily, weekly, monthly\n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 6) {\n      // extract stockName, extract interval, time_period, series_type\n      try {\n        console.log(\"Extracting stockName, interval, time_period, and series_type!\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Instructions: View the query, and extract the stock ticker symbol from it. Also, extract the time interval, time_period, and series type.\n                Defaults if N/a: symbol: AAPL time_interval: daily, time_period: 200, series_type: open\n                Return: The output prefaced by the label and a colon. (symbol: AAPL, time_interval: daily, time_period: 200, series_type: open )\n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else {\n      console.log(\"Invalid Request Type\");\n    }\n  }\n  // STEP 5\n  async function formApiParams(subRequestType, extractedInfo) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Instructions: Take in the function, and the extracted info, and format them like so:\n            \n            function=FUNCTION&extractedInfo1=EXTRACTEDINFO1&extractedInfo2=EXTRACTEDINFO2\n            \n            Example:\n            \n            function: TIME_SERIES_INTRADAY\n            interval is 5min\n            symbol = MSFT\n            \n            function=TIME_SERIES_INTRADAY&interval=5min&symbol=MSFT\n\n            make sure everything is lowercase.\n            print out on one line.\n\n            function: ${subRequestType}\n            other info to extract: ${extractedInfo}\n            `,\n      max_tokens: 50,\n      temperature: 0.5\n    });\n    const formattedText = response.data.choices[0].text.trim();\n    const functionIndex = formattedText.indexOf('function=');\n    return formattedText.slice(functionIndex);\n  }\n\n  // STEP 6\n  async function callApi(newApiParams) {\n    const url = `https://alpha-vantage.p.rapidapi.com/query?${newApiParams}&datatype=json&output_size=compact`;\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n        'X-RapidAPI-Host': 'alpha-vantage.p.rapidapi.com'\n      }\n    };\n    const response = await fetch(url, options);\n    const data = await response.text();\n    console.log('Original data:', data);\n    const trimmedData = data.replace(/\\s/g, '').substring(0, 3000);\n    console.log('Trimmed data:', trimmedData);\n    return trimmedData;\n  }\n\n  // STEP 7\n  async function summarizeApiCallData(requestType, subRequestType, apiCallData, query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Instructions: \n\n            DataSource: ${requestType},\n            Request Type: ${subRequestType}\n            Data to be summarized: ${apiCallData}\n            Question to be asked associated with data: ${query}\n\n            `,\n      max_tokens: 450,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n}\n_c = AlphaVantage;\nvar _c;\n$RefreshReg$(_c, \"AlphaVantage\");","map":{"version":3,"names":["Configuration","OpenAIApi","require","orgId","apiKey","configuration","openai","AlphaVantage","query","workflow","console","log","requestType","getRequestType","firstDigit","replace","extractedRequestType","parseInt","subRequestType","getSubRequestType","extractedInfo","extractInfo","apiParams","formApiParams","apiCallData","callApi","summarizedApiCallData","summarizeApiCallData","response","createCompletion","model","prompt","max_tokens","temperature","data","choices","text","requestOne","error","requestFour","requestFive","requestSix","requestSeven","requestEight","formattedText","trim","functionIndex","indexOf","slice","newApiParams","url","options","method","headers","fetch","trimmedData","substring"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/APIs/AlphaVantage.js"],"sourcesContent":["/**\n * AlphaVantage takes in a query, determines the request type, determines the subRequestType, extracts\n * the necessary information, forms the apiParams, calls the api, and summarizes the apiCallData\n * @param query - the query that the user is asking\n */\n\nconst { Configuration, OpenAIApi } = require('openai');\n\n\n// to do: move these to env variables\n// 2. Make summary better\n\n\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\n\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n});\nconst openai = new OpenAIApi(configuration);\n\nexport async function AlphaVantage(query){\n\nasync function workflow(query) {\n    console.log(\"AlphaVantage called!\");\n    console.log(\"AV: Step 1: gettingRequestType from query:\", query)\n    const requestType = await getRequestType(query); // STEP 1\n    console.log(\"AV: Step 2: processing requestType to int:\", requestType);\n    const firstDigit = requestType.replace(/\\D/g, '')[0]; // STEP 2\n    const extractedRequestType = parseInt(firstDigit); // STEP 2.5\n    console.log(\"AV: Step 3: gettingSubRequestType from extractedRequestType & Query:\", requestType, query);\n    const subRequestType = await getSubRequestType(extractedRequestType, query); // STEP 3\n    console.log(\"AV: Step 4: extractingInfo from extractedRequestType & Query:\", extractedRequestType, query);\n    const extractedInfo = await extractInfo(extractedRequestType, query); // STEP 4\n    console.log(\"AV: Step 5: formingApiParams from extractedInfo and subRequestType:\", extractedInfo, subRequestType);\n    const apiParams = await formApiParams(subRequestType, extractedInfo) // STEP 5\n    console.log(\"AV: Making API Call with params:\", apiParams)\n    const apiCallData = await callApi(apiParams); // STEP 6\n    console.log(\"AV: Step 7: summarizingApiCallData with current date, requestType, subrequestType, apiCallData, and query:\", requestType, subRequestType, apiCallData, query)\n    const summarizedApiCallData = await summarizeApiCallData(requestType, subRequestType, apiCallData, query); // STEP 7\n    console.log(\"AV: Final Step: Return Summary\", summarizedApiCallData);\n    return summarizedApiCallData;\n}   \n    const response = await workflow(query);\n    return response;\n    // STEP 1\n   async function getRequestType(query) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            View the query, determine the request type, and output the whole line associated with the query, starting with the number.\n            (1) Core Stock APIS - Intraday, Daily, Weekly, Monthly, & Current Price. (Input would have a stock ticker symbol)\n            (2) Forex - Exchange Rates, Intraday, Daily, Weekly, Monthly (Input would have a currency pair)\n            (3) Cryptocurrency - Intraday, Daily, Weekly, Monthly (Input would have a cryptocurrency symbol)\n            (4) Commodities - Crude Oil(Brent), Natural Gas, Copper, Aluminum, Wheat, Corn, Cotton, Sugar, Coffee, Global Commodities Index  (Input would describe a commodity)\n            (5) Economic Indicators - Real GDP, Real GDP Per Capita, Treasury Yield, Federal Funds Interest Rate, CPI, Inflation, Retail Sales, Durable Goods Orders, Unemployment Rate, Nonfarm Payroll (Input would describe an economic indicator)\n            (6) Technical Indicators - SMA, EMA, WMA, DEMA, TEMA, TRIMA, KAMA, MAMA, T3, MACD, MACDEXT, STOCH, STOCHF, RSI, STOCHRSI, WILLR, ADX, ADXR, APO, PPO, MOM, BOP, CCI, CMO, ROC, ROCR, AROON, AROONOSC, MFI, TRIX, ULTOSC, DX, MINUS_DI, PLUS_DI, MINUS_DM, PLUS_DM, BBANDS, MIDPOINT, MIDPRICE, SAR, TRANGE, ATR, NATR, AD, ADOSC, OBV, HT_TRENDLINE, HT_SINE, HT_TRENDMODE, HT_DCPERIOD, HT_DCPHASE, HT_PHASOR (Input would describe a technical indicator)\n\n            Here is the query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text.replace(/\\D/g, '')[0];\n    }\n    // STEP 3 \n    async function getSubRequestType(extractedRequestType, query) {\n        if (extractedRequestType === 1) {\n            try {\n                let requestOne;\n                requestOne = await openai.createCompletion({\n                    model: \"text-davinci-003\",\n                    prompt: `\n                    Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query. \n                    Return: The item in the parenthesis that corresponds to the subRequestType.\n                    1. Intraday (TIME_SERIES_INTRADAY)\n                    2. Daily (TIME_SERIES_DAILY)\n                    3. Weekly (TIME_SERIES_WEEKLY)\n                    4. Monthly (TIME_SERIES_MONTHLY)\n                    5. Current Price (GLOBAL_QUOTE)\n            \n                    Query: ${query}\n                    `,\n                    max_tokens: 128,\n                    temperature: 0.5,\n                });\n                console.log(\"requestOne:\", requestOne);\n                return requestOne.data.choices[0].text;\n            } catch (error) {\n                console.error(\"Error in createCompletion function:\", error);\n            }     \n        } else if (extractedRequestType === 2) {\n        console.log(\"Case Two! Running now...\");\n        let requestFour;\n        requestFour = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (FX_INTRADAY)\n            3. Daily (FX_DAILY)\n            4. Weekly (FX_WEEKLY)\n            5. Monthly (FX_MONTHLY)\n            \n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestFour.data.choices[0].text;\n        } else if (extractedRequestType === 3) {\n        console.log(\"Case Three! Running now...\");\n        let requestFive;\n        requestFive =  await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exhange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (CRYPTO_INTRADAY)\n            3. Daily (CRYPTO_DAILY)\n            4. Weekly (CRYPTO_WEEKLY)\n            5. Monthly (CRYPTO_MONTHLY)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestFive.data.choices[0].text;\n        } else if (extractedRequestType === 4) {\n        console.log(\"Case Four! Running now...\");\n        let requestSix;\n        requestSix = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Crude Oil, Brent (BRENT)\n            2. Natural Gas (NATURAL_GAS)\n            3. Copper (COPPER)\n            4. Aluminum (ALUMINUM)\n            5. Gold (GOLD)\n            6. Wheat (WHEAT)\n            7. Corn (CORN)\n            8. Cotton (COTTON)\n            9. Sugar (SUGAR)\n            10. Coffee (COFFEE)\n            11. Global Commodities Index (ALL_COMMODITIES)\n    \n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestSix.data.choices[0].text;     \n        } else if (extractedRequestType === 5) {\n        console.log(\"Case Five! Running now...\");\n        let requestSeven;\n        requestSeven = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. REAL GDP (REAL_GDP)\n            2. REAL GDP PER CAPITA (REAL_GDP_PER_CAPITA)\n            3. TREASURY YIELD (TREASURY_YIELD)\n            4. FEDERAL FUNDS RATE (FEDERAL_FUNDS_RATE)\n            5. CPI (CPI)\n            6. Inflation (INFLATION)\n            7. Retail Sales (RETAIL_SALES)\n            8. Durable Goods Orders (DURABLES)\n            9. Unemployment Rate (UNEMPLOYMENT)\n            10. NONFARM PAYROLLS (NONFARM_PAYROLL)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestSeven.data.choices[0].text;\n        } else if (extractedRequestType === 6) {\n        console.log(\"Case Six! Running now...\");\n        let requestEight;\n        requestEight = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. SMA (SMA)\n            2. EMA (EMA)\n            3. WMA (WMA)\n            4. DEMA (DEMA)\n            5. TEMA (TEMA)\n            6. TRIMA (TRIMA)\n            7. KAMA (KAMA)\n            8. MAMA (MAMA)\n            9. T3 (T3)\n            10. MACD (MACD)\n            11. MACDEXT (MACDEXT)\n            12. STOCH (STOCH)\n            13. STOCHF (STOCHF)\n            14. RSI (RSI)\n            15. STOCHRSI (STOCHRSI)\n            16. WILLR (WILLR)\n            17. ADX (ADX)\n            18. ADXR (ADXR)\n            19. APO (APO)\n            20. PPO (PPO)\n            21. MOM (MOM)\n            22. BOP (BOP)\n            23. CCI (CCI)\n            24. CMO (CMO)\n            25. ROC (ROC)\n            26. ROCR (ROCR)\n            27. AROON (AROON)\n            28. AROONOSC (AROONOSC)\n            29. MFI (MFI)\n            30. TRIX (TRIX)\n            31. ULTOSC (ULTOSC)\n            32. DX (DX)\n            33. MINUS_DI (MINUS_DI)\n            34. PLUS_DI (PLUS_DI)\n            35. MINUS_DM (MINUS_DM)\n            36. PLUS_DM (PLUS_DM)\n            37. BBANDS (BBANDS)\n            38. MIDPOINT (MIDPOINT)\n            39. MIDPRICE (MIDPRICE)\n            40. SAR (SAR)\n            41. TRANGE (TRANGE)\n            42. ATR (ATR)\n            43. NATR (NATR)\n            44. AD (AD)\n            45. ADOSC (ADOSC)\n            46. OBV (OBV)\n            47. HT_TRENDLINE (HT_TRENDLINE)\n            48. HT_SINE (HT_SINE)\n            49. HT_TRENDMODE (HT_TRENDMODE)\n            50. HT_DCPERIOD (HT_DCPERIOD)\n            51. HT_DCPHASE (HT_DCPHASE)\n            52. HT_PHASOR (HT_PHASOR)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestEight.data.choices[0].text;  \n        } else {\n            console.log(\"Invalid Request Type!\")\n        }\n    }\n\n    // STEP 4\n    async function extractInfo(extractedRequestType, query) {\n        if (extractedRequestType === 1) { // extract stockName, interval \n            try {\n            console.log(\"Extracting stockName & Interval!\")\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: View the query, and extract the stock ticker symbol from it, and the interval period (1min, 5min, 15min, 30min, 60min)\n                Defaults if N/A: symbol: AAPL, interval: 30min\n\n                Return: The output prefaced by the label and a colon. (symbol: AAPL, interval: 30min);\n\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n            } catch (error) {\n                console.error(error);\n            }\n        } else if (extractedRequestType === 2) { // extract fromCurrency, extract toCurrency, if only one currency, make it a USD pair. \n            try {\n                console.log(\"Extracting from_currency, to_currency!\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: extract the currency pair from this request. If there is only one currency, compare it against USD.\n                Output: from_currency: extracted currency in request, to_currency: extracted currency in request or USD if N/A.\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n            } catch (error) {\n                console.error(error);\n            }\n        } else if (extractedRequestType === 3) { // extract fromCurrency, extract toCurrency, if only one currency, make it a USD pair. \n            try {\n                console.log(\"Extracting from_currency, to_currency!\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: extract the currency pair from this request. If there is only one currency, compare it against USD. view ${subRequestType}, if it is INTRADAY, extract the interval as well, if no interval, set it to 30min.\n                Output: from_currency: extracted currency in request, to_currency: extracted currency in request or USD if N/A, interval (if subRequestType is INTRADAY): extracted interval in request or 30min if N/A.\n                Query: ${query}\n                Context: There might be cryptocurrency pairs in this mix.\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } catch (error) {\n            console.error(error);\n        }\n        } else if (extractedRequestType === 4) {  // extract interval if present\n            try { \n                console.log(\"Extracting interval if present!\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: extract the time interval if present in this query. If not present, return \"monthly\"\n                Possible time intervals: daily, weekly, monthly\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } catch (error) {\n            console.error(error);\n        }\n        } else if (extractedRequestType === 5) { // extract interval if present\n            try {\n                console.log(\"Extracting interval if present!\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: extract the time interval if present in this query. If not present, return \"monthly\"\n                Possible time intervals: daily, weekly, monthly\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } catch (error) {\n            console.error(error);\n        }\n        } else if (extractedRequestType === 6) { // extract stockName, extract interval, time_period, series_type\n            try {\n                console.log(\"Extracting stockName, interval, time_period, and series_type!\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Instructions: View the query, and extract the stock ticker symbol from it. Also, extract the time interval, time_period, and series type.\n                Defaults if N/a: symbol: AAPL time_interval: daily, time_period: 200, series_type: open\n                Return: The output prefaced by the label and a colon. (symbol: AAPL, time_interval: daily, time_period: 200, series_type: open )\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } catch (error) {\n            console.error(error);\n        }\n        } else {\n            console.log(\"Invalid Request Type\");\n        }\n    }\n    // STEP 5\n    async function formApiParams(subRequestType, extractedInfo) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: Take in the function, and the extracted info, and format them like so:\n            \n            function=FUNCTION&extractedInfo1=EXTRACTEDINFO1&extractedInfo2=EXTRACTEDINFO2\n            \n            Example:\n            \n            function: TIME_SERIES_INTRADAY\n            interval is 5min\n            symbol = MSFT\n            \n            function=TIME_SERIES_INTRADAY&interval=5min&symbol=MSFT\n\n            make sure everything is lowercase.\n            print out on one line.\n\n            function: ${subRequestType}\n            other info to extract: ${extractedInfo}\n            `,\n            max_tokens: 50,\n            temperature: 0.5,\n        })\n        const formattedText = response.data.choices[0].text.trim();\n        const functionIndex = formattedText.indexOf('function=');\n        return formattedText.slice(functionIndex);\n        }\n\n    // STEP 6\n    async function callApi(newApiParams) {\n        const url = `https://alpha-vantage.p.rapidapi.com/query?${newApiParams}&datatype=json&output_size=compact`;\n        const options = {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n            'X-RapidAPI-Host': 'alpha-vantage.p.rapidapi.com'\n          }\n        };\n        const response = await fetch(url, options);\n        const data = await response.text();\n        console.log('Original data:', data);\n        const trimmedData = data.replace(/\\s/g, '').substring(0, 3000);\n        console.log('Trimmed data:', trimmedData);\n        return trimmedData;\n      }\n      \n          \n    // STEP 7\n    async function summarizeApiCallData(requestType, subRequestType, apiCallData, query) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: \n\n            DataSource: ${requestType},\n            Request Type: ${subRequestType}\n            Data to be summarized: ${apiCallData}\n            Question to be asked associated with data: ${query}\n\n            `,\n            max_tokens: 450,\n            temperature: 0.5\n            \n        })\n        return response.data.choices[0].text;\n    }\n\n    }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}