{"ast":null,"code":"var _jsxFileName = \"/Users/aaronleek/Desktop/coding-projects/misc-projects/quick-hack-nw/Jonald - Hack/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport './normal.css';\nimport { useState } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nimport { inject } from '@vercel/analytics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ninject();\n\n// the handleSubmit front-end needs to be modified to call handleRequest if radio button is toggled yes. \n\n// envs\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\nfunction App() {\n  _s();\n  // statehooks\n  const [query, setQuery] = useState(\"\");\n  const [chatLog, setChatLog] = useState([]);\n  const [showOverlay, setShowOverlay] = useState(true);\n  const [showQueryArea, setShowQueryArea] = useState(false);\n\n  //open ai auth\n  const configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey\n  });\n  const openai = new OpenAIApi(configuration);\n  const [details, setDetails] = useState(\"\");\n  const [style, setStyle] = useState(\"\");\n  const [brands, setBrands] = useState(\"\");\n\n  // First completion, sets the context as Kari.ai personality.\n  async function getInitialCompletion(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      Purpose: Your name is Jonald. To help the user generate a content strategy for their product/service/company.\n      Instructions: Read the information passed in and respond with a content strategy.\n      Output: A content strategy for the user's product/service/company. Focus on Twitter, and generate a tweet calendar.\n\n      Information passed in\n      Product Details: ${details}\n      Style: ${style}\n      Brands to Mimick: ${brands}\n      `,\n      max_tokens: 3000,\n      temperature: .6,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n  // Second completion, mainly just responds to messages in a conversational manner.\n  async function getContextCompletion(query, messages) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      Instructions: view the chatLog for context and respond to the latest message.\n      Purpose of App: To help the user generate a content strategy for their product/service/company.\n\n      latestMessage: ${query}\n      chatLog: ${messages}\n      `,\n      max_tokens: 3000,\n      temperature: 1.0,\n      stop: \"/n\"\n    });\n    return response.data.choices[0].text;\n  }\n\n  // clearChat button function\n  function clearChat() {\n    setChatLog([]);\n    setShowOverlay(true);\n    setBrands(\"\");\n    setStyle(\"\");\n    setDetails(\"\");\n    setShowQueryArea(false);\n  }\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (query.trim() && query.length > 4) {\n      let chatLogNew = [...chatLog, {\n        user: \"me\",\n        message: `${query}`\n      }];\n      setQuery(\"\");\n      setChatLog(chatLogNew);\n      setShowOverlay(false);\n      const messages = chatLogNew.map(message => message.message).join(\"\");\n      console.log(\"Getting context completion\");\n      const data = await getContextCompletion(query, messages);\n      setChatLog([...chatLogNew, {\n        user: \"gpt\",\n        message: `${data}`\n      }]);\n    }\n  }\n  async function handleInitialSubmit(e) {\n    e.preventDefault();\n    let chatLogNew = [...chatLog, {\n      user: \"me\",\n      message: `Get me a tweet calendar for ${details} in the style of ${style} and brands like ${brands}`\n    }];\n    setChatLog(chatLogNew);\n    setShowOverlay(false);\n    setShowQueryArea(true);\n    const messages = chatLogNew.map(message => message.message).join(\"\");\n    const data = await getInitialCompletion(messages);\n    setChatLog([...chatLogNew, {\n      user: \"gpt\",\n      message: `${data}`\n    }]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidemenu\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"sidemenu-header\",\n        children: \"Jonald\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"side-menu-button\",\n        onClick: clearChat,\n        children: \" Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [showOverlay && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleInitialSubmit,\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"details\",\n          value: details,\n          onChange: e => setDetails(e.target.value),\n          className: \"form-input\",\n          placeholder: \"Product/Service/Company Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"style\",\n          value: style,\n          onChange: e => setStyle(e.target.value),\n          className: \"form-input\",\n          placeholder: \"Style of tweets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"brands\",\n          value: brands,\n          onChange: e => setBrands(e.target.value),\n          className: \"form-input\",\n          placeholder: \"Brands to Mimick\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"form-submit-button\",\n          onClick: () => {\n            handleSubmit();\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), showQueryArea && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stock-screening-tool\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              rows: \"1\",\n              value: query,\n              onChange: e => setQuery(e.target.value),\n              className: \"chat-input-textarea\",\n              placeholder: \"Ask a question or give a command\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"submit-button\",\n              onClick: () => {\n                handleSubmit();\n              },\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 1\n  }, this);\n}\n_s(App, \"cnsIXO5Pg+86v9xyorWY8c6SXzo=\");\n_c = App;\nconst ChatMessage = _ref => {\n  let {\n    message\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clearfix\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-message ${message.user === \"gpt\" && \"chatgpt\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-message-center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ChatMessage;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["useState","Configuration","OpenAIApi","inject","orgId","process","env","ORG_ID","apiKey","App","query","setQuery","chatLog","setChatLog","showOverlay","setShowOverlay","showQueryArea","setShowQueryArea","configuration","openai","details","setDetails","style","setStyle","brands","setBrands","getInitialCompletion","response","createCompletion","model","prompt","max_tokens","temperature","stop","data","choices","text","getContextCompletion","messages","clearChat","handleSubmit","e","preventDefault","trim","length","chatLogNew","user","message","map","join","console","log","handleInitialSubmit","target","value","index","ChatMessage"],"sources":["/Users/aaronleek/Desktop/coding-projects/misc-projects/quick-hack-nw/Jonald - Hack/src/App.js"],"sourcesContent":["import './App.css';\nimport './normal.css'\nimport { useState } from 'react';\nimport { Configuration, OpenAIApi } from 'openai';\nimport { inject } from '@vercel/analytics';\n\n\ninject();\n\n// the handleSubmit front-end needs to be modified to call handleRequest if radio button is toggled yes. \n\n\n// envs\nconst orgId = process.env.ORG_ID;\nconst apiKey = \"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\";\n\n\nfunction App() {\n\n  // statehooks\n  const [query, setQuery] = useState(\"\");\n  const [chatLog, setChatLog] = useState([])\n  const [showOverlay, setShowOverlay] = useState(true);\n  const [showQueryArea, setShowQueryArea] = useState(false);\n\n\n  //open ai auth\n  const configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n  });\n  const openai = new OpenAIApi(configuration);\n\n  const [details, setDetails] = useState(\"\");\n  const [style, setStyle] = useState(\"\");\n  const [brands, setBrands] = useState(\"\");\n\n// First completion, sets the context as Kari.ai personality.\n  async function getInitialCompletion(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      Purpose: Your name is Jonald. To help the user generate a content strategy for their product/service/company.\n      Instructions: Read the information passed in and respond with a content strategy.\n      Output: A content strategy for the user's product/service/company. Focus on Twitter, and generate a tweet calendar.\n\n      Information passed in\n      Product Details: ${details}\n      Style: ${style}\n      Brands to Mimick: ${brands}\n      `,\n      max_tokens: 3000,\n      temperature: .6,\n      stop: \"/n\",\n    });\n    return response.data.choices[0].text;\n  }\n// Second completion, mainly just responds to messages in a conversational manner.\n  async function getContextCompletion(query, messages) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n      Instructions: view the chatLog for context and respond to the latest message.\n      Purpose of App: To help the user generate a content strategy for their product/service/company.\n\n      latestMessage: ${query}\n      chatLog: ${messages}\n      `,\n      max_tokens: 3000,\n      temperature: 1.0,\n      stop: \"/n\",\n    });\n    return response.data.choices[0].text;\n  }\n\n  // clearChat button function\n  function clearChat(){\n    setChatLog([]);\n    setShowOverlay(true);\n    setBrands(\"\");  \n    setStyle(\"\");\n    setDetails(\"\");\n    setShowQueryArea(false);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (query.trim() && query.length > 4) {\n      let chatLogNew = [...chatLog, { user: \"me\", message: `${query}`}];\n      setQuery(\"\");\n      setChatLog(chatLogNew);\n      setShowOverlay(false);\n      const messages = chatLogNew.map((message) => message.message).join(\"\");\n        console.log(\"Getting context completion\");\n        const data = await getContextCompletion(query, messages);\n      setChatLog([...chatLogNew, { user: \"gpt\", message: `${data}`}]);\n    }\n  }\n\n  async function handleInitialSubmit(e) {\n    e.preventDefault();\n\n    let chatLogNew = [...chatLog, { user: \"me\", message: `Get me a tweet calendar for ${details} in the style of ${style} and brands like ${brands}`}];\n    setChatLog(chatLogNew);\n    setShowOverlay(false);\n    setShowQueryArea(true);\n    const messages = chatLogNew.map((message) => message.message).join(\"\");\n    const data = await getInitialCompletion(messages);\n    setChatLog([...chatLogNew, { user: \"gpt\", message: `${data}`}]);\n  }\n  \n\n\nreturn (\n<div className=\"App\">\n<aside className=\"sidemenu\"> \n  <h3 className=\"sidemenu-header\">Jonald</h3>\n   <button className=\"side-menu-button\" onClick={clearChat}> Reset</button> \n   </aside>\n      <section className=\"chatbox\">\n      {showOverlay && (\n       <form onSubmit={handleInitialSubmit} className=\"form-container\">\n       <input\n         type=\"text\"\n         id=\"details\"\n         value={details}\n         onChange={(e) => setDetails(e.target.value)}\n         className=\"form-input\"\n          placeholder='Product/Service/Company Details'\n       />\n       <input\n         type=\"text\"\n         id=\"style\"\n         value={style}\n         onChange={(e) => setStyle(e.target.value)}\n         className=\"form-input\"\n        placeholder='Style of tweets'\n       />\n       <input\n         type=\"text\"\n         id=\"brands\"\n         value={brands}\n         onChange={(e) => setBrands(e.target.value)}\n         className=\"form-input\"\n         placeholder='Brands to Mimick'\n       />\n       <button className=\"form-submit-button\" onClick={() => {handleSubmit();}}>Send</button>\n     </form>\n          \n        )}\n        <div className=\"chat-log\">\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n    </div>\n    {showQueryArea && (\n      \n      <div className=\"chat-input-holder\">\n      <div className=\"stock-screening-tool\">\n        <form onSubmit={handleSubmit}> \n          <input \n            rows=\"1\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            className=\"chat-input-textarea\"\n            placeholder=\"Ask a question or give a command\"></input>\n          <button className=\"submit-button\" onClick={() =>{ handleSubmit();}}>Send</button>\n        </form>\n      </div>\n  </div>\n      )}\n\n</section>\n</div>\n  );\n}\n\nconst ChatMessage = ({ message }) => {\n  return (\n    <div className=\"clearfix\">\n    <div className={`chat-message ${message.user === \"gpt\" && \"chatgpt\"}`}>\n    <div className=\"chat-message-center\">\n    </div> \n    <div className=\"message\">\n      {message.message}\n  </div>\n</div>\n</div>\n  )\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}