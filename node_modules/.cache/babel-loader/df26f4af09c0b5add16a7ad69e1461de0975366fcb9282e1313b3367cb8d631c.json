{"ast":null,"code":"const {\n  Configuration,\n  OpenAIApi\n} = require('openai');\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\nconst configuration = new Configuration({\n  orgId: orgId,\n  apiKey: apiKey\n});\nconst openai = new OpenAIApi(configuration);\nexport async function WallStreetBets(query) {\n  async function workflow(query) {\n    console.log(\"Template called!\");\n    console.log(\"Step 1: gettingRequestType from query:\", query);\n    const requestType = await getRequestType(query); // STEP 1\n    console.log(\"Step 2: processing requestType to int:\", requestType);\n    const firstDigit = requestType.replace(/\\D/g, '')[0]; // STEP 2\n    const extractedRequestType = parseInt(firstDigit); // STEP 2.5\n    console.log(\"AV: Step 3: gettingSubRequestType from extractedRequestType & Query:\", requestType, query);\n    const subRequestType = await getSubRequestType(extractedRequestType, query); // STEP 3\n    console.log(\"Step 4: extractingInfo from extractedRequestType & Query:\", extractedRequestType, query);\n    const extractedInfo = await extractInfo(extractedRequestType, query); // STEP 4\n    console.log(\"Step 5: formingApiParams from extractedInfo and subRequestType:\", extractedInfo, subRequestType);\n    const apiParams = await formApiParams(subRequestType, extractedInfo); // STEP 5\n    console.log(\"Making API Call with params:\", apiParams);\n    const apiCallData = await callApi(apiParams); // STEP 6\n    console.log(\"Step 7: summarizingApiCallData with current date, requestType, subrequestType, apiCallData, and query:\", requestType, subRequestType, apiCallData, query);\n    const summarizedApiCallData = await summarizeApiCallData(requestType, subRequestType, apiCallData, query); // STEP 7\n    console.log(\"Final Step: Return Summary\", summarizedApiCallData);\n    return summarizedApiCallData;\n  }\n  const response = await workflow(query);\n  return response;\n  // STEP 1\n  async function getRequestType(query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n\n            Here is the query: ${query}\n            `,\n      max_tokens: 128,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text.replace(/\\D/g, '')[0];\n  }\n  // STEP 3: OPTIONAL \n  async function getSubRequestType(extractedRequestType, query) {\n    if (extractedRequestType === 1) {\n      try {\n        let requestOne;\n        requestOne = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `   \n\n                    Query: ${query}\n                    `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        console.log(\"requestOne:\", requestOne);\n        return requestOne.data.choices[0].text;\n      } catch (error) {\n        console.error(\"Error in createCompletion function:\", error);\n      }\n    } else if (extractedRequestType === 2) {\n      console.log(\"Case Three! Running now...\");\n      let requestFour;\n      requestFour = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (FX_INTRADAY)\n            3. Daily (FX_DAILY)\n            4. Weekly (FX_WEEKLY)\n            5. Monthly (FX_MONTHLY)\n            \n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestFour.data.choices[0].text;\n    } else if (extractedRequestType === 3) {\n      console.log(\"Case Three! Running now...\");\n      let requestFive;\n      requestFive = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exhange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (CRYPTO_INTRADAY)\n            3. Daily (CRYPTO_DAILY)\n            4. Weekly (CRYPTO_WEEKLY)\n            5. Monthly (CRYPTO_MONTHLY)\n\n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestFive.data.choices[0].text;\n    } else if (extractedRequestType === 4) {\n      console.log(\"Case Four! Running now...\");\n      let requestSix;\n      requestSix = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Crude Oil, Brent (BRENT)\n            2. Natural Gas (NATURAL_GAS)\n            3. Copper (COPPER)\n            4. Aluminum (ALUMINUM)\n            5. Gold (GOLD)\n            6. Wheat (WHEAT)\n            7. Corn (CORN)\n            8. Cotton (COTTON)\n            9. Sugar (SUGAR)\n            10. Coffee (COFFEE)\n            11. Global Commodities Index (ALL_COMMODITIES)\n    \n            Query: ${query}\n            `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return requestSix.data.choices[0].text;\n    } else {\n      console.log(\"Invalid Request Type\");\n    }\n  }\n  // STEP 4\n  async function extractInfo(extractedRequestType, query) {\n    if (extractedRequestType === 1) {\n      try {\n        console.log(\"Extracting:\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n \n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 2) {\n      try {\n        console.log(\"\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n   \n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 3) {\n      try {\n        console.log(\"\");\n        let response;\n        response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `\n                Query: ${query}\n                `,\n          max_tokens: 128,\n          temperature: 0.5\n        });\n        return response.data.choices[0].text;\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (extractedRequestType === 4) {\n      console.log(\"\");\n      let response;\n      response = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `\n                Query: ${query}\n                `,\n        max_tokens: 128,\n        temperature: 0.5\n      });\n      return response.data.choices[0].text;\n    } else {\n      console.log(\"Invalid Request Type\");\n    }\n  }\n  // STEP 5\n  async function formApiParams(subRequestType, extractedInfo) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Instructions: Take in the date from the extracted info, and format it like so:\n            \n            date=today            \n            \n            Possible Outputs:\n            date=today\n            date=yesterday\n            date=this_week\n            date=last_week\n            date=this_month\n            date=last_month\n            \n            \n            function: TIME_SERIES_INTRADAY\n            interval is 5min\n            symbol = MSFT\n            \n            function=TIME_SERIES_INTRADAY&interval=5min&symbol=MSFT\n\n            print out on one line.\n\n            function: ${subRequestType}\n            other info to extract: ${extractedInfo}\n            `,\n      max_tokens: 50,\n      temperature: 0.5\n    });\n    const formattedText = response.data.choices[0].text.trim();\n    const functionIndex = formattedText.indexOf('function=');\n    return formattedText.slice(functionIndex);\n  }\n\n  // STEP 6\n  async function callApi(newApiParams) {\n    const url = `https://wallstreetbets.p.rapidapi.com/?${newApiParams}`;\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n        'X-RapidAPI-Host': 'wallstreetbets.p.rapidapi.com'\n      }\n    };\n    const response = await fetch(url, options);\n    const data = await response.text();\n    console.log('Original data:', data);\n    const trimmedData = data.replace(/\\s/g, '').substring(0, 3000);\n    console.log('Trimmed data:', trimmedData);\n    return trimmedData;\n  }\n\n  // STEP 7\n  async function summarizeApiCallData(requestType, subRequestType, apiCallData, query) {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `\n            Instructions: \n\n            DataSource: ${requestType},\n            Request Type: ${subRequestType}\n            Data to be summarized: ${apiCallData}\n            Question to be asked associated with data: ${query}\n\n            `,\n      max_tokens: 450,\n      temperature: 0.5\n    });\n    return response.data.choices[0].text;\n  }\n}\n_c = WallStreetBets;\nvar _c;\n$RefreshReg$(_c, \"WallStreetBets\");","map":{"version":3,"names":["Configuration","OpenAIApi","require","orgId","apiKey","configuration","openai","WallStreetBets","query","workflow","console","log","requestType","getRequestType","firstDigit","replace","extractedRequestType","parseInt","subRequestType","getSubRequestType","extractedInfo","extractInfo","apiParams","formApiParams","apiCallData","callApi","summarizedApiCallData","summarizeApiCallData","response","createCompletion","model","prompt","max_tokens","temperature","data","choices","text","requestOne","error","requestFour","requestFive","requestSix","formattedText","trim","functionIndex","indexOf","slice","newApiParams","url","options","method","headers","fetch","trimmedData","substring"],"sources":["/Users/aaronleek/Desktop/coding-projects/kari-ai/kari-platform/Kari-React-Client/Kari-React-Client/src/Models/APIs/WallStreetBets.js"],"sourcesContent":["const { Configuration, OpenAIApi } = require('openai');\nconst orgId = \"org-rnY9Z2LuVmBnRlAsfLipqzcf\";\nconst apiKey = \"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\";\n\nconst configuration = new Configuration({\n    orgId: orgId,\n    apiKey: apiKey,\n});\nconst openai = new OpenAIApi(configuration);\n\nexport async function WallStreetBets(query){\n\nasync function workflow(query) {\n    console.log(\"Template called!\");\n    console.log(\"Step 1: gettingRequestType from query:\", query)\n    const requestType = await getRequestType(query); // STEP 1\n    console.log(\"Step 2: processing requestType to int:\", requestType);\n    const firstDigit = requestType.replace(/\\D/g, '')[0]; // STEP 2\n    const extractedRequestType = parseInt(firstDigit); // STEP 2.5\n    console.log(\"AV: Step 3: gettingSubRequestType from extractedRequestType & Query:\", requestType, query);\n    const subRequestType = await getSubRequestType(extractedRequestType, query); // STEP 3\n    console.log(\"Step 4: extractingInfo from extractedRequestType & Query:\", extractedRequestType, query);\n    const extractedInfo = await extractInfo(extractedRequestType, query); // STEP 4\n    console.log(\"Step 5: formingApiParams from extractedInfo and subRequestType:\", extractedInfo, subRequestType);\n    const apiParams = await formApiParams(subRequestType, extractedInfo) // STEP 5\n    console.log(\"Making API Call with params:\", apiParams)\n    const apiCallData = await callApi(apiParams); // STEP 6\n    console.log(\"Step 7: summarizingApiCallData with current date, requestType, subrequestType, apiCallData, and query:\", requestType, subRequestType, apiCallData, query)\n    const summarizedApiCallData = await summarizeApiCallData(requestType, subRequestType, apiCallData, query); // STEP 7\n    console.log(\"Final Step: Return Summary\", summarizedApiCallData);\n    return summarizedApiCallData;\n}   \n    const response = await workflow(query);\n    return response;\n    // STEP 1\n   async function getRequestType(query) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n\n            Here is the query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n\n        })\n        return response.data.choices[0].text.replace(/\\D/g, '')[0];\n    }\n    // STEP 3: OPTIONAL \n   async function getSubRequestType(extractedRequestType, query) {\n        if (extractedRequestType === 1) {\n            try {\n                let requestOne;\n                requestOne = await openai.createCompletion({\n                    model: \"text-davinci-003\",\n                    prompt: `   \n\n                    Query: ${query}\n                    `,\n                    max_tokens: 128,\n                    temperature: 0.5,\n                });\n                console.log(\"requestOne:\", requestOne);\n                return requestOne.data.choices[0].text;\n            } catch (error) {\n                console.error(\"Error in createCompletion function:\", error);\n            }     \n        } else if (extractedRequestType === 2) {\n        console.log(\"Case Three! Running now...\");\n        let requestFour;\n        requestFour = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exchange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (FX_INTRADAY)\n            3. Daily (FX_DAILY)\n            4. Weekly (FX_WEEKLY)\n            5. Monthly (FX_MONTHLY)\n            \n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestFour.data.choices[0].text;\n        } else if (extractedRequestType === 3) {\n        console.log(\"Case Three! Running now...\");\n        let requestFive;\n        requestFive =  await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Exhange Rates (CURRENCY_EXCHANGE_RATE)\n            2. Intraday (CRYPTO_INTRADAY)\n            3. Daily (CRYPTO_DAILY)\n            4. Weekly (CRYPTO_WEEKLY)\n            5. Monthly (CRYPTO_MONTHLY)\n\n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestFive.data.choices[0].text;\n        } else if (extractedRequestType === 4) {\n        console.log(\"Case Four! Running now...\");\n        let requestSix;\n        requestSix = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: View the query, and determine the subRequestType, which is the option that most closely matches the query.\n            Return: The item in the parenthesis that corresponds to the subRequestType.\n            1. Crude Oil, Brent (BRENT)\n            2. Natural Gas (NATURAL_GAS)\n            3. Copper (COPPER)\n            4. Aluminum (ALUMINUM)\n            5. Gold (GOLD)\n            6. Wheat (WHEAT)\n            7. Corn (CORN)\n            8. Cotton (COTTON)\n            9. Sugar (SUGAR)\n            10. Coffee (COFFEE)\n            11. Global Commodities Index (ALL_COMMODITIES)\n    \n            Query: ${query}\n            `,\n            max_tokens: 128,\n            temperature: 0.5,\n        })\n        return requestSix.data.choices[0].text;     \n    } else {\n        console.log(\"Invalid Request Type\");\n    }\n}\n    // STEP 4\n    async function extractInfo(extractedRequestType, query) {\n        if (extractedRequestType === 1) { \n            try {\n            console.log(\"Extracting:\")\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n \n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n            } catch (error) {\n                console.error(error);\n            }\n        } else if (extractedRequestType === 2) { \n            try {\n                console.log(\"\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n   \n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n            } catch (error) {\n                console.error(error);\n            }\n        } else if (extractedRequestType === 3) { \n            try {\n                console.log(\"\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } catch (error) {\n            console.error(error);\n        }\n        } else if (extractedRequestType === 4) { \n                console.log(\"\");\n            let response;\n            response = await openai.createCompletion({\n                model: \"text-davinci-003\",\n                prompt: `\n                Query: ${query}\n                `,\n                max_tokens: 128,\n                temperature: 0.5\n            })\n            return response.data.choices[0].text;\n        } else {\n            console.log(\"Invalid Request Type\");\n        }\n    }\n    // STEP 5\n    async function formApiParams(subRequestType, extractedInfo) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: Take in the date from the extracted info, and format it like so:\n            \n            date=today            \n            \n            Possible Outputs:\n            date=today\n            date=yesterday\n            date=this_week\n            date=last_week\n            date=this_month\n            date=last_month\n            \n            \n            function: TIME_SERIES_INTRADAY\n            interval is 5min\n            symbol = MSFT\n            \n            function=TIME_SERIES_INTRADAY&interval=5min&symbol=MSFT\n\n            print out on one line.\n\n            function: ${subRequestType}\n            other info to extract: ${extractedInfo}\n            `,\n            max_tokens: 50,\n            temperature: 0.5,\n        })\n        const formattedText = response.data.choices[0].text.trim();\n        const functionIndex = formattedText.indexOf('function=');\n        return formattedText.slice(functionIndex);\n        }\n\n    // STEP 6\n    async function callApi(newApiParams) {\n        const url = `https://wallstreetbets.p.rapidapi.com/?${newApiParams}`;\n        const options = {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': '72afef0eebmsh11f76b0091d62b7p17626bjsnea279a0c36ba',\n            'X-RapidAPI-Host': 'wallstreetbets.p.rapidapi.com'\n          }\n        };\n        const response = await fetch(url, options);\n        const data = await response.text();\n        console.log('Original data:', data);\n        const trimmedData = data.replace(/\\s/g, '').substring(0, 3000);\n        console.log('Trimmed data:', trimmedData);\n        return trimmedData;\n      }\n      \n    // STEP 7\n    async function summarizeApiCallData(requestType, subRequestType, apiCallData, query) {\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: `\n            Instructions: \n\n            DataSource: ${requestType},\n            Request Type: ${subRequestType}\n            Data to be summarized: ${apiCallData}\n            Question to be asked associated with data: ${query}\n\n            `,\n            max_tokens: 450,\n            temperature: 0.5\n            \n        })\n        return response.data.choices[0].text;\n    }\n   }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}